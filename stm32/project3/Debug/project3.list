
project3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004818  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000ac  080049c8  080049c8  000149c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004a74  08004a74  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  08004a74  08004a74  00014a74  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004a7c  08004a7c  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004a7c  08004a7c  00014a7c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004a80  08004a80  00014a80  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08004a84  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020010  2**0
                  CONTENTS
 10 .bss          00004990  20000010  20000010  00020010  2**3
                  ALLOC
 11 ._user_heap_stack 00000600  200049a0  200049a0  00020010  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000e6c8  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000254a  00000000  00000000  0002e708  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000c78  00000000  00000000  00030c58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000b70  00000000  00000000  000318d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000027ad  00000000  00000000  00032440  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000d1a5  00000000  00000000  00034bed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d86fc  00000000  00000000  00041d92  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0011a48e  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000323c  00000000  00000000  0011a4e0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000010 	.word	0x20000010
 80001cc:	00000000 	.word	0x00000000
 80001d0:	080049b0 	.word	0x080049b0

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000014 	.word	0x20000014
 80001ec:	080049b0 	.word	0x080049b0

080001f0 <__aeabi_uldivmod>:
 80001f0:	b953      	cbnz	r3, 8000208 <__aeabi_uldivmod+0x18>
 80001f2:	b94a      	cbnz	r2, 8000208 <__aeabi_uldivmod+0x18>
 80001f4:	2900      	cmp	r1, #0
 80001f6:	bf08      	it	eq
 80001f8:	2800      	cmpeq	r0, #0
 80001fa:	bf1c      	itt	ne
 80001fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000200:	f04f 30ff 	movne.w	r0, #4294967295
 8000204:	f000 b974 	b.w	80004f0 <__aeabi_idiv0>
 8000208:	f1ad 0c08 	sub.w	ip, sp, #8
 800020c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000210:	f000 f806 	bl	8000220 <__udivmoddi4>
 8000214:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000218:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800021c:	b004      	add	sp, #16
 800021e:	4770      	bx	lr

08000220 <__udivmoddi4>:
 8000220:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000224:	9d08      	ldr	r5, [sp, #32]
 8000226:	4604      	mov	r4, r0
 8000228:	468e      	mov	lr, r1
 800022a:	2b00      	cmp	r3, #0
 800022c:	d14d      	bne.n	80002ca <__udivmoddi4+0xaa>
 800022e:	428a      	cmp	r2, r1
 8000230:	4694      	mov	ip, r2
 8000232:	d969      	bls.n	8000308 <__udivmoddi4+0xe8>
 8000234:	fab2 f282 	clz	r2, r2
 8000238:	b152      	cbz	r2, 8000250 <__udivmoddi4+0x30>
 800023a:	fa01 f302 	lsl.w	r3, r1, r2
 800023e:	f1c2 0120 	rsb	r1, r2, #32
 8000242:	fa20 f101 	lsr.w	r1, r0, r1
 8000246:	fa0c fc02 	lsl.w	ip, ip, r2
 800024a:	ea41 0e03 	orr.w	lr, r1, r3
 800024e:	4094      	lsls	r4, r2
 8000250:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000254:	0c21      	lsrs	r1, r4, #16
 8000256:	fbbe f6f8 	udiv	r6, lr, r8
 800025a:	fa1f f78c 	uxth.w	r7, ip
 800025e:	fb08 e316 	mls	r3, r8, r6, lr
 8000262:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000266:	fb06 f107 	mul.w	r1, r6, r7
 800026a:	4299      	cmp	r1, r3
 800026c:	d90a      	bls.n	8000284 <__udivmoddi4+0x64>
 800026e:	eb1c 0303 	adds.w	r3, ip, r3
 8000272:	f106 30ff 	add.w	r0, r6, #4294967295
 8000276:	f080 811f 	bcs.w	80004b8 <__udivmoddi4+0x298>
 800027a:	4299      	cmp	r1, r3
 800027c:	f240 811c 	bls.w	80004b8 <__udivmoddi4+0x298>
 8000280:	3e02      	subs	r6, #2
 8000282:	4463      	add	r3, ip
 8000284:	1a5b      	subs	r3, r3, r1
 8000286:	b2a4      	uxth	r4, r4
 8000288:	fbb3 f0f8 	udiv	r0, r3, r8
 800028c:	fb08 3310 	mls	r3, r8, r0, r3
 8000290:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000294:	fb00 f707 	mul.w	r7, r0, r7
 8000298:	42a7      	cmp	r7, r4
 800029a:	d90a      	bls.n	80002b2 <__udivmoddi4+0x92>
 800029c:	eb1c 0404 	adds.w	r4, ip, r4
 80002a0:	f100 33ff 	add.w	r3, r0, #4294967295
 80002a4:	f080 810a 	bcs.w	80004bc <__udivmoddi4+0x29c>
 80002a8:	42a7      	cmp	r7, r4
 80002aa:	f240 8107 	bls.w	80004bc <__udivmoddi4+0x29c>
 80002ae:	4464      	add	r4, ip
 80002b0:	3802      	subs	r0, #2
 80002b2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002b6:	1be4      	subs	r4, r4, r7
 80002b8:	2600      	movs	r6, #0
 80002ba:	b11d      	cbz	r5, 80002c4 <__udivmoddi4+0xa4>
 80002bc:	40d4      	lsrs	r4, r2
 80002be:	2300      	movs	r3, #0
 80002c0:	e9c5 4300 	strd	r4, r3, [r5]
 80002c4:	4631      	mov	r1, r6
 80002c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ca:	428b      	cmp	r3, r1
 80002cc:	d909      	bls.n	80002e2 <__udivmoddi4+0xc2>
 80002ce:	2d00      	cmp	r5, #0
 80002d0:	f000 80ef 	beq.w	80004b2 <__udivmoddi4+0x292>
 80002d4:	2600      	movs	r6, #0
 80002d6:	e9c5 0100 	strd	r0, r1, [r5]
 80002da:	4630      	mov	r0, r6
 80002dc:	4631      	mov	r1, r6
 80002de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002e2:	fab3 f683 	clz	r6, r3
 80002e6:	2e00      	cmp	r6, #0
 80002e8:	d14a      	bne.n	8000380 <__udivmoddi4+0x160>
 80002ea:	428b      	cmp	r3, r1
 80002ec:	d302      	bcc.n	80002f4 <__udivmoddi4+0xd4>
 80002ee:	4282      	cmp	r2, r0
 80002f0:	f200 80f9 	bhi.w	80004e6 <__udivmoddi4+0x2c6>
 80002f4:	1a84      	subs	r4, r0, r2
 80002f6:	eb61 0303 	sbc.w	r3, r1, r3
 80002fa:	2001      	movs	r0, #1
 80002fc:	469e      	mov	lr, r3
 80002fe:	2d00      	cmp	r5, #0
 8000300:	d0e0      	beq.n	80002c4 <__udivmoddi4+0xa4>
 8000302:	e9c5 4e00 	strd	r4, lr, [r5]
 8000306:	e7dd      	b.n	80002c4 <__udivmoddi4+0xa4>
 8000308:	b902      	cbnz	r2, 800030c <__udivmoddi4+0xec>
 800030a:	deff      	udf	#255	; 0xff
 800030c:	fab2 f282 	clz	r2, r2
 8000310:	2a00      	cmp	r2, #0
 8000312:	f040 8092 	bne.w	800043a <__udivmoddi4+0x21a>
 8000316:	eba1 010c 	sub.w	r1, r1, ip
 800031a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800031e:	fa1f fe8c 	uxth.w	lr, ip
 8000322:	2601      	movs	r6, #1
 8000324:	0c20      	lsrs	r0, r4, #16
 8000326:	fbb1 f3f7 	udiv	r3, r1, r7
 800032a:	fb07 1113 	mls	r1, r7, r3, r1
 800032e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000332:	fb0e f003 	mul.w	r0, lr, r3
 8000336:	4288      	cmp	r0, r1
 8000338:	d908      	bls.n	800034c <__udivmoddi4+0x12c>
 800033a:	eb1c 0101 	adds.w	r1, ip, r1
 800033e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000342:	d202      	bcs.n	800034a <__udivmoddi4+0x12a>
 8000344:	4288      	cmp	r0, r1
 8000346:	f200 80cb 	bhi.w	80004e0 <__udivmoddi4+0x2c0>
 800034a:	4643      	mov	r3, r8
 800034c:	1a09      	subs	r1, r1, r0
 800034e:	b2a4      	uxth	r4, r4
 8000350:	fbb1 f0f7 	udiv	r0, r1, r7
 8000354:	fb07 1110 	mls	r1, r7, r0, r1
 8000358:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800035c:	fb0e fe00 	mul.w	lr, lr, r0
 8000360:	45a6      	cmp	lr, r4
 8000362:	d908      	bls.n	8000376 <__udivmoddi4+0x156>
 8000364:	eb1c 0404 	adds.w	r4, ip, r4
 8000368:	f100 31ff 	add.w	r1, r0, #4294967295
 800036c:	d202      	bcs.n	8000374 <__udivmoddi4+0x154>
 800036e:	45a6      	cmp	lr, r4
 8000370:	f200 80bb 	bhi.w	80004ea <__udivmoddi4+0x2ca>
 8000374:	4608      	mov	r0, r1
 8000376:	eba4 040e 	sub.w	r4, r4, lr
 800037a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800037e:	e79c      	b.n	80002ba <__udivmoddi4+0x9a>
 8000380:	f1c6 0720 	rsb	r7, r6, #32
 8000384:	40b3      	lsls	r3, r6
 8000386:	fa22 fc07 	lsr.w	ip, r2, r7
 800038a:	ea4c 0c03 	orr.w	ip, ip, r3
 800038e:	fa20 f407 	lsr.w	r4, r0, r7
 8000392:	fa01 f306 	lsl.w	r3, r1, r6
 8000396:	431c      	orrs	r4, r3
 8000398:	40f9      	lsrs	r1, r7
 800039a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800039e:	fa00 f306 	lsl.w	r3, r0, r6
 80003a2:	fbb1 f8f9 	udiv	r8, r1, r9
 80003a6:	0c20      	lsrs	r0, r4, #16
 80003a8:	fa1f fe8c 	uxth.w	lr, ip
 80003ac:	fb09 1118 	mls	r1, r9, r8, r1
 80003b0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003b4:	fb08 f00e 	mul.w	r0, r8, lr
 80003b8:	4288      	cmp	r0, r1
 80003ba:	fa02 f206 	lsl.w	r2, r2, r6
 80003be:	d90b      	bls.n	80003d8 <__udivmoddi4+0x1b8>
 80003c0:	eb1c 0101 	adds.w	r1, ip, r1
 80003c4:	f108 3aff 	add.w	sl, r8, #4294967295
 80003c8:	f080 8088 	bcs.w	80004dc <__udivmoddi4+0x2bc>
 80003cc:	4288      	cmp	r0, r1
 80003ce:	f240 8085 	bls.w	80004dc <__udivmoddi4+0x2bc>
 80003d2:	f1a8 0802 	sub.w	r8, r8, #2
 80003d6:	4461      	add	r1, ip
 80003d8:	1a09      	subs	r1, r1, r0
 80003da:	b2a4      	uxth	r4, r4
 80003dc:	fbb1 f0f9 	udiv	r0, r1, r9
 80003e0:	fb09 1110 	mls	r1, r9, r0, r1
 80003e4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003e8:	fb00 fe0e 	mul.w	lr, r0, lr
 80003ec:	458e      	cmp	lr, r1
 80003ee:	d908      	bls.n	8000402 <__udivmoddi4+0x1e2>
 80003f0:	eb1c 0101 	adds.w	r1, ip, r1
 80003f4:	f100 34ff 	add.w	r4, r0, #4294967295
 80003f8:	d26c      	bcs.n	80004d4 <__udivmoddi4+0x2b4>
 80003fa:	458e      	cmp	lr, r1
 80003fc:	d96a      	bls.n	80004d4 <__udivmoddi4+0x2b4>
 80003fe:	3802      	subs	r0, #2
 8000400:	4461      	add	r1, ip
 8000402:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000406:	fba0 9402 	umull	r9, r4, r0, r2
 800040a:	eba1 010e 	sub.w	r1, r1, lr
 800040e:	42a1      	cmp	r1, r4
 8000410:	46c8      	mov	r8, r9
 8000412:	46a6      	mov	lr, r4
 8000414:	d356      	bcc.n	80004c4 <__udivmoddi4+0x2a4>
 8000416:	d053      	beq.n	80004c0 <__udivmoddi4+0x2a0>
 8000418:	b15d      	cbz	r5, 8000432 <__udivmoddi4+0x212>
 800041a:	ebb3 0208 	subs.w	r2, r3, r8
 800041e:	eb61 010e 	sbc.w	r1, r1, lr
 8000422:	fa01 f707 	lsl.w	r7, r1, r7
 8000426:	fa22 f306 	lsr.w	r3, r2, r6
 800042a:	40f1      	lsrs	r1, r6
 800042c:	431f      	orrs	r7, r3
 800042e:	e9c5 7100 	strd	r7, r1, [r5]
 8000432:	2600      	movs	r6, #0
 8000434:	4631      	mov	r1, r6
 8000436:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800043a:	f1c2 0320 	rsb	r3, r2, #32
 800043e:	40d8      	lsrs	r0, r3
 8000440:	fa0c fc02 	lsl.w	ip, ip, r2
 8000444:	fa21 f303 	lsr.w	r3, r1, r3
 8000448:	4091      	lsls	r1, r2
 800044a:	4301      	orrs	r1, r0
 800044c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000450:	fa1f fe8c 	uxth.w	lr, ip
 8000454:	fbb3 f0f7 	udiv	r0, r3, r7
 8000458:	fb07 3610 	mls	r6, r7, r0, r3
 800045c:	0c0b      	lsrs	r3, r1, #16
 800045e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000462:	fb00 f60e 	mul.w	r6, r0, lr
 8000466:	429e      	cmp	r6, r3
 8000468:	fa04 f402 	lsl.w	r4, r4, r2
 800046c:	d908      	bls.n	8000480 <__udivmoddi4+0x260>
 800046e:	eb1c 0303 	adds.w	r3, ip, r3
 8000472:	f100 38ff 	add.w	r8, r0, #4294967295
 8000476:	d22f      	bcs.n	80004d8 <__udivmoddi4+0x2b8>
 8000478:	429e      	cmp	r6, r3
 800047a:	d92d      	bls.n	80004d8 <__udivmoddi4+0x2b8>
 800047c:	3802      	subs	r0, #2
 800047e:	4463      	add	r3, ip
 8000480:	1b9b      	subs	r3, r3, r6
 8000482:	b289      	uxth	r1, r1
 8000484:	fbb3 f6f7 	udiv	r6, r3, r7
 8000488:	fb07 3316 	mls	r3, r7, r6, r3
 800048c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000490:	fb06 f30e 	mul.w	r3, r6, lr
 8000494:	428b      	cmp	r3, r1
 8000496:	d908      	bls.n	80004aa <__udivmoddi4+0x28a>
 8000498:	eb1c 0101 	adds.w	r1, ip, r1
 800049c:	f106 38ff 	add.w	r8, r6, #4294967295
 80004a0:	d216      	bcs.n	80004d0 <__udivmoddi4+0x2b0>
 80004a2:	428b      	cmp	r3, r1
 80004a4:	d914      	bls.n	80004d0 <__udivmoddi4+0x2b0>
 80004a6:	3e02      	subs	r6, #2
 80004a8:	4461      	add	r1, ip
 80004aa:	1ac9      	subs	r1, r1, r3
 80004ac:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004b0:	e738      	b.n	8000324 <__udivmoddi4+0x104>
 80004b2:	462e      	mov	r6, r5
 80004b4:	4628      	mov	r0, r5
 80004b6:	e705      	b.n	80002c4 <__udivmoddi4+0xa4>
 80004b8:	4606      	mov	r6, r0
 80004ba:	e6e3      	b.n	8000284 <__udivmoddi4+0x64>
 80004bc:	4618      	mov	r0, r3
 80004be:	e6f8      	b.n	80002b2 <__udivmoddi4+0x92>
 80004c0:	454b      	cmp	r3, r9
 80004c2:	d2a9      	bcs.n	8000418 <__udivmoddi4+0x1f8>
 80004c4:	ebb9 0802 	subs.w	r8, r9, r2
 80004c8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004cc:	3801      	subs	r0, #1
 80004ce:	e7a3      	b.n	8000418 <__udivmoddi4+0x1f8>
 80004d0:	4646      	mov	r6, r8
 80004d2:	e7ea      	b.n	80004aa <__udivmoddi4+0x28a>
 80004d4:	4620      	mov	r0, r4
 80004d6:	e794      	b.n	8000402 <__udivmoddi4+0x1e2>
 80004d8:	4640      	mov	r0, r8
 80004da:	e7d1      	b.n	8000480 <__udivmoddi4+0x260>
 80004dc:	46d0      	mov	r8, sl
 80004de:	e77b      	b.n	80003d8 <__udivmoddi4+0x1b8>
 80004e0:	3b02      	subs	r3, #2
 80004e2:	4461      	add	r1, ip
 80004e4:	e732      	b.n	800034c <__udivmoddi4+0x12c>
 80004e6:	4630      	mov	r0, r6
 80004e8:	e709      	b.n	80002fe <__udivmoddi4+0xde>
 80004ea:	4464      	add	r4, ip
 80004ec:	3802      	subs	r0, #2
 80004ee:	e742      	b.n	8000376 <__udivmoddi4+0x156>

080004f0 <__aeabi_idiv0>:
 80004f0:	4770      	bx	lr
 80004f2:	bf00      	nop

080004f4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004f4:	b580      	push	{r7, lr}
 80004f6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004f8:	f000 fa5e 	bl	80009b8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004fc:	f000 f83a 	bl	8000574 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000500:	f000 f8aa 	bl	8000658 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000504:	f001 fa38 	bl	8001978 <osKernelInitialize>
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* USER CODE BEGIN RTOS_SEMAPHORES */
  /* add semaphores, ... */
  xSemaphore = xSemaphoreCreateMutex();
 8000508:	2001      	movs	r0, #1
 800050a:	f001 fd6c 	bl	8001fe6 <xQueueCreateMutex>
 800050e:	4603      	mov	r3, r0
 8000510:	4a0e      	ldr	r2, [pc, #56]	; (800054c <main+0x58>)
 8000512:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of task1 */
  task1Handle = osThreadNew(StartTask1, NULL, &task1_attributes);
 8000514:	4a0e      	ldr	r2, [pc, #56]	; (8000550 <main+0x5c>)
 8000516:	2100      	movs	r1, #0
 8000518:	480e      	ldr	r0, [pc, #56]	; (8000554 <main+0x60>)
 800051a:	f001 fa77 	bl	8001a0c <osThreadNew>
 800051e:	4603      	mov	r3, r0
 8000520:	4a0d      	ldr	r2, [pc, #52]	; (8000558 <main+0x64>)
 8000522:	6013      	str	r3, [r2, #0]

  /* creation of task2 */
  task2Handle = osThreadNew(StartTask2, NULL, &task2_attributes);
 8000524:	4a0d      	ldr	r2, [pc, #52]	; (800055c <main+0x68>)
 8000526:	2100      	movs	r1, #0
 8000528:	480d      	ldr	r0, [pc, #52]	; (8000560 <main+0x6c>)
 800052a:	f001 fa6f 	bl	8001a0c <osThreadNew>
 800052e:	4603      	mov	r3, r0
 8000530:	4a0c      	ldr	r2, [pc, #48]	; (8000564 <main+0x70>)
 8000532:	6013      	str	r3, [r2, #0]

  /* creation of task3 */
  task3Handle = osThreadNew(StartTask3, NULL, &task3_attributes);
 8000534:	4a0c      	ldr	r2, [pc, #48]	; (8000568 <main+0x74>)
 8000536:	2100      	movs	r1, #0
 8000538:	480c      	ldr	r0, [pc, #48]	; (800056c <main+0x78>)
 800053a:	f001 fa67 	bl	8001a0c <osThreadNew>
 800053e:	4603      	mov	r3, r0
 8000540:	4a0b      	ldr	r2, [pc, #44]	; (8000570 <main+0x7c>)
 8000542:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000544:	f001 fa3c 	bl	80019c0 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (1)
 8000548:	e7fe      	b.n	8000548 <main+0x54>
 800054a:	bf00      	nop
 800054c:	2000002c 	.word	0x2000002c
 8000550:	080049f8 	.word	0x080049f8
 8000554:	08000711 	.word	0x08000711
 8000558:	20000030 	.word	0x20000030
 800055c:	08004a1c 	.word	0x08004a1c
 8000560:	0800078d 	.word	0x0800078d
 8000564:	20000034 	.word	0x20000034
 8000568:	08004a40 	.word	0x08004a40
 800056c:	08000809 	.word	0x08000809
 8000570:	20000038 	.word	0x20000038

08000574 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000574:	b580      	push	{r7, lr}
 8000576:	b094      	sub	sp, #80	; 0x50
 8000578:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800057a:	f107 0320 	add.w	r3, r7, #32
 800057e:	2230      	movs	r2, #48	; 0x30
 8000580:	2100      	movs	r1, #0
 8000582:	4618      	mov	r0, r3
 8000584:	f004 fa0c 	bl	80049a0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000588:	f107 030c 	add.w	r3, r7, #12
 800058c:	2200      	movs	r2, #0
 800058e:	601a      	str	r2, [r3, #0]
 8000590:	605a      	str	r2, [r3, #4]
 8000592:	609a      	str	r2, [r3, #8]
 8000594:	60da      	str	r2, [r3, #12]
 8000596:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000598:	2300      	movs	r3, #0
 800059a:	60bb      	str	r3, [r7, #8]
 800059c:	4b2c      	ldr	r3, [pc, #176]	; (8000650 <SystemClock_Config+0xdc>)
 800059e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005a0:	4a2b      	ldr	r2, [pc, #172]	; (8000650 <SystemClock_Config+0xdc>)
 80005a2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005a6:	6413      	str	r3, [r2, #64]	; 0x40
 80005a8:	4b29      	ldr	r3, [pc, #164]	; (8000650 <SystemClock_Config+0xdc>)
 80005aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005b0:	60bb      	str	r3, [r7, #8]
 80005b2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80005b4:	2300      	movs	r3, #0
 80005b6:	607b      	str	r3, [r7, #4]
 80005b8:	4b26      	ldr	r3, [pc, #152]	; (8000654 <SystemClock_Config+0xe0>)
 80005ba:	681b      	ldr	r3, [r3, #0]
 80005bc:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80005c0:	4a24      	ldr	r2, [pc, #144]	; (8000654 <SystemClock_Config+0xe0>)
 80005c2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80005c6:	6013      	str	r3, [r2, #0]
 80005c8:	4b22      	ldr	r3, [pc, #136]	; (8000654 <SystemClock_Config+0xe0>)
 80005ca:	681b      	ldr	r3, [r3, #0]
 80005cc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80005d0:	607b      	str	r3, [r7, #4]
 80005d2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80005d4:	2302      	movs	r3, #2
 80005d6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005d8:	2301      	movs	r3, #1
 80005da:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005dc:	2310      	movs	r3, #16
 80005de:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005e0:	2302      	movs	r3, #2
 80005e2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80005e4:	2300      	movs	r3, #0
 80005e6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80005e8:	2308      	movs	r3, #8
 80005ea:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 90;
 80005ec:	235a      	movs	r3, #90	; 0x5a
 80005ee:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005f0:	2302      	movs	r3, #2
 80005f2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80005f4:	2304      	movs	r3, #4
 80005f6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005f8:	f107 0320 	add.w	r3, r7, #32
 80005fc:	4618      	mov	r0, r3
 80005fe:	f000 fd63 	bl	80010c8 <HAL_RCC_OscConfig>
 8000602:	4603      	mov	r3, r0
 8000604:	2b00      	cmp	r3, #0
 8000606:	d001      	beq.n	800060c <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000608:	f000 f944 	bl	8000894 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 800060c:	f000 fd0c 	bl	8001028 <HAL_PWREx_EnableOverDrive>
 8000610:	4603      	mov	r3, r0
 8000612:	2b00      	cmp	r3, #0
 8000614:	d001      	beq.n	800061a <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8000616:	f000 f93d 	bl	8000894 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800061a:	230f      	movs	r3, #15
 800061c:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800061e:	2302      	movs	r3, #2
 8000620:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000622:	2300      	movs	r3, #0
 8000624:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000626:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800062a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800062c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000630:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000632:	f107 030c 	add.w	r3, r7, #12
 8000636:	2102      	movs	r1, #2
 8000638:	4618      	mov	r0, r3
 800063a:	f000 ffbd 	bl	80015b8 <HAL_RCC_ClockConfig>
 800063e:	4603      	mov	r3, r0
 8000640:	2b00      	cmp	r3, #0
 8000642:	d001      	beq.n	8000648 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8000644:	f000 f926 	bl	8000894 <Error_Handler>
  }
}
 8000648:	bf00      	nop
 800064a:	3750      	adds	r7, #80	; 0x50
 800064c:	46bd      	mov	sp, r7
 800064e:	bd80      	pop	{r7, pc}
 8000650:	40023800 	.word	0x40023800
 8000654:	40007000 	.word	0x40007000

08000658 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000658:	b580      	push	{r7, lr}
 800065a:	b088      	sub	sp, #32
 800065c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800065e:	f107 030c 	add.w	r3, r7, #12
 8000662:	2200      	movs	r2, #0
 8000664:	601a      	str	r2, [r3, #0]
 8000666:	605a      	str	r2, [r3, #4]
 8000668:	609a      	str	r2, [r3, #8]
 800066a:	60da      	str	r2, [r3, #12]
 800066c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800066e:	2300      	movs	r3, #0
 8000670:	60bb      	str	r3, [r7, #8]
 8000672:	4b24      	ldr	r3, [pc, #144]	; (8000704 <MX_GPIO_Init+0xac>)
 8000674:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000676:	4a23      	ldr	r2, [pc, #140]	; (8000704 <MX_GPIO_Init+0xac>)
 8000678:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800067c:	6313      	str	r3, [r2, #48]	; 0x30
 800067e:	4b21      	ldr	r3, [pc, #132]	; (8000704 <MX_GPIO_Init+0xac>)
 8000680:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000682:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000686:	60bb      	str	r3, [r7, #8]
 8000688:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800068a:	2300      	movs	r3, #0
 800068c:	607b      	str	r3, [r7, #4]
 800068e:	4b1d      	ldr	r3, [pc, #116]	; (8000704 <MX_GPIO_Init+0xac>)
 8000690:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000692:	4a1c      	ldr	r2, [pc, #112]	; (8000704 <MX_GPIO_Init+0xac>)
 8000694:	f043 0301 	orr.w	r3, r3, #1
 8000698:	6313      	str	r3, [r2, #48]	; 0x30
 800069a:	4b1a      	ldr	r3, [pc, #104]	; (8000704 <MX_GPIO_Init+0xac>)
 800069c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800069e:	f003 0301 	and.w	r3, r3, #1
 80006a2:	607b      	str	r3, [r7, #4]
 80006a4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE(); // Enable GPIOG clock
 80006a6:	2300      	movs	r3, #0
 80006a8:	603b      	str	r3, [r7, #0]
 80006aa:	4b16      	ldr	r3, [pc, #88]	; (8000704 <MX_GPIO_Init+0xac>)
 80006ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ae:	4a15      	ldr	r2, [pc, #84]	; (8000704 <MX_GPIO_Init+0xac>)
 80006b0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80006b4:	6313      	str	r3, [r2, #48]	; 0x30
 80006b6:	4b13      	ldr	r3, [pc, #76]	; (8000704 <MX_GPIO_Init+0xac>)
 80006b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80006be:	603b      	str	r3, [r7, #0]
 80006c0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin : Key_Pin */
  GPIO_InitStruct.Pin = Key_Pin;
 80006c2:	2301      	movs	r3, #1
 80006c4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80006c6:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80006ca:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006cc:	2300      	movs	r3, #0
 80006ce:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(Key_GPIO_Port, &GPIO_InitStruct);
 80006d0:	f107 030c 	add.w	r3, r7, #12
 80006d4:	4619      	mov	r1, r3
 80006d6:	480c      	ldr	r0, [pc, #48]	; (8000708 <MX_GPIO_Init+0xb0>)
 80006d8:	f000 fac6 	bl	8000c68 <HAL_GPIO_Init>

  /*Configure GPIO pins for LEDs on GPIOG */
  GPIO_InitStruct.Pin = GPIO_PIN_13 | GPIO_PIN_14;
 80006dc:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 80006e0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006e2:	2301      	movs	r3, #1
 80006e4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006e6:	2300      	movs	r3, #0
 80006e8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006ea:	2300      	movs	r3, #0
 80006ec:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80006ee:	f107 030c 	add.w	r3, r7, #12
 80006f2:	4619      	mov	r1, r3
 80006f4:	4805      	ldr	r0, [pc, #20]	; (800070c <MX_GPIO_Init+0xb4>)
 80006f6:	f000 fab7 	bl	8000c68 <HAL_GPIO_Init>
}
 80006fa:	bf00      	nop
 80006fc:	3720      	adds	r7, #32
 80006fe:	46bd      	mov	sp, r7
 8000700:	bd80      	pop	{r7, pc}
 8000702:	bf00      	nop
 8000704:	40023800 	.word	0x40023800
 8000708:	40020000 	.word	0x40020000
 800070c:	40021800 	.word	0x40021800

08000710 <StartTask1>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartTask1 */
void StartTask1(void *argument)
{
 8000710:	b580      	push	{r7, lr}
 8000712:	b082      	sub	sp, #8
 8000714:	af00      	add	r7, sp, #0
 8000716:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;){
    if(xSemaphoreTake(xSemaphore, (TickType_t)100)) {
 8000718:	4b17      	ldr	r3, [pc, #92]	; (8000778 <StartTask1+0x68>)
 800071a:	681b      	ldr	r3, [r3, #0]
 800071c:	2164      	movs	r1, #100	; 0x64
 800071e:	4618      	mov	r0, r3
 8000720:	f001 fef4 	bl	800250c <xQueueSemaphoreTake>
 8000724:	4603      	mov	r3, r0
 8000726:	2b00      	cmp	r3, #0
 8000728:	d021      	beq.n	800076e <StartTask1+0x5e>
    	task1State = 1;
 800072a:	4b14      	ldr	r3, [pc, #80]	; (800077c <StartTask1+0x6c>)
 800072c:	2201      	movs	r2, #1
 800072e:	701a      	strb	r2, [r3, #0]
    	task2State = 0;
 8000730:	4b13      	ldr	r3, [pc, #76]	; (8000780 <StartTask1+0x70>)
 8000732:	2200      	movs	r2, #0
 8000734:	701a      	strb	r2, [r3, #0]
    	task3State = 0;
 8000736:	4b13      	ldr	r3, [pc, #76]	; (8000784 <StartTask1+0x74>)
 8000738:	2200      	movs	r2, #0
 800073a:	701a      	strb	r2, [r3, #0]
    	HAL_GPIO_WritePin(GPIOG, GPIO_PIN_14, GPIO_PIN_RESET);
 800073c:	2200      	movs	r2, #0
 800073e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000742:	4811      	ldr	r0, [pc, #68]	; (8000788 <StartTask1+0x78>)
 8000744:	f000 fc3c 	bl	8000fc0 <HAL_GPIO_WritePin>
    	HAL_GPIO_TogglePin(GPIOG, GPIO_PIN_13); // Toggle RED LED
 8000748:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800074c:	480e      	ldr	r0, [pc, #56]	; (8000788 <StartTask1+0x78>)
 800074e:	f000 fc50 	bl	8000ff2 <HAL_GPIO_TogglePin>
    	osDelay(2000);
 8000752:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000756:	f001 f9eb 	bl	8001b30 <osDelay>
    	task1State = -1;
 800075a:	4b08      	ldr	r3, [pc, #32]	; (800077c <StartTask1+0x6c>)
 800075c:	22ff      	movs	r2, #255	; 0xff
 800075e:	701a      	strb	r2, [r3, #0]
    	xSemaphoreGive(xSemaphore);
 8000760:	4b05      	ldr	r3, [pc, #20]	; (8000778 <StartTask1+0x68>)
 8000762:	6818      	ldr	r0, [r3, #0]
 8000764:	2300      	movs	r3, #0
 8000766:	2200      	movs	r2, #0
 8000768:	2100      	movs	r1, #0
 800076a:	f001 fc55 	bl	8002018 <xQueueGenericSend>
    }
    osDelay(2002); // Delay to allow other tasks to run
 800076e:	f240 70d2 	movw	r0, #2002	; 0x7d2
 8000772:	f001 f9dd 	bl	8001b30 <osDelay>
    if(xSemaphoreTake(xSemaphore, (TickType_t)100)) {
 8000776:	e7cf      	b.n	8000718 <StartTask1+0x8>
 8000778:	2000002c 	.word	0x2000002c
 800077c:	20000048 	.word	0x20000048
 8000780:	20000049 	.word	0x20000049
 8000784:	2000004a 	.word	0x2000004a
 8000788:	40021800 	.word	0x40021800

0800078c <StartTask2>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask2 */
void StartTask2(void *argument)
{
 800078c:	b580      	push	{r7, lr}
 800078e:	b082      	sub	sp, #8
 8000790:	af00      	add	r7, sp, #0
 8000792:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask2 */
  /* Infinite loop */
  for(;;){
    if(xSemaphoreTake(xSemaphore, (TickType_t)100)) {
 8000794:	4b17      	ldr	r3, [pc, #92]	; (80007f4 <StartTask2+0x68>)
 8000796:	681b      	ldr	r3, [r3, #0]
 8000798:	2164      	movs	r1, #100	; 0x64
 800079a:	4618      	mov	r0, r3
 800079c:	f001 feb6 	bl	800250c <xQueueSemaphoreTake>
 80007a0:	4603      	mov	r3, r0
 80007a2:	2b00      	cmp	r3, #0
 80007a4:	d021      	beq.n	80007ea <StartTask2+0x5e>
    	task1State = 0;
 80007a6:	4b14      	ldr	r3, [pc, #80]	; (80007f8 <StartTask2+0x6c>)
 80007a8:	2200      	movs	r2, #0
 80007aa:	701a      	strb	r2, [r3, #0]
    	task2State = 1;
 80007ac:	4b13      	ldr	r3, [pc, #76]	; (80007fc <StartTask2+0x70>)
 80007ae:	2201      	movs	r2, #1
 80007b0:	701a      	strb	r2, [r3, #0]
    	task3State = 0;
 80007b2:	4b13      	ldr	r3, [pc, #76]	; (8000800 <StartTask2+0x74>)
 80007b4:	2200      	movs	r2, #0
 80007b6:	701a      	strb	r2, [r3, #0]
    	HAL_GPIO_WritePin(GPIOG, GPIO_PIN_13, GPIO_PIN_RESET);
 80007b8:	2200      	movs	r2, #0
 80007ba:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80007be:	4811      	ldr	r0, [pc, #68]	; (8000804 <StartTask2+0x78>)
 80007c0:	f000 fbfe 	bl	8000fc0 <HAL_GPIO_WritePin>
    	HAL_GPIO_TogglePin(GPIOG, GPIO_PIN_14); // Toggle GREEN LED
 80007c4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80007c8:	480e      	ldr	r0, [pc, #56]	; (8000804 <StartTask2+0x78>)
 80007ca:	f000 fc12 	bl	8000ff2 <HAL_GPIO_TogglePin>
    	osDelay(1000);
 80007ce:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80007d2:	f001 f9ad 	bl	8001b30 <osDelay>
    	task2State = -1;
 80007d6:	4b09      	ldr	r3, [pc, #36]	; (80007fc <StartTask2+0x70>)
 80007d8:	22ff      	movs	r2, #255	; 0xff
 80007da:	701a      	strb	r2, [r3, #0]
    	xSemaphoreGive(xSemaphore);
 80007dc:	4b05      	ldr	r3, [pc, #20]	; (80007f4 <StartTask2+0x68>)
 80007de:	6818      	ldr	r0, [r3, #0]
 80007e0:	2300      	movs	r3, #0
 80007e2:	2200      	movs	r2, #0
 80007e4:	2100      	movs	r1, #0
 80007e6:	f001 fc17 	bl	8002018 <xQueueGenericSend>
    }
    osDelay(2001); // Delay to allow other tasks to run
 80007ea:	f240 70d1 	movw	r0, #2001	; 0x7d1
 80007ee:	f001 f99f 	bl	8001b30 <osDelay>
    if(xSemaphoreTake(xSemaphore, (TickType_t)100)) {
 80007f2:	e7cf      	b.n	8000794 <StartTask2+0x8>
 80007f4:	2000002c 	.word	0x2000002c
 80007f8:	20000048 	.word	0x20000048
 80007fc:	20000049 	.word	0x20000049
 8000800:	2000004a 	.word	0x2000004a
 8000804:	40021800 	.word	0x40021800

08000808 <StartTask3>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask3 */
void StartTask3(void *argument)
{
 8000808:	b5b0      	push	{r4, r5, r7, lr}
 800080a:	b082      	sub	sp, #8
 800080c:	af00      	add	r7, sp, #0
 800080e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask3 */
  /* Infinite loop */
  for(;;){
    if(xSemaphoreTake(xSemaphore, (TickType_t)100)) {
 8000810:	4b1a      	ldr	r3, [pc, #104]	; (800087c <StartTask3+0x74>)
 8000812:	681b      	ldr	r3, [r3, #0]
 8000814:	2164      	movs	r1, #100	; 0x64
 8000816:	4618      	mov	r0, r3
 8000818:	f001 fe78 	bl	800250c <xQueueSemaphoreTake>
 800081c:	4603      	mov	r3, r0
 800081e:	2b00      	cmp	r3, #0
 8000820:	d027      	beq.n	8000872 <StartTask3+0x6a>
    	task1State = 0;
 8000822:	4b17      	ldr	r3, [pc, #92]	; (8000880 <StartTask3+0x78>)
 8000824:	2200      	movs	r2, #0
 8000826:	701a      	strb	r2, [r3, #0]
    	task2State = 0;
 8000828:	4b16      	ldr	r3, [pc, #88]	; (8000884 <StartTask3+0x7c>)
 800082a:	2200      	movs	r2, #0
 800082c:	701a      	strb	r2, [r3, #0]
    	task3State = 1;
 800082e:	4b16      	ldr	r3, [pc, #88]	; (8000888 <StartTask3+0x80>)
 8000830:	2201      	movs	r2, #1
 8000832:	701a      	strb	r2, [r3, #0]
    	HAL_GPIO_WritePin(GPIOG, GPIO_PIN_13, GPIO_PIN_RESET);
 8000834:	2200      	movs	r2, #0
 8000836:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800083a:	4814      	ldr	r0, [pc, #80]	; (800088c <StartTask3+0x84>)
 800083c:	f000 fbc0 	bl	8000fc0 <HAL_GPIO_WritePin>
    	HAL_GPIO_WritePin(GPIOG, GPIO_PIN_14, GPIO_PIN_RESET);
 8000840:	2200      	movs	r2, #0
 8000842:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000846:	4811      	ldr	r0, [pc, #68]	; (800088c <StartTask3+0x84>)
 8000848:	f000 fbba 	bl	8000fc0 <HAL_GPIO_WritePin>
    	counter++; // Increment counter
 800084c:	4b10      	ldr	r3, [pc, #64]	; (8000890 <StartTask3+0x88>)
 800084e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000852:	1c54      	adds	r4, r2, #1
 8000854:	f143 0500 	adc.w	r5, r3, #0
 8000858:	4b0d      	ldr	r3, [pc, #52]	; (8000890 <StartTask3+0x88>)
 800085a:	e9c3 4500 	strd	r4, r5, [r3]
    	task3State = -1;
 800085e:	4b0a      	ldr	r3, [pc, #40]	; (8000888 <StartTask3+0x80>)
 8000860:	22ff      	movs	r2, #255	; 0xff
 8000862:	701a      	strb	r2, [r3, #0]
    	xSemaphoreGive(xSemaphore);
 8000864:	4b05      	ldr	r3, [pc, #20]	; (800087c <StartTask3+0x74>)
 8000866:	6818      	ldr	r0, [r3, #0]
 8000868:	2300      	movs	r3, #0
 800086a:	2200      	movs	r2, #0
 800086c:	2100      	movs	r1, #0
 800086e:	f001 fbd3 	bl	8002018 <xQueueGenericSend>
    }
    osDelay(1); // Delay to allow other tasks to run
 8000872:	2001      	movs	r0, #1
 8000874:	f001 f95c 	bl	8001b30 <osDelay>
    if(xSemaphoreTake(xSemaphore, (TickType_t)100)) {
 8000878:	e7ca      	b.n	8000810 <StartTask3+0x8>
 800087a:	bf00      	nop
 800087c:	2000002c 	.word	0x2000002c
 8000880:	20000048 	.word	0x20000048
 8000884:	20000049 	.word	0x20000049
 8000888:	2000004a 	.word	0x2000004a
 800088c:	40021800 	.word	0x40021800
 8000890:	20000040 	.word	0x20000040

08000894 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000894:	b480      	push	{r7}
 8000896:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000898:	b672      	cpsid	i
}
 800089a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800089c:	e7fe      	b.n	800089c <Error_Handler+0x8>
	...

080008a0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008a0:	b580      	push	{r7, lr}
 80008a2:	b082      	sub	sp, #8
 80008a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008a6:	2300      	movs	r3, #0
 80008a8:	607b      	str	r3, [r7, #4]
 80008aa:	4b12      	ldr	r3, [pc, #72]	; (80008f4 <HAL_MspInit+0x54>)
 80008ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008ae:	4a11      	ldr	r2, [pc, #68]	; (80008f4 <HAL_MspInit+0x54>)
 80008b0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80008b4:	6453      	str	r3, [r2, #68]	; 0x44
 80008b6:	4b0f      	ldr	r3, [pc, #60]	; (80008f4 <HAL_MspInit+0x54>)
 80008b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008ba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80008be:	607b      	str	r3, [r7, #4]
 80008c0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008c2:	2300      	movs	r3, #0
 80008c4:	603b      	str	r3, [r7, #0]
 80008c6:	4b0b      	ldr	r3, [pc, #44]	; (80008f4 <HAL_MspInit+0x54>)
 80008c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008ca:	4a0a      	ldr	r2, [pc, #40]	; (80008f4 <HAL_MspInit+0x54>)
 80008cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008d0:	6413      	str	r3, [r2, #64]	; 0x40
 80008d2:	4b08      	ldr	r3, [pc, #32]	; (80008f4 <HAL_MspInit+0x54>)
 80008d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008da:	603b      	str	r3, [r7, #0]
 80008dc:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80008de:	2200      	movs	r2, #0
 80008e0:	210f      	movs	r1, #15
 80008e2:	f06f 0001 	mvn.w	r0, #1
 80008e6:	f000 f996 	bl	8000c16 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008ea:	bf00      	nop
 80008ec:	3708      	adds	r7, #8
 80008ee:	46bd      	mov	sp, r7
 80008f0:	bd80      	pop	{r7, pc}
 80008f2:	bf00      	nop
 80008f4:	40023800 	.word	0x40023800

080008f8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80008f8:	b480      	push	{r7}
 80008fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80008fc:	e7fe      	b.n	80008fc <NMI_Handler+0x4>

080008fe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80008fe:	b480      	push	{r7}
 8000900:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000902:	e7fe      	b.n	8000902 <HardFault_Handler+0x4>

08000904 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000904:	b480      	push	{r7}
 8000906:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000908:	e7fe      	b.n	8000908 <MemManage_Handler+0x4>

0800090a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800090a:	b480      	push	{r7}
 800090c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800090e:	e7fe      	b.n	800090e <BusFault_Handler+0x4>

08000910 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000910:	b480      	push	{r7}
 8000912:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000914:	e7fe      	b.n	8000914 <UsageFault_Handler+0x4>

08000916 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000916:	b480      	push	{r7}
 8000918:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800091a:	bf00      	nop
 800091c:	46bd      	mov	sp, r7
 800091e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000922:	4770      	bx	lr

08000924 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000924:	b580      	push	{r7, lr}
 8000926:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000928:	f000 f898 	bl	8000a5c <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 800092c:	f002 fe9e 	bl	800366c <xTaskGetSchedulerState>
 8000930:	4603      	mov	r3, r0
 8000932:	2b01      	cmp	r3, #1
 8000934:	d001      	beq.n	800093a <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8000936:	f003 fd87 	bl	8004448 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800093a:	bf00      	nop
 800093c:	bd80      	pop	{r7, pc}
	...

08000940 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000940:	b480      	push	{r7}
 8000942:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000944:	4b06      	ldr	r3, [pc, #24]	; (8000960 <SystemInit+0x20>)
 8000946:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800094a:	4a05      	ldr	r2, [pc, #20]	; (8000960 <SystemInit+0x20>)
 800094c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000950:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000954:	bf00      	nop
 8000956:	46bd      	mov	sp, r7
 8000958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800095c:	4770      	bx	lr
 800095e:	bf00      	nop
 8000960:	e000ed00 	.word	0xe000ed00

08000964 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8000964:	f8df d034 	ldr.w	sp, [pc, #52]	; 800099c <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000968:	480d      	ldr	r0, [pc, #52]	; (80009a0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800096a:	490e      	ldr	r1, [pc, #56]	; (80009a4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800096c:	4a0e      	ldr	r2, [pc, #56]	; (80009a8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800096e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000970:	e002      	b.n	8000978 <LoopCopyDataInit>

08000972 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000972:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000974:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000976:	3304      	adds	r3, #4

08000978 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000978:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800097a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800097c:	d3f9      	bcc.n	8000972 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800097e:	4a0b      	ldr	r2, [pc, #44]	; (80009ac <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000980:	4c0b      	ldr	r4, [pc, #44]	; (80009b0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000982:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000984:	e001      	b.n	800098a <LoopFillZerobss>

08000986 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000986:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000988:	3204      	adds	r2, #4

0800098a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800098a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800098c:	d3fb      	bcc.n	8000986 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800098e:	f7ff ffd7 	bl	8000940 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000992:	f003 ffd3 	bl	800493c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000996:	f7ff fdad 	bl	80004f4 <main>
  bx  lr    
 800099a:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 800099c:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 80009a0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80009a4:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 80009a8:	08004a84 	.word	0x08004a84
  ldr r2, =_sbss
 80009ac:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 80009b0:	200049a0 	.word	0x200049a0

080009b4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80009b4:	e7fe      	b.n	80009b4 <ADC_IRQHandler>
	...

080009b8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80009b8:	b580      	push	{r7, lr}
 80009ba:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80009bc:	4b0e      	ldr	r3, [pc, #56]	; (80009f8 <HAL_Init+0x40>)
 80009be:	681b      	ldr	r3, [r3, #0]
 80009c0:	4a0d      	ldr	r2, [pc, #52]	; (80009f8 <HAL_Init+0x40>)
 80009c2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80009c6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80009c8:	4b0b      	ldr	r3, [pc, #44]	; (80009f8 <HAL_Init+0x40>)
 80009ca:	681b      	ldr	r3, [r3, #0]
 80009cc:	4a0a      	ldr	r2, [pc, #40]	; (80009f8 <HAL_Init+0x40>)
 80009ce:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80009d2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80009d4:	4b08      	ldr	r3, [pc, #32]	; (80009f8 <HAL_Init+0x40>)
 80009d6:	681b      	ldr	r3, [r3, #0]
 80009d8:	4a07      	ldr	r2, [pc, #28]	; (80009f8 <HAL_Init+0x40>)
 80009da:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80009de:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80009e0:	2003      	movs	r0, #3
 80009e2:	f000 f90d 	bl	8000c00 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80009e6:	200f      	movs	r0, #15
 80009e8:	f000 f808 	bl	80009fc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80009ec:	f7ff ff58 	bl	80008a0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80009f0:	2300      	movs	r3, #0
}
 80009f2:	4618      	mov	r0, r3
 80009f4:	bd80      	pop	{r7, pc}
 80009f6:	bf00      	nop
 80009f8:	40023c00 	.word	0x40023c00

080009fc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80009fc:	b580      	push	{r7, lr}
 80009fe:	b082      	sub	sp, #8
 8000a00:	af00      	add	r7, sp, #0
 8000a02:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000a04:	4b12      	ldr	r3, [pc, #72]	; (8000a50 <HAL_InitTick+0x54>)
 8000a06:	681a      	ldr	r2, [r3, #0]
 8000a08:	4b12      	ldr	r3, [pc, #72]	; (8000a54 <HAL_InitTick+0x58>)
 8000a0a:	781b      	ldrb	r3, [r3, #0]
 8000a0c:	4619      	mov	r1, r3
 8000a0e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a12:	fbb3 f3f1 	udiv	r3, r3, r1
 8000a16:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a1a:	4618      	mov	r0, r3
 8000a1c:	f000 f917 	bl	8000c4e <HAL_SYSTICK_Config>
 8000a20:	4603      	mov	r3, r0
 8000a22:	2b00      	cmp	r3, #0
 8000a24:	d001      	beq.n	8000a2a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000a26:	2301      	movs	r3, #1
 8000a28:	e00e      	b.n	8000a48 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a2a:	687b      	ldr	r3, [r7, #4]
 8000a2c:	2b0f      	cmp	r3, #15
 8000a2e:	d80a      	bhi.n	8000a46 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a30:	2200      	movs	r2, #0
 8000a32:	6879      	ldr	r1, [r7, #4]
 8000a34:	f04f 30ff 	mov.w	r0, #4294967295
 8000a38:	f000 f8ed 	bl	8000c16 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000a3c:	4a06      	ldr	r2, [pc, #24]	; (8000a58 <HAL_InitTick+0x5c>)
 8000a3e:	687b      	ldr	r3, [r7, #4]
 8000a40:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000a42:	2300      	movs	r3, #0
 8000a44:	e000      	b.n	8000a48 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000a46:	2301      	movs	r3, #1
}
 8000a48:	4618      	mov	r0, r3
 8000a4a:	3708      	adds	r7, #8
 8000a4c:	46bd      	mov	sp, r7
 8000a4e:	bd80      	pop	{r7, pc}
 8000a50:	20000000 	.word	0x20000000
 8000a54:	20000008 	.word	0x20000008
 8000a58:	20000004 	.word	0x20000004

08000a5c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a5c:	b480      	push	{r7}
 8000a5e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000a60:	4b06      	ldr	r3, [pc, #24]	; (8000a7c <HAL_IncTick+0x20>)
 8000a62:	781b      	ldrb	r3, [r3, #0]
 8000a64:	461a      	mov	r2, r3
 8000a66:	4b06      	ldr	r3, [pc, #24]	; (8000a80 <HAL_IncTick+0x24>)
 8000a68:	681b      	ldr	r3, [r3, #0]
 8000a6a:	4413      	add	r3, r2
 8000a6c:	4a04      	ldr	r2, [pc, #16]	; (8000a80 <HAL_IncTick+0x24>)
 8000a6e:	6013      	str	r3, [r2, #0]
}
 8000a70:	bf00      	nop
 8000a72:	46bd      	mov	sp, r7
 8000a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a78:	4770      	bx	lr
 8000a7a:	bf00      	nop
 8000a7c:	20000008 	.word	0x20000008
 8000a80:	2000004c 	.word	0x2000004c

08000a84 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a84:	b480      	push	{r7}
 8000a86:	af00      	add	r7, sp, #0
  return uwTick;
 8000a88:	4b03      	ldr	r3, [pc, #12]	; (8000a98 <HAL_GetTick+0x14>)
 8000a8a:	681b      	ldr	r3, [r3, #0]
}
 8000a8c:	4618      	mov	r0, r3
 8000a8e:	46bd      	mov	sp, r7
 8000a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a94:	4770      	bx	lr
 8000a96:	bf00      	nop
 8000a98:	2000004c 	.word	0x2000004c

08000a9c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a9c:	b480      	push	{r7}
 8000a9e:	b085      	sub	sp, #20
 8000aa0:	af00      	add	r7, sp, #0
 8000aa2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000aa4:	687b      	ldr	r3, [r7, #4]
 8000aa6:	f003 0307 	and.w	r3, r3, #7
 8000aaa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000aac:	4b0c      	ldr	r3, [pc, #48]	; (8000ae0 <__NVIC_SetPriorityGrouping+0x44>)
 8000aae:	68db      	ldr	r3, [r3, #12]
 8000ab0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000ab2:	68ba      	ldr	r2, [r7, #8]
 8000ab4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000ab8:	4013      	ands	r3, r2
 8000aba:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000abc:	68fb      	ldr	r3, [r7, #12]
 8000abe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ac0:	68bb      	ldr	r3, [r7, #8]
 8000ac2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ac4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000ac8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000acc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000ace:	4a04      	ldr	r2, [pc, #16]	; (8000ae0 <__NVIC_SetPriorityGrouping+0x44>)
 8000ad0:	68bb      	ldr	r3, [r7, #8]
 8000ad2:	60d3      	str	r3, [r2, #12]
}
 8000ad4:	bf00      	nop
 8000ad6:	3714      	adds	r7, #20
 8000ad8:	46bd      	mov	sp, r7
 8000ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ade:	4770      	bx	lr
 8000ae0:	e000ed00 	.word	0xe000ed00

08000ae4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ae4:	b480      	push	{r7}
 8000ae6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ae8:	4b04      	ldr	r3, [pc, #16]	; (8000afc <__NVIC_GetPriorityGrouping+0x18>)
 8000aea:	68db      	ldr	r3, [r3, #12]
 8000aec:	0a1b      	lsrs	r3, r3, #8
 8000aee:	f003 0307 	and.w	r3, r3, #7
}
 8000af2:	4618      	mov	r0, r3
 8000af4:	46bd      	mov	sp, r7
 8000af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000afa:	4770      	bx	lr
 8000afc:	e000ed00 	.word	0xe000ed00

08000b00 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b00:	b480      	push	{r7}
 8000b02:	b083      	sub	sp, #12
 8000b04:	af00      	add	r7, sp, #0
 8000b06:	4603      	mov	r3, r0
 8000b08:	6039      	str	r1, [r7, #0]
 8000b0a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b0c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b10:	2b00      	cmp	r3, #0
 8000b12:	db0a      	blt.n	8000b2a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b14:	683b      	ldr	r3, [r7, #0]
 8000b16:	b2da      	uxtb	r2, r3
 8000b18:	490c      	ldr	r1, [pc, #48]	; (8000b4c <__NVIC_SetPriority+0x4c>)
 8000b1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b1e:	0112      	lsls	r2, r2, #4
 8000b20:	b2d2      	uxtb	r2, r2
 8000b22:	440b      	add	r3, r1
 8000b24:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000b28:	e00a      	b.n	8000b40 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b2a:	683b      	ldr	r3, [r7, #0]
 8000b2c:	b2da      	uxtb	r2, r3
 8000b2e:	4908      	ldr	r1, [pc, #32]	; (8000b50 <__NVIC_SetPriority+0x50>)
 8000b30:	79fb      	ldrb	r3, [r7, #7]
 8000b32:	f003 030f 	and.w	r3, r3, #15
 8000b36:	3b04      	subs	r3, #4
 8000b38:	0112      	lsls	r2, r2, #4
 8000b3a:	b2d2      	uxtb	r2, r2
 8000b3c:	440b      	add	r3, r1
 8000b3e:	761a      	strb	r2, [r3, #24]
}
 8000b40:	bf00      	nop
 8000b42:	370c      	adds	r7, #12
 8000b44:	46bd      	mov	sp, r7
 8000b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b4a:	4770      	bx	lr
 8000b4c:	e000e100 	.word	0xe000e100
 8000b50:	e000ed00 	.word	0xe000ed00

08000b54 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b54:	b480      	push	{r7}
 8000b56:	b089      	sub	sp, #36	; 0x24
 8000b58:	af00      	add	r7, sp, #0
 8000b5a:	60f8      	str	r0, [r7, #12]
 8000b5c:	60b9      	str	r1, [r7, #8]
 8000b5e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000b60:	68fb      	ldr	r3, [r7, #12]
 8000b62:	f003 0307 	and.w	r3, r3, #7
 8000b66:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000b68:	69fb      	ldr	r3, [r7, #28]
 8000b6a:	f1c3 0307 	rsb	r3, r3, #7
 8000b6e:	2b04      	cmp	r3, #4
 8000b70:	bf28      	it	cs
 8000b72:	2304      	movcs	r3, #4
 8000b74:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b76:	69fb      	ldr	r3, [r7, #28]
 8000b78:	3304      	adds	r3, #4
 8000b7a:	2b06      	cmp	r3, #6
 8000b7c:	d902      	bls.n	8000b84 <NVIC_EncodePriority+0x30>
 8000b7e:	69fb      	ldr	r3, [r7, #28]
 8000b80:	3b03      	subs	r3, #3
 8000b82:	e000      	b.n	8000b86 <NVIC_EncodePriority+0x32>
 8000b84:	2300      	movs	r3, #0
 8000b86:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b88:	f04f 32ff 	mov.w	r2, #4294967295
 8000b8c:	69bb      	ldr	r3, [r7, #24]
 8000b8e:	fa02 f303 	lsl.w	r3, r2, r3
 8000b92:	43da      	mvns	r2, r3
 8000b94:	68bb      	ldr	r3, [r7, #8]
 8000b96:	401a      	ands	r2, r3
 8000b98:	697b      	ldr	r3, [r7, #20]
 8000b9a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000b9c:	f04f 31ff 	mov.w	r1, #4294967295
 8000ba0:	697b      	ldr	r3, [r7, #20]
 8000ba2:	fa01 f303 	lsl.w	r3, r1, r3
 8000ba6:	43d9      	mvns	r1, r3
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000bac:	4313      	orrs	r3, r2
         );
}
 8000bae:	4618      	mov	r0, r3
 8000bb0:	3724      	adds	r7, #36	; 0x24
 8000bb2:	46bd      	mov	sp, r7
 8000bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb8:	4770      	bx	lr
	...

08000bbc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	b082      	sub	sp, #8
 8000bc0:	af00      	add	r7, sp, #0
 8000bc2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	3b01      	subs	r3, #1
 8000bc8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000bcc:	d301      	bcc.n	8000bd2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000bce:	2301      	movs	r3, #1
 8000bd0:	e00f      	b.n	8000bf2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000bd2:	4a0a      	ldr	r2, [pc, #40]	; (8000bfc <SysTick_Config+0x40>)
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	3b01      	subs	r3, #1
 8000bd8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000bda:	210f      	movs	r1, #15
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	f7ff ff8e 	bl	8000b00 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000be4:	4b05      	ldr	r3, [pc, #20]	; (8000bfc <SysTick_Config+0x40>)
 8000be6:	2200      	movs	r2, #0
 8000be8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000bea:	4b04      	ldr	r3, [pc, #16]	; (8000bfc <SysTick_Config+0x40>)
 8000bec:	2207      	movs	r2, #7
 8000bee:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000bf0:	2300      	movs	r3, #0
}
 8000bf2:	4618      	mov	r0, r3
 8000bf4:	3708      	adds	r7, #8
 8000bf6:	46bd      	mov	sp, r7
 8000bf8:	bd80      	pop	{r7, pc}
 8000bfa:	bf00      	nop
 8000bfc:	e000e010 	.word	0xe000e010

08000c00 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c00:	b580      	push	{r7, lr}
 8000c02:	b082      	sub	sp, #8
 8000c04:	af00      	add	r7, sp, #0
 8000c06:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000c08:	6878      	ldr	r0, [r7, #4]
 8000c0a:	f7ff ff47 	bl	8000a9c <__NVIC_SetPriorityGrouping>
}
 8000c0e:	bf00      	nop
 8000c10:	3708      	adds	r7, #8
 8000c12:	46bd      	mov	sp, r7
 8000c14:	bd80      	pop	{r7, pc}

08000c16 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000c16:	b580      	push	{r7, lr}
 8000c18:	b086      	sub	sp, #24
 8000c1a:	af00      	add	r7, sp, #0
 8000c1c:	4603      	mov	r3, r0
 8000c1e:	60b9      	str	r1, [r7, #8]
 8000c20:	607a      	str	r2, [r7, #4]
 8000c22:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000c24:	2300      	movs	r3, #0
 8000c26:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000c28:	f7ff ff5c 	bl	8000ae4 <__NVIC_GetPriorityGrouping>
 8000c2c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000c2e:	687a      	ldr	r2, [r7, #4]
 8000c30:	68b9      	ldr	r1, [r7, #8]
 8000c32:	6978      	ldr	r0, [r7, #20]
 8000c34:	f7ff ff8e 	bl	8000b54 <NVIC_EncodePriority>
 8000c38:	4602      	mov	r2, r0
 8000c3a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c3e:	4611      	mov	r1, r2
 8000c40:	4618      	mov	r0, r3
 8000c42:	f7ff ff5d 	bl	8000b00 <__NVIC_SetPriority>
}
 8000c46:	bf00      	nop
 8000c48:	3718      	adds	r7, #24
 8000c4a:	46bd      	mov	sp, r7
 8000c4c:	bd80      	pop	{r7, pc}

08000c4e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000c4e:	b580      	push	{r7, lr}
 8000c50:	b082      	sub	sp, #8
 8000c52:	af00      	add	r7, sp, #0
 8000c54:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000c56:	6878      	ldr	r0, [r7, #4]
 8000c58:	f7ff ffb0 	bl	8000bbc <SysTick_Config>
 8000c5c:	4603      	mov	r3, r0
}
 8000c5e:	4618      	mov	r0, r3
 8000c60:	3708      	adds	r7, #8
 8000c62:	46bd      	mov	sp, r7
 8000c64:	bd80      	pop	{r7, pc}
	...

08000c68 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000c68:	b480      	push	{r7}
 8000c6a:	b089      	sub	sp, #36	; 0x24
 8000c6c:	af00      	add	r7, sp, #0
 8000c6e:	6078      	str	r0, [r7, #4]
 8000c70:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000c72:	2300      	movs	r3, #0
 8000c74:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000c76:	2300      	movs	r3, #0
 8000c78:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000c7a:	2300      	movs	r3, #0
 8000c7c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000c7e:	2300      	movs	r3, #0
 8000c80:	61fb      	str	r3, [r7, #28]
 8000c82:	e177      	b.n	8000f74 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000c84:	2201      	movs	r2, #1
 8000c86:	69fb      	ldr	r3, [r7, #28]
 8000c88:	fa02 f303 	lsl.w	r3, r2, r3
 8000c8c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000c8e:	683b      	ldr	r3, [r7, #0]
 8000c90:	681b      	ldr	r3, [r3, #0]
 8000c92:	697a      	ldr	r2, [r7, #20]
 8000c94:	4013      	ands	r3, r2
 8000c96:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000c98:	693a      	ldr	r2, [r7, #16]
 8000c9a:	697b      	ldr	r3, [r7, #20]
 8000c9c:	429a      	cmp	r2, r3
 8000c9e:	f040 8166 	bne.w	8000f6e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000ca2:	683b      	ldr	r3, [r7, #0]
 8000ca4:	685b      	ldr	r3, [r3, #4]
 8000ca6:	f003 0303 	and.w	r3, r3, #3
 8000caa:	2b01      	cmp	r3, #1
 8000cac:	d005      	beq.n	8000cba <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000cae:	683b      	ldr	r3, [r7, #0]
 8000cb0:	685b      	ldr	r3, [r3, #4]
 8000cb2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000cb6:	2b02      	cmp	r3, #2
 8000cb8:	d130      	bne.n	8000d1c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	689b      	ldr	r3, [r3, #8]
 8000cbe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000cc0:	69fb      	ldr	r3, [r7, #28]
 8000cc2:	005b      	lsls	r3, r3, #1
 8000cc4:	2203      	movs	r2, #3
 8000cc6:	fa02 f303 	lsl.w	r3, r2, r3
 8000cca:	43db      	mvns	r3, r3
 8000ccc:	69ba      	ldr	r2, [r7, #24]
 8000cce:	4013      	ands	r3, r2
 8000cd0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000cd2:	683b      	ldr	r3, [r7, #0]
 8000cd4:	68da      	ldr	r2, [r3, #12]
 8000cd6:	69fb      	ldr	r3, [r7, #28]
 8000cd8:	005b      	lsls	r3, r3, #1
 8000cda:	fa02 f303 	lsl.w	r3, r2, r3
 8000cde:	69ba      	ldr	r2, [r7, #24]
 8000ce0:	4313      	orrs	r3, r2
 8000ce2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	69ba      	ldr	r2, [r7, #24]
 8000ce8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	685b      	ldr	r3, [r3, #4]
 8000cee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000cf0:	2201      	movs	r2, #1
 8000cf2:	69fb      	ldr	r3, [r7, #28]
 8000cf4:	fa02 f303 	lsl.w	r3, r2, r3
 8000cf8:	43db      	mvns	r3, r3
 8000cfa:	69ba      	ldr	r2, [r7, #24]
 8000cfc:	4013      	ands	r3, r2
 8000cfe:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000d00:	683b      	ldr	r3, [r7, #0]
 8000d02:	685b      	ldr	r3, [r3, #4]
 8000d04:	091b      	lsrs	r3, r3, #4
 8000d06:	f003 0201 	and.w	r2, r3, #1
 8000d0a:	69fb      	ldr	r3, [r7, #28]
 8000d0c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d10:	69ba      	ldr	r2, [r7, #24]
 8000d12:	4313      	orrs	r3, r2
 8000d14:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	69ba      	ldr	r2, [r7, #24]
 8000d1a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000d1c:	683b      	ldr	r3, [r7, #0]
 8000d1e:	685b      	ldr	r3, [r3, #4]
 8000d20:	f003 0303 	and.w	r3, r3, #3
 8000d24:	2b03      	cmp	r3, #3
 8000d26:	d017      	beq.n	8000d58 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	68db      	ldr	r3, [r3, #12]
 8000d2c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000d2e:	69fb      	ldr	r3, [r7, #28]
 8000d30:	005b      	lsls	r3, r3, #1
 8000d32:	2203      	movs	r2, #3
 8000d34:	fa02 f303 	lsl.w	r3, r2, r3
 8000d38:	43db      	mvns	r3, r3
 8000d3a:	69ba      	ldr	r2, [r7, #24]
 8000d3c:	4013      	ands	r3, r2
 8000d3e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000d40:	683b      	ldr	r3, [r7, #0]
 8000d42:	689a      	ldr	r2, [r3, #8]
 8000d44:	69fb      	ldr	r3, [r7, #28]
 8000d46:	005b      	lsls	r3, r3, #1
 8000d48:	fa02 f303 	lsl.w	r3, r2, r3
 8000d4c:	69ba      	ldr	r2, [r7, #24]
 8000d4e:	4313      	orrs	r3, r2
 8000d50:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	69ba      	ldr	r2, [r7, #24]
 8000d56:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000d58:	683b      	ldr	r3, [r7, #0]
 8000d5a:	685b      	ldr	r3, [r3, #4]
 8000d5c:	f003 0303 	and.w	r3, r3, #3
 8000d60:	2b02      	cmp	r3, #2
 8000d62:	d123      	bne.n	8000dac <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000d64:	69fb      	ldr	r3, [r7, #28]
 8000d66:	08da      	lsrs	r2, r3, #3
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	3208      	adds	r2, #8
 8000d6c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000d70:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000d72:	69fb      	ldr	r3, [r7, #28]
 8000d74:	f003 0307 	and.w	r3, r3, #7
 8000d78:	009b      	lsls	r3, r3, #2
 8000d7a:	220f      	movs	r2, #15
 8000d7c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d80:	43db      	mvns	r3, r3
 8000d82:	69ba      	ldr	r2, [r7, #24]
 8000d84:	4013      	ands	r3, r2
 8000d86:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000d88:	683b      	ldr	r3, [r7, #0]
 8000d8a:	691a      	ldr	r2, [r3, #16]
 8000d8c:	69fb      	ldr	r3, [r7, #28]
 8000d8e:	f003 0307 	and.w	r3, r3, #7
 8000d92:	009b      	lsls	r3, r3, #2
 8000d94:	fa02 f303 	lsl.w	r3, r2, r3
 8000d98:	69ba      	ldr	r2, [r7, #24]
 8000d9a:	4313      	orrs	r3, r2
 8000d9c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000d9e:	69fb      	ldr	r3, [r7, #28]
 8000da0:	08da      	lsrs	r2, r3, #3
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	3208      	adds	r2, #8
 8000da6:	69b9      	ldr	r1, [r7, #24]
 8000da8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	681b      	ldr	r3, [r3, #0]
 8000db0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000db2:	69fb      	ldr	r3, [r7, #28]
 8000db4:	005b      	lsls	r3, r3, #1
 8000db6:	2203      	movs	r2, #3
 8000db8:	fa02 f303 	lsl.w	r3, r2, r3
 8000dbc:	43db      	mvns	r3, r3
 8000dbe:	69ba      	ldr	r2, [r7, #24]
 8000dc0:	4013      	ands	r3, r2
 8000dc2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000dc4:	683b      	ldr	r3, [r7, #0]
 8000dc6:	685b      	ldr	r3, [r3, #4]
 8000dc8:	f003 0203 	and.w	r2, r3, #3
 8000dcc:	69fb      	ldr	r3, [r7, #28]
 8000dce:	005b      	lsls	r3, r3, #1
 8000dd0:	fa02 f303 	lsl.w	r3, r2, r3
 8000dd4:	69ba      	ldr	r2, [r7, #24]
 8000dd6:	4313      	orrs	r3, r2
 8000dd8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	69ba      	ldr	r2, [r7, #24]
 8000dde:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000de0:	683b      	ldr	r3, [r7, #0]
 8000de2:	685b      	ldr	r3, [r3, #4]
 8000de4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000de8:	2b00      	cmp	r3, #0
 8000dea:	f000 80c0 	beq.w	8000f6e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000dee:	2300      	movs	r3, #0
 8000df0:	60fb      	str	r3, [r7, #12]
 8000df2:	4b66      	ldr	r3, [pc, #408]	; (8000f8c <HAL_GPIO_Init+0x324>)
 8000df4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000df6:	4a65      	ldr	r2, [pc, #404]	; (8000f8c <HAL_GPIO_Init+0x324>)
 8000df8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000dfc:	6453      	str	r3, [r2, #68]	; 0x44
 8000dfe:	4b63      	ldr	r3, [pc, #396]	; (8000f8c <HAL_GPIO_Init+0x324>)
 8000e00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e02:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000e06:	60fb      	str	r3, [r7, #12]
 8000e08:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000e0a:	4a61      	ldr	r2, [pc, #388]	; (8000f90 <HAL_GPIO_Init+0x328>)
 8000e0c:	69fb      	ldr	r3, [r7, #28]
 8000e0e:	089b      	lsrs	r3, r3, #2
 8000e10:	3302      	adds	r3, #2
 8000e12:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e16:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000e18:	69fb      	ldr	r3, [r7, #28]
 8000e1a:	f003 0303 	and.w	r3, r3, #3
 8000e1e:	009b      	lsls	r3, r3, #2
 8000e20:	220f      	movs	r2, #15
 8000e22:	fa02 f303 	lsl.w	r3, r2, r3
 8000e26:	43db      	mvns	r3, r3
 8000e28:	69ba      	ldr	r2, [r7, #24]
 8000e2a:	4013      	ands	r3, r2
 8000e2c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	4a58      	ldr	r2, [pc, #352]	; (8000f94 <HAL_GPIO_Init+0x32c>)
 8000e32:	4293      	cmp	r3, r2
 8000e34:	d037      	beq.n	8000ea6 <HAL_GPIO_Init+0x23e>
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	4a57      	ldr	r2, [pc, #348]	; (8000f98 <HAL_GPIO_Init+0x330>)
 8000e3a:	4293      	cmp	r3, r2
 8000e3c:	d031      	beq.n	8000ea2 <HAL_GPIO_Init+0x23a>
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	4a56      	ldr	r2, [pc, #344]	; (8000f9c <HAL_GPIO_Init+0x334>)
 8000e42:	4293      	cmp	r3, r2
 8000e44:	d02b      	beq.n	8000e9e <HAL_GPIO_Init+0x236>
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	4a55      	ldr	r2, [pc, #340]	; (8000fa0 <HAL_GPIO_Init+0x338>)
 8000e4a:	4293      	cmp	r3, r2
 8000e4c:	d025      	beq.n	8000e9a <HAL_GPIO_Init+0x232>
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	4a54      	ldr	r2, [pc, #336]	; (8000fa4 <HAL_GPIO_Init+0x33c>)
 8000e52:	4293      	cmp	r3, r2
 8000e54:	d01f      	beq.n	8000e96 <HAL_GPIO_Init+0x22e>
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	4a53      	ldr	r2, [pc, #332]	; (8000fa8 <HAL_GPIO_Init+0x340>)
 8000e5a:	4293      	cmp	r3, r2
 8000e5c:	d019      	beq.n	8000e92 <HAL_GPIO_Init+0x22a>
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	4a52      	ldr	r2, [pc, #328]	; (8000fac <HAL_GPIO_Init+0x344>)
 8000e62:	4293      	cmp	r3, r2
 8000e64:	d013      	beq.n	8000e8e <HAL_GPIO_Init+0x226>
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	4a51      	ldr	r2, [pc, #324]	; (8000fb0 <HAL_GPIO_Init+0x348>)
 8000e6a:	4293      	cmp	r3, r2
 8000e6c:	d00d      	beq.n	8000e8a <HAL_GPIO_Init+0x222>
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	4a50      	ldr	r2, [pc, #320]	; (8000fb4 <HAL_GPIO_Init+0x34c>)
 8000e72:	4293      	cmp	r3, r2
 8000e74:	d007      	beq.n	8000e86 <HAL_GPIO_Init+0x21e>
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	4a4f      	ldr	r2, [pc, #316]	; (8000fb8 <HAL_GPIO_Init+0x350>)
 8000e7a:	4293      	cmp	r3, r2
 8000e7c:	d101      	bne.n	8000e82 <HAL_GPIO_Init+0x21a>
 8000e7e:	2309      	movs	r3, #9
 8000e80:	e012      	b.n	8000ea8 <HAL_GPIO_Init+0x240>
 8000e82:	230a      	movs	r3, #10
 8000e84:	e010      	b.n	8000ea8 <HAL_GPIO_Init+0x240>
 8000e86:	2308      	movs	r3, #8
 8000e88:	e00e      	b.n	8000ea8 <HAL_GPIO_Init+0x240>
 8000e8a:	2307      	movs	r3, #7
 8000e8c:	e00c      	b.n	8000ea8 <HAL_GPIO_Init+0x240>
 8000e8e:	2306      	movs	r3, #6
 8000e90:	e00a      	b.n	8000ea8 <HAL_GPIO_Init+0x240>
 8000e92:	2305      	movs	r3, #5
 8000e94:	e008      	b.n	8000ea8 <HAL_GPIO_Init+0x240>
 8000e96:	2304      	movs	r3, #4
 8000e98:	e006      	b.n	8000ea8 <HAL_GPIO_Init+0x240>
 8000e9a:	2303      	movs	r3, #3
 8000e9c:	e004      	b.n	8000ea8 <HAL_GPIO_Init+0x240>
 8000e9e:	2302      	movs	r3, #2
 8000ea0:	e002      	b.n	8000ea8 <HAL_GPIO_Init+0x240>
 8000ea2:	2301      	movs	r3, #1
 8000ea4:	e000      	b.n	8000ea8 <HAL_GPIO_Init+0x240>
 8000ea6:	2300      	movs	r3, #0
 8000ea8:	69fa      	ldr	r2, [r7, #28]
 8000eaa:	f002 0203 	and.w	r2, r2, #3
 8000eae:	0092      	lsls	r2, r2, #2
 8000eb0:	4093      	lsls	r3, r2
 8000eb2:	69ba      	ldr	r2, [r7, #24]
 8000eb4:	4313      	orrs	r3, r2
 8000eb6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000eb8:	4935      	ldr	r1, [pc, #212]	; (8000f90 <HAL_GPIO_Init+0x328>)
 8000eba:	69fb      	ldr	r3, [r7, #28]
 8000ebc:	089b      	lsrs	r3, r3, #2
 8000ebe:	3302      	adds	r3, #2
 8000ec0:	69ba      	ldr	r2, [r7, #24]
 8000ec2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000ec6:	4b3d      	ldr	r3, [pc, #244]	; (8000fbc <HAL_GPIO_Init+0x354>)
 8000ec8:	689b      	ldr	r3, [r3, #8]
 8000eca:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000ecc:	693b      	ldr	r3, [r7, #16]
 8000ece:	43db      	mvns	r3, r3
 8000ed0:	69ba      	ldr	r2, [r7, #24]
 8000ed2:	4013      	ands	r3, r2
 8000ed4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000ed6:	683b      	ldr	r3, [r7, #0]
 8000ed8:	685b      	ldr	r3, [r3, #4]
 8000eda:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000ede:	2b00      	cmp	r3, #0
 8000ee0:	d003      	beq.n	8000eea <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8000ee2:	69ba      	ldr	r2, [r7, #24]
 8000ee4:	693b      	ldr	r3, [r7, #16]
 8000ee6:	4313      	orrs	r3, r2
 8000ee8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000eea:	4a34      	ldr	r2, [pc, #208]	; (8000fbc <HAL_GPIO_Init+0x354>)
 8000eec:	69bb      	ldr	r3, [r7, #24]
 8000eee:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000ef0:	4b32      	ldr	r3, [pc, #200]	; (8000fbc <HAL_GPIO_Init+0x354>)
 8000ef2:	68db      	ldr	r3, [r3, #12]
 8000ef4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000ef6:	693b      	ldr	r3, [r7, #16]
 8000ef8:	43db      	mvns	r3, r3
 8000efa:	69ba      	ldr	r2, [r7, #24]
 8000efc:	4013      	ands	r3, r2
 8000efe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000f00:	683b      	ldr	r3, [r7, #0]
 8000f02:	685b      	ldr	r3, [r3, #4]
 8000f04:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000f08:	2b00      	cmp	r3, #0
 8000f0a:	d003      	beq.n	8000f14 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8000f0c:	69ba      	ldr	r2, [r7, #24]
 8000f0e:	693b      	ldr	r3, [r7, #16]
 8000f10:	4313      	orrs	r3, r2
 8000f12:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000f14:	4a29      	ldr	r2, [pc, #164]	; (8000fbc <HAL_GPIO_Init+0x354>)
 8000f16:	69bb      	ldr	r3, [r7, #24]
 8000f18:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000f1a:	4b28      	ldr	r3, [pc, #160]	; (8000fbc <HAL_GPIO_Init+0x354>)
 8000f1c:	685b      	ldr	r3, [r3, #4]
 8000f1e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f20:	693b      	ldr	r3, [r7, #16]
 8000f22:	43db      	mvns	r3, r3
 8000f24:	69ba      	ldr	r2, [r7, #24]
 8000f26:	4013      	ands	r3, r2
 8000f28:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000f2a:	683b      	ldr	r3, [r7, #0]
 8000f2c:	685b      	ldr	r3, [r3, #4]
 8000f2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	d003      	beq.n	8000f3e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8000f36:	69ba      	ldr	r2, [r7, #24]
 8000f38:	693b      	ldr	r3, [r7, #16]
 8000f3a:	4313      	orrs	r3, r2
 8000f3c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000f3e:	4a1f      	ldr	r2, [pc, #124]	; (8000fbc <HAL_GPIO_Init+0x354>)
 8000f40:	69bb      	ldr	r3, [r7, #24]
 8000f42:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000f44:	4b1d      	ldr	r3, [pc, #116]	; (8000fbc <HAL_GPIO_Init+0x354>)
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f4a:	693b      	ldr	r3, [r7, #16]
 8000f4c:	43db      	mvns	r3, r3
 8000f4e:	69ba      	ldr	r2, [r7, #24]
 8000f50:	4013      	ands	r3, r2
 8000f52:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000f54:	683b      	ldr	r3, [r7, #0]
 8000f56:	685b      	ldr	r3, [r3, #4]
 8000f58:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000f5c:	2b00      	cmp	r3, #0
 8000f5e:	d003      	beq.n	8000f68 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8000f60:	69ba      	ldr	r2, [r7, #24]
 8000f62:	693b      	ldr	r3, [r7, #16]
 8000f64:	4313      	orrs	r3, r2
 8000f66:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000f68:	4a14      	ldr	r2, [pc, #80]	; (8000fbc <HAL_GPIO_Init+0x354>)
 8000f6a:	69bb      	ldr	r3, [r7, #24]
 8000f6c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000f6e:	69fb      	ldr	r3, [r7, #28]
 8000f70:	3301      	adds	r3, #1
 8000f72:	61fb      	str	r3, [r7, #28]
 8000f74:	69fb      	ldr	r3, [r7, #28]
 8000f76:	2b0f      	cmp	r3, #15
 8000f78:	f67f ae84 	bls.w	8000c84 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000f7c:	bf00      	nop
 8000f7e:	bf00      	nop
 8000f80:	3724      	adds	r7, #36	; 0x24
 8000f82:	46bd      	mov	sp, r7
 8000f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f88:	4770      	bx	lr
 8000f8a:	bf00      	nop
 8000f8c:	40023800 	.word	0x40023800
 8000f90:	40013800 	.word	0x40013800
 8000f94:	40020000 	.word	0x40020000
 8000f98:	40020400 	.word	0x40020400
 8000f9c:	40020800 	.word	0x40020800
 8000fa0:	40020c00 	.word	0x40020c00
 8000fa4:	40021000 	.word	0x40021000
 8000fa8:	40021400 	.word	0x40021400
 8000fac:	40021800 	.word	0x40021800
 8000fb0:	40021c00 	.word	0x40021c00
 8000fb4:	40022000 	.word	0x40022000
 8000fb8:	40022400 	.word	0x40022400
 8000fbc:	40013c00 	.word	0x40013c00

08000fc0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000fc0:	b480      	push	{r7}
 8000fc2:	b083      	sub	sp, #12
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	6078      	str	r0, [r7, #4]
 8000fc8:	460b      	mov	r3, r1
 8000fca:	807b      	strh	r3, [r7, #2]
 8000fcc:	4613      	mov	r3, r2
 8000fce:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000fd0:	787b      	ldrb	r3, [r7, #1]
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	d003      	beq.n	8000fde <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000fd6:	887a      	ldrh	r2, [r7, #2]
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8000fdc:	e003      	b.n	8000fe6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000fde:	887b      	ldrh	r3, [r7, #2]
 8000fe0:	041a      	lsls	r2, r3, #16
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	619a      	str	r2, [r3, #24]
}
 8000fe6:	bf00      	nop
 8000fe8:	370c      	adds	r7, #12
 8000fea:	46bd      	mov	sp, r7
 8000fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff0:	4770      	bx	lr

08000ff2 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000ff2:	b480      	push	{r7}
 8000ff4:	b085      	sub	sp, #20
 8000ff6:	af00      	add	r7, sp, #0
 8000ff8:	6078      	str	r0, [r7, #4]
 8000ffa:	460b      	mov	r3, r1
 8000ffc:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	695b      	ldr	r3, [r3, #20]
 8001002:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001004:	887a      	ldrh	r2, [r7, #2]
 8001006:	68fb      	ldr	r3, [r7, #12]
 8001008:	4013      	ands	r3, r2
 800100a:	041a      	lsls	r2, r3, #16
 800100c:	68fb      	ldr	r3, [r7, #12]
 800100e:	43d9      	mvns	r1, r3
 8001010:	887b      	ldrh	r3, [r7, #2]
 8001012:	400b      	ands	r3, r1
 8001014:	431a      	orrs	r2, r3
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	619a      	str	r2, [r3, #24]
}
 800101a:	bf00      	nop
 800101c:	3714      	adds	r7, #20
 800101e:	46bd      	mov	sp, r7
 8001020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001024:	4770      	bx	lr
	...

08001028 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8001028:	b580      	push	{r7, lr}
 800102a:	b082      	sub	sp, #8
 800102c:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 800102e:	2300      	movs	r3, #0
 8001030:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8001032:	2300      	movs	r3, #0
 8001034:	603b      	str	r3, [r7, #0]
 8001036:	4b20      	ldr	r3, [pc, #128]	; (80010b8 <HAL_PWREx_EnableOverDrive+0x90>)
 8001038:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800103a:	4a1f      	ldr	r2, [pc, #124]	; (80010b8 <HAL_PWREx_EnableOverDrive+0x90>)
 800103c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001040:	6413      	str	r3, [r2, #64]	; 0x40
 8001042:	4b1d      	ldr	r3, [pc, #116]	; (80010b8 <HAL_PWREx_EnableOverDrive+0x90>)
 8001044:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001046:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800104a:	603b      	str	r3, [r7, #0]
 800104c:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800104e:	4b1b      	ldr	r3, [pc, #108]	; (80010bc <HAL_PWREx_EnableOverDrive+0x94>)
 8001050:	2201      	movs	r2, #1
 8001052:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001054:	f7ff fd16 	bl	8000a84 <HAL_GetTick>
 8001058:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800105a:	e009      	b.n	8001070 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800105c:	f7ff fd12 	bl	8000a84 <HAL_GetTick>
 8001060:	4602      	mov	r2, r0
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	1ad3      	subs	r3, r2, r3
 8001066:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800106a:	d901      	bls.n	8001070 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 800106c:	2303      	movs	r3, #3
 800106e:	e01f      	b.n	80010b0 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001070:	4b13      	ldr	r3, [pc, #76]	; (80010c0 <HAL_PWREx_EnableOverDrive+0x98>)
 8001072:	685b      	ldr	r3, [r3, #4]
 8001074:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001078:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800107c:	d1ee      	bne.n	800105c <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800107e:	4b11      	ldr	r3, [pc, #68]	; (80010c4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001080:	2201      	movs	r2, #1
 8001082:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001084:	f7ff fcfe 	bl	8000a84 <HAL_GetTick>
 8001088:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800108a:	e009      	b.n	80010a0 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800108c:	f7ff fcfa 	bl	8000a84 <HAL_GetTick>
 8001090:	4602      	mov	r2, r0
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	1ad3      	subs	r3, r2, r3
 8001096:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800109a:	d901      	bls.n	80010a0 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 800109c:	2303      	movs	r3, #3
 800109e:	e007      	b.n	80010b0 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80010a0:	4b07      	ldr	r3, [pc, #28]	; (80010c0 <HAL_PWREx_EnableOverDrive+0x98>)
 80010a2:	685b      	ldr	r3, [r3, #4]
 80010a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010a8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80010ac:	d1ee      	bne.n	800108c <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 80010ae:	2300      	movs	r3, #0
}
 80010b0:	4618      	mov	r0, r3
 80010b2:	3708      	adds	r7, #8
 80010b4:	46bd      	mov	sp, r7
 80010b6:	bd80      	pop	{r7, pc}
 80010b8:	40023800 	.word	0x40023800
 80010bc:	420e0040 	.word	0x420e0040
 80010c0:	40007000 	.word	0x40007000
 80010c4:	420e0044 	.word	0x420e0044

080010c8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80010c8:	b580      	push	{r7, lr}
 80010ca:	b086      	sub	sp, #24
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d101      	bne.n	80010da <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80010d6:	2301      	movs	r3, #1
 80010d8:	e267      	b.n	80015aa <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	f003 0301 	and.w	r3, r3, #1
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d075      	beq.n	80011d2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80010e6:	4b88      	ldr	r3, [pc, #544]	; (8001308 <HAL_RCC_OscConfig+0x240>)
 80010e8:	689b      	ldr	r3, [r3, #8]
 80010ea:	f003 030c 	and.w	r3, r3, #12
 80010ee:	2b04      	cmp	r3, #4
 80010f0:	d00c      	beq.n	800110c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80010f2:	4b85      	ldr	r3, [pc, #532]	; (8001308 <HAL_RCC_OscConfig+0x240>)
 80010f4:	689b      	ldr	r3, [r3, #8]
 80010f6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80010fa:	2b08      	cmp	r3, #8
 80010fc:	d112      	bne.n	8001124 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80010fe:	4b82      	ldr	r3, [pc, #520]	; (8001308 <HAL_RCC_OscConfig+0x240>)
 8001100:	685b      	ldr	r3, [r3, #4]
 8001102:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001106:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800110a:	d10b      	bne.n	8001124 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800110c:	4b7e      	ldr	r3, [pc, #504]	; (8001308 <HAL_RCC_OscConfig+0x240>)
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001114:	2b00      	cmp	r3, #0
 8001116:	d05b      	beq.n	80011d0 <HAL_RCC_OscConfig+0x108>
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	685b      	ldr	r3, [r3, #4]
 800111c:	2b00      	cmp	r3, #0
 800111e:	d157      	bne.n	80011d0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001120:	2301      	movs	r3, #1
 8001122:	e242      	b.n	80015aa <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	685b      	ldr	r3, [r3, #4]
 8001128:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800112c:	d106      	bne.n	800113c <HAL_RCC_OscConfig+0x74>
 800112e:	4b76      	ldr	r3, [pc, #472]	; (8001308 <HAL_RCC_OscConfig+0x240>)
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	4a75      	ldr	r2, [pc, #468]	; (8001308 <HAL_RCC_OscConfig+0x240>)
 8001134:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001138:	6013      	str	r3, [r2, #0]
 800113a:	e01d      	b.n	8001178 <HAL_RCC_OscConfig+0xb0>
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	685b      	ldr	r3, [r3, #4]
 8001140:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001144:	d10c      	bne.n	8001160 <HAL_RCC_OscConfig+0x98>
 8001146:	4b70      	ldr	r3, [pc, #448]	; (8001308 <HAL_RCC_OscConfig+0x240>)
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	4a6f      	ldr	r2, [pc, #444]	; (8001308 <HAL_RCC_OscConfig+0x240>)
 800114c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001150:	6013      	str	r3, [r2, #0]
 8001152:	4b6d      	ldr	r3, [pc, #436]	; (8001308 <HAL_RCC_OscConfig+0x240>)
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	4a6c      	ldr	r2, [pc, #432]	; (8001308 <HAL_RCC_OscConfig+0x240>)
 8001158:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800115c:	6013      	str	r3, [r2, #0]
 800115e:	e00b      	b.n	8001178 <HAL_RCC_OscConfig+0xb0>
 8001160:	4b69      	ldr	r3, [pc, #420]	; (8001308 <HAL_RCC_OscConfig+0x240>)
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	4a68      	ldr	r2, [pc, #416]	; (8001308 <HAL_RCC_OscConfig+0x240>)
 8001166:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800116a:	6013      	str	r3, [r2, #0]
 800116c:	4b66      	ldr	r3, [pc, #408]	; (8001308 <HAL_RCC_OscConfig+0x240>)
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	4a65      	ldr	r2, [pc, #404]	; (8001308 <HAL_RCC_OscConfig+0x240>)
 8001172:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001176:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	685b      	ldr	r3, [r3, #4]
 800117c:	2b00      	cmp	r3, #0
 800117e:	d013      	beq.n	80011a8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001180:	f7ff fc80 	bl	8000a84 <HAL_GetTick>
 8001184:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001186:	e008      	b.n	800119a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001188:	f7ff fc7c 	bl	8000a84 <HAL_GetTick>
 800118c:	4602      	mov	r2, r0
 800118e:	693b      	ldr	r3, [r7, #16]
 8001190:	1ad3      	subs	r3, r2, r3
 8001192:	2b64      	cmp	r3, #100	; 0x64
 8001194:	d901      	bls.n	800119a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001196:	2303      	movs	r3, #3
 8001198:	e207      	b.n	80015aa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800119a:	4b5b      	ldr	r3, [pc, #364]	; (8001308 <HAL_RCC_OscConfig+0x240>)
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d0f0      	beq.n	8001188 <HAL_RCC_OscConfig+0xc0>
 80011a6:	e014      	b.n	80011d2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011a8:	f7ff fc6c 	bl	8000a84 <HAL_GetTick>
 80011ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80011ae:	e008      	b.n	80011c2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80011b0:	f7ff fc68 	bl	8000a84 <HAL_GetTick>
 80011b4:	4602      	mov	r2, r0
 80011b6:	693b      	ldr	r3, [r7, #16]
 80011b8:	1ad3      	subs	r3, r2, r3
 80011ba:	2b64      	cmp	r3, #100	; 0x64
 80011bc:	d901      	bls.n	80011c2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80011be:	2303      	movs	r3, #3
 80011c0:	e1f3      	b.n	80015aa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80011c2:	4b51      	ldr	r3, [pc, #324]	; (8001308 <HAL_RCC_OscConfig+0x240>)
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d1f0      	bne.n	80011b0 <HAL_RCC_OscConfig+0xe8>
 80011ce:	e000      	b.n	80011d2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80011d0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	f003 0302 	and.w	r3, r3, #2
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d063      	beq.n	80012a6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80011de:	4b4a      	ldr	r3, [pc, #296]	; (8001308 <HAL_RCC_OscConfig+0x240>)
 80011e0:	689b      	ldr	r3, [r3, #8]
 80011e2:	f003 030c 	and.w	r3, r3, #12
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d00b      	beq.n	8001202 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80011ea:	4b47      	ldr	r3, [pc, #284]	; (8001308 <HAL_RCC_OscConfig+0x240>)
 80011ec:	689b      	ldr	r3, [r3, #8]
 80011ee:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80011f2:	2b08      	cmp	r3, #8
 80011f4:	d11c      	bne.n	8001230 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80011f6:	4b44      	ldr	r3, [pc, #272]	; (8001308 <HAL_RCC_OscConfig+0x240>)
 80011f8:	685b      	ldr	r3, [r3, #4]
 80011fa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d116      	bne.n	8001230 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001202:	4b41      	ldr	r3, [pc, #260]	; (8001308 <HAL_RCC_OscConfig+0x240>)
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	f003 0302 	and.w	r3, r3, #2
 800120a:	2b00      	cmp	r3, #0
 800120c:	d005      	beq.n	800121a <HAL_RCC_OscConfig+0x152>
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	68db      	ldr	r3, [r3, #12]
 8001212:	2b01      	cmp	r3, #1
 8001214:	d001      	beq.n	800121a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001216:	2301      	movs	r3, #1
 8001218:	e1c7      	b.n	80015aa <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800121a:	4b3b      	ldr	r3, [pc, #236]	; (8001308 <HAL_RCC_OscConfig+0x240>)
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	691b      	ldr	r3, [r3, #16]
 8001226:	00db      	lsls	r3, r3, #3
 8001228:	4937      	ldr	r1, [pc, #220]	; (8001308 <HAL_RCC_OscConfig+0x240>)
 800122a:	4313      	orrs	r3, r2
 800122c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800122e:	e03a      	b.n	80012a6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	68db      	ldr	r3, [r3, #12]
 8001234:	2b00      	cmp	r3, #0
 8001236:	d020      	beq.n	800127a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001238:	4b34      	ldr	r3, [pc, #208]	; (800130c <HAL_RCC_OscConfig+0x244>)
 800123a:	2201      	movs	r2, #1
 800123c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800123e:	f7ff fc21 	bl	8000a84 <HAL_GetTick>
 8001242:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001244:	e008      	b.n	8001258 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001246:	f7ff fc1d 	bl	8000a84 <HAL_GetTick>
 800124a:	4602      	mov	r2, r0
 800124c:	693b      	ldr	r3, [r7, #16]
 800124e:	1ad3      	subs	r3, r2, r3
 8001250:	2b02      	cmp	r3, #2
 8001252:	d901      	bls.n	8001258 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001254:	2303      	movs	r3, #3
 8001256:	e1a8      	b.n	80015aa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001258:	4b2b      	ldr	r3, [pc, #172]	; (8001308 <HAL_RCC_OscConfig+0x240>)
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	f003 0302 	and.w	r3, r3, #2
 8001260:	2b00      	cmp	r3, #0
 8001262:	d0f0      	beq.n	8001246 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001264:	4b28      	ldr	r3, [pc, #160]	; (8001308 <HAL_RCC_OscConfig+0x240>)
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	691b      	ldr	r3, [r3, #16]
 8001270:	00db      	lsls	r3, r3, #3
 8001272:	4925      	ldr	r1, [pc, #148]	; (8001308 <HAL_RCC_OscConfig+0x240>)
 8001274:	4313      	orrs	r3, r2
 8001276:	600b      	str	r3, [r1, #0]
 8001278:	e015      	b.n	80012a6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800127a:	4b24      	ldr	r3, [pc, #144]	; (800130c <HAL_RCC_OscConfig+0x244>)
 800127c:	2200      	movs	r2, #0
 800127e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001280:	f7ff fc00 	bl	8000a84 <HAL_GetTick>
 8001284:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001286:	e008      	b.n	800129a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001288:	f7ff fbfc 	bl	8000a84 <HAL_GetTick>
 800128c:	4602      	mov	r2, r0
 800128e:	693b      	ldr	r3, [r7, #16]
 8001290:	1ad3      	subs	r3, r2, r3
 8001292:	2b02      	cmp	r3, #2
 8001294:	d901      	bls.n	800129a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001296:	2303      	movs	r3, #3
 8001298:	e187      	b.n	80015aa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800129a:	4b1b      	ldr	r3, [pc, #108]	; (8001308 <HAL_RCC_OscConfig+0x240>)
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	f003 0302 	and.w	r3, r3, #2
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d1f0      	bne.n	8001288 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	f003 0308 	and.w	r3, r3, #8
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d036      	beq.n	8001320 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	695b      	ldr	r3, [r3, #20]
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d016      	beq.n	80012e8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80012ba:	4b15      	ldr	r3, [pc, #84]	; (8001310 <HAL_RCC_OscConfig+0x248>)
 80012bc:	2201      	movs	r2, #1
 80012be:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80012c0:	f7ff fbe0 	bl	8000a84 <HAL_GetTick>
 80012c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80012c6:	e008      	b.n	80012da <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80012c8:	f7ff fbdc 	bl	8000a84 <HAL_GetTick>
 80012cc:	4602      	mov	r2, r0
 80012ce:	693b      	ldr	r3, [r7, #16]
 80012d0:	1ad3      	subs	r3, r2, r3
 80012d2:	2b02      	cmp	r3, #2
 80012d4:	d901      	bls.n	80012da <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80012d6:	2303      	movs	r3, #3
 80012d8:	e167      	b.n	80015aa <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80012da:	4b0b      	ldr	r3, [pc, #44]	; (8001308 <HAL_RCC_OscConfig+0x240>)
 80012dc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80012de:	f003 0302 	and.w	r3, r3, #2
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d0f0      	beq.n	80012c8 <HAL_RCC_OscConfig+0x200>
 80012e6:	e01b      	b.n	8001320 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80012e8:	4b09      	ldr	r3, [pc, #36]	; (8001310 <HAL_RCC_OscConfig+0x248>)
 80012ea:	2200      	movs	r2, #0
 80012ec:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80012ee:	f7ff fbc9 	bl	8000a84 <HAL_GetTick>
 80012f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80012f4:	e00e      	b.n	8001314 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80012f6:	f7ff fbc5 	bl	8000a84 <HAL_GetTick>
 80012fa:	4602      	mov	r2, r0
 80012fc:	693b      	ldr	r3, [r7, #16]
 80012fe:	1ad3      	subs	r3, r2, r3
 8001300:	2b02      	cmp	r3, #2
 8001302:	d907      	bls.n	8001314 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001304:	2303      	movs	r3, #3
 8001306:	e150      	b.n	80015aa <HAL_RCC_OscConfig+0x4e2>
 8001308:	40023800 	.word	0x40023800
 800130c:	42470000 	.word	0x42470000
 8001310:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001314:	4b88      	ldr	r3, [pc, #544]	; (8001538 <HAL_RCC_OscConfig+0x470>)
 8001316:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001318:	f003 0302 	and.w	r3, r3, #2
 800131c:	2b00      	cmp	r3, #0
 800131e:	d1ea      	bne.n	80012f6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	f003 0304 	and.w	r3, r3, #4
 8001328:	2b00      	cmp	r3, #0
 800132a:	f000 8097 	beq.w	800145c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800132e:	2300      	movs	r3, #0
 8001330:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001332:	4b81      	ldr	r3, [pc, #516]	; (8001538 <HAL_RCC_OscConfig+0x470>)
 8001334:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001336:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800133a:	2b00      	cmp	r3, #0
 800133c:	d10f      	bne.n	800135e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800133e:	2300      	movs	r3, #0
 8001340:	60bb      	str	r3, [r7, #8]
 8001342:	4b7d      	ldr	r3, [pc, #500]	; (8001538 <HAL_RCC_OscConfig+0x470>)
 8001344:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001346:	4a7c      	ldr	r2, [pc, #496]	; (8001538 <HAL_RCC_OscConfig+0x470>)
 8001348:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800134c:	6413      	str	r3, [r2, #64]	; 0x40
 800134e:	4b7a      	ldr	r3, [pc, #488]	; (8001538 <HAL_RCC_OscConfig+0x470>)
 8001350:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001352:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001356:	60bb      	str	r3, [r7, #8]
 8001358:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800135a:	2301      	movs	r3, #1
 800135c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800135e:	4b77      	ldr	r3, [pc, #476]	; (800153c <HAL_RCC_OscConfig+0x474>)
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001366:	2b00      	cmp	r3, #0
 8001368:	d118      	bne.n	800139c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800136a:	4b74      	ldr	r3, [pc, #464]	; (800153c <HAL_RCC_OscConfig+0x474>)
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	4a73      	ldr	r2, [pc, #460]	; (800153c <HAL_RCC_OscConfig+0x474>)
 8001370:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001374:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001376:	f7ff fb85 	bl	8000a84 <HAL_GetTick>
 800137a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800137c:	e008      	b.n	8001390 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800137e:	f7ff fb81 	bl	8000a84 <HAL_GetTick>
 8001382:	4602      	mov	r2, r0
 8001384:	693b      	ldr	r3, [r7, #16]
 8001386:	1ad3      	subs	r3, r2, r3
 8001388:	2b02      	cmp	r3, #2
 800138a:	d901      	bls.n	8001390 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800138c:	2303      	movs	r3, #3
 800138e:	e10c      	b.n	80015aa <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001390:	4b6a      	ldr	r3, [pc, #424]	; (800153c <HAL_RCC_OscConfig+0x474>)
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001398:	2b00      	cmp	r3, #0
 800139a:	d0f0      	beq.n	800137e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	689b      	ldr	r3, [r3, #8]
 80013a0:	2b01      	cmp	r3, #1
 80013a2:	d106      	bne.n	80013b2 <HAL_RCC_OscConfig+0x2ea>
 80013a4:	4b64      	ldr	r3, [pc, #400]	; (8001538 <HAL_RCC_OscConfig+0x470>)
 80013a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80013a8:	4a63      	ldr	r2, [pc, #396]	; (8001538 <HAL_RCC_OscConfig+0x470>)
 80013aa:	f043 0301 	orr.w	r3, r3, #1
 80013ae:	6713      	str	r3, [r2, #112]	; 0x70
 80013b0:	e01c      	b.n	80013ec <HAL_RCC_OscConfig+0x324>
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	689b      	ldr	r3, [r3, #8]
 80013b6:	2b05      	cmp	r3, #5
 80013b8:	d10c      	bne.n	80013d4 <HAL_RCC_OscConfig+0x30c>
 80013ba:	4b5f      	ldr	r3, [pc, #380]	; (8001538 <HAL_RCC_OscConfig+0x470>)
 80013bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80013be:	4a5e      	ldr	r2, [pc, #376]	; (8001538 <HAL_RCC_OscConfig+0x470>)
 80013c0:	f043 0304 	orr.w	r3, r3, #4
 80013c4:	6713      	str	r3, [r2, #112]	; 0x70
 80013c6:	4b5c      	ldr	r3, [pc, #368]	; (8001538 <HAL_RCC_OscConfig+0x470>)
 80013c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80013ca:	4a5b      	ldr	r2, [pc, #364]	; (8001538 <HAL_RCC_OscConfig+0x470>)
 80013cc:	f043 0301 	orr.w	r3, r3, #1
 80013d0:	6713      	str	r3, [r2, #112]	; 0x70
 80013d2:	e00b      	b.n	80013ec <HAL_RCC_OscConfig+0x324>
 80013d4:	4b58      	ldr	r3, [pc, #352]	; (8001538 <HAL_RCC_OscConfig+0x470>)
 80013d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80013d8:	4a57      	ldr	r2, [pc, #348]	; (8001538 <HAL_RCC_OscConfig+0x470>)
 80013da:	f023 0301 	bic.w	r3, r3, #1
 80013de:	6713      	str	r3, [r2, #112]	; 0x70
 80013e0:	4b55      	ldr	r3, [pc, #340]	; (8001538 <HAL_RCC_OscConfig+0x470>)
 80013e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80013e4:	4a54      	ldr	r2, [pc, #336]	; (8001538 <HAL_RCC_OscConfig+0x470>)
 80013e6:	f023 0304 	bic.w	r3, r3, #4
 80013ea:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	689b      	ldr	r3, [r3, #8]
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d015      	beq.n	8001420 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80013f4:	f7ff fb46 	bl	8000a84 <HAL_GetTick>
 80013f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80013fa:	e00a      	b.n	8001412 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80013fc:	f7ff fb42 	bl	8000a84 <HAL_GetTick>
 8001400:	4602      	mov	r2, r0
 8001402:	693b      	ldr	r3, [r7, #16]
 8001404:	1ad3      	subs	r3, r2, r3
 8001406:	f241 3288 	movw	r2, #5000	; 0x1388
 800140a:	4293      	cmp	r3, r2
 800140c:	d901      	bls.n	8001412 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800140e:	2303      	movs	r3, #3
 8001410:	e0cb      	b.n	80015aa <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001412:	4b49      	ldr	r3, [pc, #292]	; (8001538 <HAL_RCC_OscConfig+0x470>)
 8001414:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001416:	f003 0302 	and.w	r3, r3, #2
 800141a:	2b00      	cmp	r3, #0
 800141c:	d0ee      	beq.n	80013fc <HAL_RCC_OscConfig+0x334>
 800141e:	e014      	b.n	800144a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001420:	f7ff fb30 	bl	8000a84 <HAL_GetTick>
 8001424:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001426:	e00a      	b.n	800143e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001428:	f7ff fb2c 	bl	8000a84 <HAL_GetTick>
 800142c:	4602      	mov	r2, r0
 800142e:	693b      	ldr	r3, [r7, #16]
 8001430:	1ad3      	subs	r3, r2, r3
 8001432:	f241 3288 	movw	r2, #5000	; 0x1388
 8001436:	4293      	cmp	r3, r2
 8001438:	d901      	bls.n	800143e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800143a:	2303      	movs	r3, #3
 800143c:	e0b5      	b.n	80015aa <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800143e:	4b3e      	ldr	r3, [pc, #248]	; (8001538 <HAL_RCC_OscConfig+0x470>)
 8001440:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001442:	f003 0302 	and.w	r3, r3, #2
 8001446:	2b00      	cmp	r3, #0
 8001448:	d1ee      	bne.n	8001428 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800144a:	7dfb      	ldrb	r3, [r7, #23]
 800144c:	2b01      	cmp	r3, #1
 800144e:	d105      	bne.n	800145c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001450:	4b39      	ldr	r3, [pc, #228]	; (8001538 <HAL_RCC_OscConfig+0x470>)
 8001452:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001454:	4a38      	ldr	r2, [pc, #224]	; (8001538 <HAL_RCC_OscConfig+0x470>)
 8001456:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800145a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	699b      	ldr	r3, [r3, #24]
 8001460:	2b00      	cmp	r3, #0
 8001462:	f000 80a1 	beq.w	80015a8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001466:	4b34      	ldr	r3, [pc, #208]	; (8001538 <HAL_RCC_OscConfig+0x470>)
 8001468:	689b      	ldr	r3, [r3, #8]
 800146a:	f003 030c 	and.w	r3, r3, #12
 800146e:	2b08      	cmp	r3, #8
 8001470:	d05c      	beq.n	800152c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	699b      	ldr	r3, [r3, #24]
 8001476:	2b02      	cmp	r3, #2
 8001478:	d141      	bne.n	80014fe <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800147a:	4b31      	ldr	r3, [pc, #196]	; (8001540 <HAL_RCC_OscConfig+0x478>)
 800147c:	2200      	movs	r2, #0
 800147e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001480:	f7ff fb00 	bl	8000a84 <HAL_GetTick>
 8001484:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001486:	e008      	b.n	800149a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001488:	f7ff fafc 	bl	8000a84 <HAL_GetTick>
 800148c:	4602      	mov	r2, r0
 800148e:	693b      	ldr	r3, [r7, #16]
 8001490:	1ad3      	subs	r3, r2, r3
 8001492:	2b02      	cmp	r3, #2
 8001494:	d901      	bls.n	800149a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001496:	2303      	movs	r3, #3
 8001498:	e087      	b.n	80015aa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800149a:	4b27      	ldr	r3, [pc, #156]	; (8001538 <HAL_RCC_OscConfig+0x470>)
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d1f0      	bne.n	8001488 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	69da      	ldr	r2, [r3, #28]
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	6a1b      	ldr	r3, [r3, #32]
 80014ae:	431a      	orrs	r2, r3
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014b4:	019b      	lsls	r3, r3, #6
 80014b6:	431a      	orrs	r2, r3
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014bc:	085b      	lsrs	r3, r3, #1
 80014be:	3b01      	subs	r3, #1
 80014c0:	041b      	lsls	r3, r3, #16
 80014c2:	431a      	orrs	r2, r3
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014c8:	061b      	lsls	r3, r3, #24
 80014ca:	491b      	ldr	r1, [pc, #108]	; (8001538 <HAL_RCC_OscConfig+0x470>)
 80014cc:	4313      	orrs	r3, r2
 80014ce:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80014d0:	4b1b      	ldr	r3, [pc, #108]	; (8001540 <HAL_RCC_OscConfig+0x478>)
 80014d2:	2201      	movs	r2, #1
 80014d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014d6:	f7ff fad5 	bl	8000a84 <HAL_GetTick>
 80014da:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80014dc:	e008      	b.n	80014f0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80014de:	f7ff fad1 	bl	8000a84 <HAL_GetTick>
 80014e2:	4602      	mov	r2, r0
 80014e4:	693b      	ldr	r3, [r7, #16]
 80014e6:	1ad3      	subs	r3, r2, r3
 80014e8:	2b02      	cmp	r3, #2
 80014ea:	d901      	bls.n	80014f0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80014ec:	2303      	movs	r3, #3
 80014ee:	e05c      	b.n	80015aa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80014f0:	4b11      	ldr	r3, [pc, #68]	; (8001538 <HAL_RCC_OscConfig+0x470>)
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d0f0      	beq.n	80014de <HAL_RCC_OscConfig+0x416>
 80014fc:	e054      	b.n	80015a8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80014fe:	4b10      	ldr	r3, [pc, #64]	; (8001540 <HAL_RCC_OscConfig+0x478>)
 8001500:	2200      	movs	r2, #0
 8001502:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001504:	f7ff fabe 	bl	8000a84 <HAL_GetTick>
 8001508:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800150a:	e008      	b.n	800151e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800150c:	f7ff faba 	bl	8000a84 <HAL_GetTick>
 8001510:	4602      	mov	r2, r0
 8001512:	693b      	ldr	r3, [r7, #16]
 8001514:	1ad3      	subs	r3, r2, r3
 8001516:	2b02      	cmp	r3, #2
 8001518:	d901      	bls.n	800151e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800151a:	2303      	movs	r3, #3
 800151c:	e045      	b.n	80015aa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800151e:	4b06      	ldr	r3, [pc, #24]	; (8001538 <HAL_RCC_OscConfig+0x470>)
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001526:	2b00      	cmp	r3, #0
 8001528:	d1f0      	bne.n	800150c <HAL_RCC_OscConfig+0x444>
 800152a:	e03d      	b.n	80015a8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	699b      	ldr	r3, [r3, #24]
 8001530:	2b01      	cmp	r3, #1
 8001532:	d107      	bne.n	8001544 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001534:	2301      	movs	r3, #1
 8001536:	e038      	b.n	80015aa <HAL_RCC_OscConfig+0x4e2>
 8001538:	40023800 	.word	0x40023800
 800153c:	40007000 	.word	0x40007000
 8001540:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001544:	4b1b      	ldr	r3, [pc, #108]	; (80015b4 <HAL_RCC_OscConfig+0x4ec>)
 8001546:	685b      	ldr	r3, [r3, #4]
 8001548:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	699b      	ldr	r3, [r3, #24]
 800154e:	2b01      	cmp	r3, #1
 8001550:	d028      	beq.n	80015a4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001552:	68fb      	ldr	r3, [r7, #12]
 8001554:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800155c:	429a      	cmp	r2, r3
 800155e:	d121      	bne.n	80015a4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001560:	68fb      	ldr	r3, [r7, #12]
 8001562:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800156a:	429a      	cmp	r2, r3
 800156c:	d11a      	bne.n	80015a4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800156e:	68fa      	ldr	r2, [r7, #12]
 8001570:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001574:	4013      	ands	r3, r2
 8001576:	687a      	ldr	r2, [r7, #4]
 8001578:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800157a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800157c:	4293      	cmp	r3, r2
 800157e:	d111      	bne.n	80015a4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001580:	68fb      	ldr	r3, [r7, #12]
 8001582:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800158a:	085b      	lsrs	r3, r3, #1
 800158c:	3b01      	subs	r3, #1
 800158e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001590:	429a      	cmp	r2, r3
 8001592:	d107      	bne.n	80015a4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001594:	68fb      	ldr	r3, [r7, #12]
 8001596:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800159e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80015a0:	429a      	cmp	r2, r3
 80015a2:	d001      	beq.n	80015a8 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80015a4:	2301      	movs	r3, #1
 80015a6:	e000      	b.n	80015aa <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80015a8:	2300      	movs	r3, #0
}
 80015aa:	4618      	mov	r0, r3
 80015ac:	3718      	adds	r7, #24
 80015ae:	46bd      	mov	sp, r7
 80015b0:	bd80      	pop	{r7, pc}
 80015b2:	bf00      	nop
 80015b4:	40023800 	.word	0x40023800

080015b8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80015b8:	b580      	push	{r7, lr}
 80015ba:	b084      	sub	sp, #16
 80015bc:	af00      	add	r7, sp, #0
 80015be:	6078      	str	r0, [r7, #4]
 80015c0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d101      	bne.n	80015cc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80015c8:	2301      	movs	r3, #1
 80015ca:	e0cc      	b.n	8001766 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80015cc:	4b68      	ldr	r3, [pc, #416]	; (8001770 <HAL_RCC_ClockConfig+0x1b8>)
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	f003 030f 	and.w	r3, r3, #15
 80015d4:	683a      	ldr	r2, [r7, #0]
 80015d6:	429a      	cmp	r2, r3
 80015d8:	d90c      	bls.n	80015f4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80015da:	4b65      	ldr	r3, [pc, #404]	; (8001770 <HAL_RCC_ClockConfig+0x1b8>)
 80015dc:	683a      	ldr	r2, [r7, #0]
 80015de:	b2d2      	uxtb	r2, r2
 80015e0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80015e2:	4b63      	ldr	r3, [pc, #396]	; (8001770 <HAL_RCC_ClockConfig+0x1b8>)
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	f003 030f 	and.w	r3, r3, #15
 80015ea:	683a      	ldr	r2, [r7, #0]
 80015ec:	429a      	cmp	r2, r3
 80015ee:	d001      	beq.n	80015f4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80015f0:	2301      	movs	r3, #1
 80015f2:	e0b8      	b.n	8001766 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	f003 0302 	and.w	r3, r3, #2
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d020      	beq.n	8001642 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	f003 0304 	and.w	r3, r3, #4
 8001608:	2b00      	cmp	r3, #0
 800160a:	d005      	beq.n	8001618 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800160c:	4b59      	ldr	r3, [pc, #356]	; (8001774 <HAL_RCC_ClockConfig+0x1bc>)
 800160e:	689b      	ldr	r3, [r3, #8]
 8001610:	4a58      	ldr	r2, [pc, #352]	; (8001774 <HAL_RCC_ClockConfig+0x1bc>)
 8001612:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001616:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	f003 0308 	and.w	r3, r3, #8
 8001620:	2b00      	cmp	r3, #0
 8001622:	d005      	beq.n	8001630 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001624:	4b53      	ldr	r3, [pc, #332]	; (8001774 <HAL_RCC_ClockConfig+0x1bc>)
 8001626:	689b      	ldr	r3, [r3, #8]
 8001628:	4a52      	ldr	r2, [pc, #328]	; (8001774 <HAL_RCC_ClockConfig+0x1bc>)
 800162a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800162e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001630:	4b50      	ldr	r3, [pc, #320]	; (8001774 <HAL_RCC_ClockConfig+0x1bc>)
 8001632:	689b      	ldr	r3, [r3, #8]
 8001634:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	689b      	ldr	r3, [r3, #8]
 800163c:	494d      	ldr	r1, [pc, #308]	; (8001774 <HAL_RCC_ClockConfig+0x1bc>)
 800163e:	4313      	orrs	r3, r2
 8001640:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	f003 0301 	and.w	r3, r3, #1
 800164a:	2b00      	cmp	r3, #0
 800164c:	d044      	beq.n	80016d8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	685b      	ldr	r3, [r3, #4]
 8001652:	2b01      	cmp	r3, #1
 8001654:	d107      	bne.n	8001666 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001656:	4b47      	ldr	r3, [pc, #284]	; (8001774 <HAL_RCC_ClockConfig+0x1bc>)
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800165e:	2b00      	cmp	r3, #0
 8001660:	d119      	bne.n	8001696 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001662:	2301      	movs	r3, #1
 8001664:	e07f      	b.n	8001766 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	685b      	ldr	r3, [r3, #4]
 800166a:	2b02      	cmp	r3, #2
 800166c:	d003      	beq.n	8001676 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001672:	2b03      	cmp	r3, #3
 8001674:	d107      	bne.n	8001686 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001676:	4b3f      	ldr	r3, [pc, #252]	; (8001774 <HAL_RCC_ClockConfig+0x1bc>)
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800167e:	2b00      	cmp	r3, #0
 8001680:	d109      	bne.n	8001696 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001682:	2301      	movs	r3, #1
 8001684:	e06f      	b.n	8001766 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001686:	4b3b      	ldr	r3, [pc, #236]	; (8001774 <HAL_RCC_ClockConfig+0x1bc>)
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	f003 0302 	and.w	r3, r3, #2
 800168e:	2b00      	cmp	r3, #0
 8001690:	d101      	bne.n	8001696 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001692:	2301      	movs	r3, #1
 8001694:	e067      	b.n	8001766 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001696:	4b37      	ldr	r3, [pc, #220]	; (8001774 <HAL_RCC_ClockConfig+0x1bc>)
 8001698:	689b      	ldr	r3, [r3, #8]
 800169a:	f023 0203 	bic.w	r2, r3, #3
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	685b      	ldr	r3, [r3, #4]
 80016a2:	4934      	ldr	r1, [pc, #208]	; (8001774 <HAL_RCC_ClockConfig+0x1bc>)
 80016a4:	4313      	orrs	r3, r2
 80016a6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80016a8:	f7ff f9ec 	bl	8000a84 <HAL_GetTick>
 80016ac:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80016ae:	e00a      	b.n	80016c6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80016b0:	f7ff f9e8 	bl	8000a84 <HAL_GetTick>
 80016b4:	4602      	mov	r2, r0
 80016b6:	68fb      	ldr	r3, [r7, #12]
 80016b8:	1ad3      	subs	r3, r2, r3
 80016ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80016be:	4293      	cmp	r3, r2
 80016c0:	d901      	bls.n	80016c6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80016c2:	2303      	movs	r3, #3
 80016c4:	e04f      	b.n	8001766 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80016c6:	4b2b      	ldr	r3, [pc, #172]	; (8001774 <HAL_RCC_ClockConfig+0x1bc>)
 80016c8:	689b      	ldr	r3, [r3, #8]
 80016ca:	f003 020c 	and.w	r2, r3, #12
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	685b      	ldr	r3, [r3, #4]
 80016d2:	009b      	lsls	r3, r3, #2
 80016d4:	429a      	cmp	r2, r3
 80016d6:	d1eb      	bne.n	80016b0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80016d8:	4b25      	ldr	r3, [pc, #148]	; (8001770 <HAL_RCC_ClockConfig+0x1b8>)
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	f003 030f 	and.w	r3, r3, #15
 80016e0:	683a      	ldr	r2, [r7, #0]
 80016e2:	429a      	cmp	r2, r3
 80016e4:	d20c      	bcs.n	8001700 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80016e6:	4b22      	ldr	r3, [pc, #136]	; (8001770 <HAL_RCC_ClockConfig+0x1b8>)
 80016e8:	683a      	ldr	r2, [r7, #0]
 80016ea:	b2d2      	uxtb	r2, r2
 80016ec:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80016ee:	4b20      	ldr	r3, [pc, #128]	; (8001770 <HAL_RCC_ClockConfig+0x1b8>)
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	f003 030f 	and.w	r3, r3, #15
 80016f6:	683a      	ldr	r2, [r7, #0]
 80016f8:	429a      	cmp	r2, r3
 80016fa:	d001      	beq.n	8001700 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80016fc:	2301      	movs	r3, #1
 80016fe:	e032      	b.n	8001766 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	f003 0304 	and.w	r3, r3, #4
 8001708:	2b00      	cmp	r3, #0
 800170a:	d008      	beq.n	800171e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800170c:	4b19      	ldr	r3, [pc, #100]	; (8001774 <HAL_RCC_ClockConfig+0x1bc>)
 800170e:	689b      	ldr	r3, [r3, #8]
 8001710:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	68db      	ldr	r3, [r3, #12]
 8001718:	4916      	ldr	r1, [pc, #88]	; (8001774 <HAL_RCC_ClockConfig+0x1bc>)
 800171a:	4313      	orrs	r3, r2
 800171c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	f003 0308 	and.w	r3, r3, #8
 8001726:	2b00      	cmp	r3, #0
 8001728:	d009      	beq.n	800173e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800172a:	4b12      	ldr	r3, [pc, #72]	; (8001774 <HAL_RCC_ClockConfig+0x1bc>)
 800172c:	689b      	ldr	r3, [r3, #8]
 800172e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	691b      	ldr	r3, [r3, #16]
 8001736:	00db      	lsls	r3, r3, #3
 8001738:	490e      	ldr	r1, [pc, #56]	; (8001774 <HAL_RCC_ClockConfig+0x1bc>)
 800173a:	4313      	orrs	r3, r2
 800173c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800173e:	f000 f821 	bl	8001784 <HAL_RCC_GetSysClockFreq>
 8001742:	4602      	mov	r2, r0
 8001744:	4b0b      	ldr	r3, [pc, #44]	; (8001774 <HAL_RCC_ClockConfig+0x1bc>)
 8001746:	689b      	ldr	r3, [r3, #8]
 8001748:	091b      	lsrs	r3, r3, #4
 800174a:	f003 030f 	and.w	r3, r3, #15
 800174e:	490a      	ldr	r1, [pc, #40]	; (8001778 <HAL_RCC_ClockConfig+0x1c0>)
 8001750:	5ccb      	ldrb	r3, [r1, r3]
 8001752:	fa22 f303 	lsr.w	r3, r2, r3
 8001756:	4a09      	ldr	r2, [pc, #36]	; (800177c <HAL_RCC_ClockConfig+0x1c4>)
 8001758:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800175a:	4b09      	ldr	r3, [pc, #36]	; (8001780 <HAL_RCC_ClockConfig+0x1c8>)
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	4618      	mov	r0, r3
 8001760:	f7ff f94c 	bl	80009fc <HAL_InitTick>

  return HAL_OK;
 8001764:	2300      	movs	r3, #0
}
 8001766:	4618      	mov	r0, r3
 8001768:	3710      	adds	r7, #16
 800176a:	46bd      	mov	sp, r7
 800176c:	bd80      	pop	{r7, pc}
 800176e:	bf00      	nop
 8001770:	40023c00 	.word	0x40023c00
 8001774:	40023800 	.word	0x40023800
 8001778:	08004a64 	.word	0x08004a64
 800177c:	20000000 	.word	0x20000000
 8001780:	20000004 	.word	0x20000004

08001784 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001784:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001788:	b090      	sub	sp, #64	; 0x40
 800178a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800178c:	2300      	movs	r3, #0
 800178e:	637b      	str	r3, [r7, #52]	; 0x34
 8001790:	2300      	movs	r3, #0
 8001792:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001794:	2300      	movs	r3, #0
 8001796:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8001798:	2300      	movs	r3, #0
 800179a:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800179c:	4b59      	ldr	r3, [pc, #356]	; (8001904 <HAL_RCC_GetSysClockFreq+0x180>)
 800179e:	689b      	ldr	r3, [r3, #8]
 80017a0:	f003 030c 	and.w	r3, r3, #12
 80017a4:	2b08      	cmp	r3, #8
 80017a6:	d00d      	beq.n	80017c4 <HAL_RCC_GetSysClockFreq+0x40>
 80017a8:	2b08      	cmp	r3, #8
 80017aa:	f200 80a1 	bhi.w	80018f0 <HAL_RCC_GetSysClockFreq+0x16c>
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d002      	beq.n	80017b8 <HAL_RCC_GetSysClockFreq+0x34>
 80017b2:	2b04      	cmp	r3, #4
 80017b4:	d003      	beq.n	80017be <HAL_RCC_GetSysClockFreq+0x3a>
 80017b6:	e09b      	b.n	80018f0 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80017b8:	4b53      	ldr	r3, [pc, #332]	; (8001908 <HAL_RCC_GetSysClockFreq+0x184>)
 80017ba:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 80017bc:	e09b      	b.n	80018f6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80017be:	4b53      	ldr	r3, [pc, #332]	; (800190c <HAL_RCC_GetSysClockFreq+0x188>)
 80017c0:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80017c2:	e098      	b.n	80018f6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80017c4:	4b4f      	ldr	r3, [pc, #316]	; (8001904 <HAL_RCC_GetSysClockFreq+0x180>)
 80017c6:	685b      	ldr	r3, [r3, #4]
 80017c8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80017cc:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80017ce:	4b4d      	ldr	r3, [pc, #308]	; (8001904 <HAL_RCC_GetSysClockFreq+0x180>)
 80017d0:	685b      	ldr	r3, [r3, #4]
 80017d2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d028      	beq.n	800182c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80017da:	4b4a      	ldr	r3, [pc, #296]	; (8001904 <HAL_RCC_GetSysClockFreq+0x180>)
 80017dc:	685b      	ldr	r3, [r3, #4]
 80017de:	099b      	lsrs	r3, r3, #6
 80017e0:	2200      	movs	r2, #0
 80017e2:	623b      	str	r3, [r7, #32]
 80017e4:	627a      	str	r2, [r7, #36]	; 0x24
 80017e6:	6a3b      	ldr	r3, [r7, #32]
 80017e8:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80017ec:	2100      	movs	r1, #0
 80017ee:	4b47      	ldr	r3, [pc, #284]	; (800190c <HAL_RCC_GetSysClockFreq+0x188>)
 80017f0:	fb03 f201 	mul.w	r2, r3, r1
 80017f4:	2300      	movs	r3, #0
 80017f6:	fb00 f303 	mul.w	r3, r0, r3
 80017fa:	4413      	add	r3, r2
 80017fc:	4a43      	ldr	r2, [pc, #268]	; (800190c <HAL_RCC_GetSysClockFreq+0x188>)
 80017fe:	fba0 1202 	umull	r1, r2, r0, r2
 8001802:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001804:	460a      	mov	r2, r1
 8001806:	62ba      	str	r2, [r7, #40]	; 0x28
 8001808:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800180a:	4413      	add	r3, r2
 800180c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800180e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001810:	2200      	movs	r2, #0
 8001812:	61bb      	str	r3, [r7, #24]
 8001814:	61fa      	str	r2, [r7, #28]
 8001816:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800181a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800181e:	f7fe fce7 	bl	80001f0 <__aeabi_uldivmod>
 8001822:	4602      	mov	r2, r0
 8001824:	460b      	mov	r3, r1
 8001826:	4613      	mov	r3, r2
 8001828:	63fb      	str	r3, [r7, #60]	; 0x3c
 800182a:	e053      	b.n	80018d4 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800182c:	4b35      	ldr	r3, [pc, #212]	; (8001904 <HAL_RCC_GetSysClockFreq+0x180>)
 800182e:	685b      	ldr	r3, [r3, #4]
 8001830:	099b      	lsrs	r3, r3, #6
 8001832:	2200      	movs	r2, #0
 8001834:	613b      	str	r3, [r7, #16]
 8001836:	617a      	str	r2, [r7, #20]
 8001838:	693b      	ldr	r3, [r7, #16]
 800183a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800183e:	f04f 0b00 	mov.w	fp, #0
 8001842:	4652      	mov	r2, sl
 8001844:	465b      	mov	r3, fp
 8001846:	f04f 0000 	mov.w	r0, #0
 800184a:	f04f 0100 	mov.w	r1, #0
 800184e:	0159      	lsls	r1, r3, #5
 8001850:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001854:	0150      	lsls	r0, r2, #5
 8001856:	4602      	mov	r2, r0
 8001858:	460b      	mov	r3, r1
 800185a:	ebb2 080a 	subs.w	r8, r2, sl
 800185e:	eb63 090b 	sbc.w	r9, r3, fp
 8001862:	f04f 0200 	mov.w	r2, #0
 8001866:	f04f 0300 	mov.w	r3, #0
 800186a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800186e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8001872:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8001876:	ebb2 0408 	subs.w	r4, r2, r8
 800187a:	eb63 0509 	sbc.w	r5, r3, r9
 800187e:	f04f 0200 	mov.w	r2, #0
 8001882:	f04f 0300 	mov.w	r3, #0
 8001886:	00eb      	lsls	r3, r5, #3
 8001888:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800188c:	00e2      	lsls	r2, r4, #3
 800188e:	4614      	mov	r4, r2
 8001890:	461d      	mov	r5, r3
 8001892:	eb14 030a 	adds.w	r3, r4, sl
 8001896:	603b      	str	r3, [r7, #0]
 8001898:	eb45 030b 	adc.w	r3, r5, fp
 800189c:	607b      	str	r3, [r7, #4]
 800189e:	f04f 0200 	mov.w	r2, #0
 80018a2:	f04f 0300 	mov.w	r3, #0
 80018a6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80018aa:	4629      	mov	r1, r5
 80018ac:	028b      	lsls	r3, r1, #10
 80018ae:	4621      	mov	r1, r4
 80018b0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80018b4:	4621      	mov	r1, r4
 80018b6:	028a      	lsls	r2, r1, #10
 80018b8:	4610      	mov	r0, r2
 80018ba:	4619      	mov	r1, r3
 80018bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80018be:	2200      	movs	r2, #0
 80018c0:	60bb      	str	r3, [r7, #8]
 80018c2:	60fa      	str	r2, [r7, #12]
 80018c4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80018c8:	f7fe fc92 	bl	80001f0 <__aeabi_uldivmod>
 80018cc:	4602      	mov	r2, r0
 80018ce:	460b      	mov	r3, r1
 80018d0:	4613      	mov	r3, r2
 80018d2:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80018d4:	4b0b      	ldr	r3, [pc, #44]	; (8001904 <HAL_RCC_GetSysClockFreq+0x180>)
 80018d6:	685b      	ldr	r3, [r3, #4]
 80018d8:	0c1b      	lsrs	r3, r3, #16
 80018da:	f003 0303 	and.w	r3, r3, #3
 80018de:	3301      	adds	r3, #1
 80018e0:	005b      	lsls	r3, r3, #1
 80018e2:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 80018e4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80018e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80018e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80018ec:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80018ee:	e002      	b.n	80018f6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80018f0:	4b05      	ldr	r3, [pc, #20]	; (8001908 <HAL_RCC_GetSysClockFreq+0x184>)
 80018f2:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80018f4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80018f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 80018f8:	4618      	mov	r0, r3
 80018fa:	3740      	adds	r7, #64	; 0x40
 80018fc:	46bd      	mov	sp, r7
 80018fe:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001902:	bf00      	nop
 8001904:	40023800 	.word	0x40023800
 8001908:	00f42400 	.word	0x00f42400
 800190c:	017d7840 	.word	0x017d7840

08001910 <__NVIC_SetPriority>:
{
 8001910:	b480      	push	{r7}
 8001912:	b083      	sub	sp, #12
 8001914:	af00      	add	r7, sp, #0
 8001916:	4603      	mov	r3, r0
 8001918:	6039      	str	r1, [r7, #0]
 800191a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800191c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001920:	2b00      	cmp	r3, #0
 8001922:	db0a      	blt.n	800193a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001924:	683b      	ldr	r3, [r7, #0]
 8001926:	b2da      	uxtb	r2, r3
 8001928:	490c      	ldr	r1, [pc, #48]	; (800195c <__NVIC_SetPriority+0x4c>)
 800192a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800192e:	0112      	lsls	r2, r2, #4
 8001930:	b2d2      	uxtb	r2, r2
 8001932:	440b      	add	r3, r1
 8001934:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001938:	e00a      	b.n	8001950 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800193a:	683b      	ldr	r3, [r7, #0]
 800193c:	b2da      	uxtb	r2, r3
 800193e:	4908      	ldr	r1, [pc, #32]	; (8001960 <__NVIC_SetPriority+0x50>)
 8001940:	79fb      	ldrb	r3, [r7, #7]
 8001942:	f003 030f 	and.w	r3, r3, #15
 8001946:	3b04      	subs	r3, #4
 8001948:	0112      	lsls	r2, r2, #4
 800194a:	b2d2      	uxtb	r2, r2
 800194c:	440b      	add	r3, r1
 800194e:	761a      	strb	r2, [r3, #24]
}
 8001950:	bf00      	nop
 8001952:	370c      	adds	r7, #12
 8001954:	46bd      	mov	sp, r7
 8001956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800195a:	4770      	bx	lr
 800195c:	e000e100 	.word	0xe000e100
 8001960:	e000ed00 	.word	0xe000ed00

08001964 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8001964:	b580      	push	{r7, lr}
 8001966:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8001968:	2100      	movs	r1, #0
 800196a:	f06f 0004 	mvn.w	r0, #4
 800196e:	f7ff ffcf 	bl	8001910 <__NVIC_SetPriority>
#endif
}
 8001972:	bf00      	nop
 8001974:	bd80      	pop	{r7, pc}
	...

08001978 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8001978:	b480      	push	{r7}
 800197a:	b083      	sub	sp, #12
 800197c:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800197e:	f3ef 8305 	mrs	r3, IPSR
 8001982:	603b      	str	r3, [r7, #0]
  return(result);
 8001984:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8001986:	2b00      	cmp	r3, #0
 8001988:	d003      	beq.n	8001992 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800198a:	f06f 0305 	mvn.w	r3, #5
 800198e:	607b      	str	r3, [r7, #4]
 8001990:	e00c      	b.n	80019ac <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8001992:	4b0a      	ldr	r3, [pc, #40]	; (80019bc <osKernelInitialize+0x44>)
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	2b00      	cmp	r3, #0
 8001998:	d105      	bne.n	80019a6 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800199a:	4b08      	ldr	r3, [pc, #32]	; (80019bc <osKernelInitialize+0x44>)
 800199c:	2201      	movs	r2, #1
 800199e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80019a0:	2300      	movs	r3, #0
 80019a2:	607b      	str	r3, [r7, #4]
 80019a4:	e002      	b.n	80019ac <osKernelInitialize+0x34>
    } else {
      stat = osError;
 80019a6:	f04f 33ff 	mov.w	r3, #4294967295
 80019aa:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80019ac:	687b      	ldr	r3, [r7, #4]
}
 80019ae:	4618      	mov	r0, r3
 80019b0:	370c      	adds	r7, #12
 80019b2:	46bd      	mov	sp, r7
 80019b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b8:	4770      	bx	lr
 80019ba:	bf00      	nop
 80019bc:	20000050 	.word	0x20000050

080019c0 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80019c0:	b580      	push	{r7, lr}
 80019c2:	b082      	sub	sp, #8
 80019c4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80019c6:	f3ef 8305 	mrs	r3, IPSR
 80019ca:	603b      	str	r3, [r7, #0]
  return(result);
 80019cc:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d003      	beq.n	80019da <osKernelStart+0x1a>
    stat = osErrorISR;
 80019d2:	f06f 0305 	mvn.w	r3, #5
 80019d6:	607b      	str	r3, [r7, #4]
 80019d8:	e010      	b.n	80019fc <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 80019da:	4b0b      	ldr	r3, [pc, #44]	; (8001a08 <osKernelStart+0x48>)
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	2b01      	cmp	r3, #1
 80019e0:	d109      	bne.n	80019f6 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80019e2:	f7ff ffbf 	bl	8001964 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80019e6:	4b08      	ldr	r3, [pc, #32]	; (8001a08 <osKernelStart+0x48>)
 80019e8:	2202      	movs	r2, #2
 80019ea:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80019ec:	f001 f9f6 	bl	8002ddc <vTaskStartScheduler>
      stat = osOK;
 80019f0:	2300      	movs	r3, #0
 80019f2:	607b      	str	r3, [r7, #4]
 80019f4:	e002      	b.n	80019fc <osKernelStart+0x3c>
    } else {
      stat = osError;
 80019f6:	f04f 33ff 	mov.w	r3, #4294967295
 80019fa:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80019fc:	687b      	ldr	r3, [r7, #4]
}
 80019fe:	4618      	mov	r0, r3
 8001a00:	3708      	adds	r7, #8
 8001a02:	46bd      	mov	sp, r7
 8001a04:	bd80      	pop	{r7, pc}
 8001a06:	bf00      	nop
 8001a08:	20000050 	.word	0x20000050

08001a0c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8001a0c:	b580      	push	{r7, lr}
 8001a0e:	b08e      	sub	sp, #56	; 0x38
 8001a10:	af04      	add	r7, sp, #16
 8001a12:	60f8      	str	r0, [r7, #12]
 8001a14:	60b9      	str	r1, [r7, #8]
 8001a16:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8001a18:	2300      	movs	r3, #0
 8001a1a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001a1c:	f3ef 8305 	mrs	r3, IPSR
 8001a20:	617b      	str	r3, [r7, #20]
  return(result);
 8001a22:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d17e      	bne.n	8001b26 <osThreadNew+0x11a>
 8001a28:	68fb      	ldr	r3, [r7, #12]
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d07b      	beq.n	8001b26 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8001a2e:	2380      	movs	r3, #128	; 0x80
 8001a30:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8001a32:	2318      	movs	r3, #24
 8001a34:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8001a36:	2300      	movs	r3, #0
 8001a38:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8001a3a:	f04f 33ff 	mov.w	r3, #4294967295
 8001a3e:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d045      	beq.n	8001ad2 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d002      	beq.n	8001a54 <osThreadNew+0x48>
        name = attr->name;
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	699b      	ldr	r3, [r3, #24]
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d002      	beq.n	8001a62 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	699b      	ldr	r3, [r3, #24]
 8001a60:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8001a62:	69fb      	ldr	r3, [r7, #28]
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d008      	beq.n	8001a7a <osThreadNew+0x6e>
 8001a68:	69fb      	ldr	r3, [r7, #28]
 8001a6a:	2b38      	cmp	r3, #56	; 0x38
 8001a6c:	d805      	bhi.n	8001a7a <osThreadNew+0x6e>
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	685b      	ldr	r3, [r3, #4]
 8001a72:	f003 0301 	and.w	r3, r3, #1
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d001      	beq.n	8001a7e <osThreadNew+0x72>
        return (NULL);
 8001a7a:	2300      	movs	r3, #0
 8001a7c:	e054      	b.n	8001b28 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	695b      	ldr	r3, [r3, #20]
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d003      	beq.n	8001a8e <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	695b      	ldr	r3, [r3, #20]
 8001a8a:	089b      	lsrs	r3, r3, #2
 8001a8c:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	689b      	ldr	r3, [r3, #8]
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d00e      	beq.n	8001ab4 <osThreadNew+0xa8>
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	68db      	ldr	r3, [r3, #12]
 8001a9a:	2b5b      	cmp	r3, #91	; 0x5b
 8001a9c:	d90a      	bls.n	8001ab4 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d006      	beq.n	8001ab4 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	695b      	ldr	r3, [r3, #20]
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d002      	beq.n	8001ab4 <osThreadNew+0xa8>
        mem = 1;
 8001aae:	2301      	movs	r3, #1
 8001ab0:	61bb      	str	r3, [r7, #24]
 8001ab2:	e010      	b.n	8001ad6 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	689b      	ldr	r3, [r3, #8]
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d10c      	bne.n	8001ad6 <osThreadNew+0xca>
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	68db      	ldr	r3, [r3, #12]
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d108      	bne.n	8001ad6 <osThreadNew+0xca>
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	691b      	ldr	r3, [r3, #16]
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d104      	bne.n	8001ad6 <osThreadNew+0xca>
          mem = 0;
 8001acc:	2300      	movs	r3, #0
 8001ace:	61bb      	str	r3, [r7, #24]
 8001ad0:	e001      	b.n	8001ad6 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8001ad2:	2300      	movs	r3, #0
 8001ad4:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8001ad6:	69bb      	ldr	r3, [r7, #24]
 8001ad8:	2b01      	cmp	r3, #1
 8001ada:	d110      	bne.n	8001afe <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8001ae0:	687a      	ldr	r2, [r7, #4]
 8001ae2:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8001ae4:	9202      	str	r2, [sp, #8]
 8001ae6:	9301      	str	r3, [sp, #4]
 8001ae8:	69fb      	ldr	r3, [r7, #28]
 8001aea:	9300      	str	r3, [sp, #0]
 8001aec:	68bb      	ldr	r3, [r7, #8]
 8001aee:	6a3a      	ldr	r2, [r7, #32]
 8001af0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001af2:	68f8      	ldr	r0, [r7, #12]
 8001af4:	f000 ff9c 	bl	8002a30 <xTaskCreateStatic>
 8001af8:	4603      	mov	r3, r0
 8001afa:	613b      	str	r3, [r7, #16]
 8001afc:	e013      	b.n	8001b26 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8001afe:	69bb      	ldr	r3, [r7, #24]
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d110      	bne.n	8001b26 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8001b04:	6a3b      	ldr	r3, [r7, #32]
 8001b06:	b29a      	uxth	r2, r3
 8001b08:	f107 0310 	add.w	r3, r7, #16
 8001b0c:	9301      	str	r3, [sp, #4]
 8001b0e:	69fb      	ldr	r3, [r7, #28]
 8001b10:	9300      	str	r3, [sp, #0]
 8001b12:	68bb      	ldr	r3, [r7, #8]
 8001b14:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001b16:	68f8      	ldr	r0, [r7, #12]
 8001b18:	f000 ffe7 	bl	8002aea <xTaskCreate>
 8001b1c:	4603      	mov	r3, r0
 8001b1e:	2b01      	cmp	r3, #1
 8001b20:	d001      	beq.n	8001b26 <osThreadNew+0x11a>
            hTask = NULL;
 8001b22:	2300      	movs	r3, #0
 8001b24:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8001b26:	693b      	ldr	r3, [r7, #16]
}
 8001b28:	4618      	mov	r0, r3
 8001b2a:	3728      	adds	r7, #40	; 0x28
 8001b2c:	46bd      	mov	sp, r7
 8001b2e:	bd80      	pop	{r7, pc}

08001b30 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8001b30:	b580      	push	{r7, lr}
 8001b32:	b084      	sub	sp, #16
 8001b34:	af00      	add	r7, sp, #0
 8001b36:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001b38:	f3ef 8305 	mrs	r3, IPSR
 8001b3c:	60bb      	str	r3, [r7, #8]
  return(result);
 8001b3e:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d003      	beq.n	8001b4c <osDelay+0x1c>
    stat = osErrorISR;
 8001b44:	f06f 0305 	mvn.w	r3, #5
 8001b48:	60fb      	str	r3, [r7, #12]
 8001b4a:	e007      	b.n	8001b5c <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8001b4c:	2300      	movs	r3, #0
 8001b4e:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d002      	beq.n	8001b5c <osDelay+0x2c>
      vTaskDelay(ticks);
 8001b56:	6878      	ldr	r0, [r7, #4]
 8001b58:	f001 f90c 	bl	8002d74 <vTaskDelay>
    }
  }

  return (stat);
 8001b5c:	68fb      	ldr	r3, [r7, #12]
}
 8001b5e:	4618      	mov	r0, r3
 8001b60:	3710      	adds	r7, #16
 8001b62:	46bd      	mov	sp, r7
 8001b64:	bd80      	pop	{r7, pc}
	...

08001b68 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8001b68:	b480      	push	{r7}
 8001b6a:	b085      	sub	sp, #20
 8001b6c:	af00      	add	r7, sp, #0
 8001b6e:	60f8      	str	r0, [r7, #12]
 8001b70:	60b9      	str	r1, [r7, #8]
 8001b72:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8001b74:	68fb      	ldr	r3, [r7, #12]
 8001b76:	4a07      	ldr	r2, [pc, #28]	; (8001b94 <vApplicationGetIdleTaskMemory+0x2c>)
 8001b78:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8001b7a:	68bb      	ldr	r3, [r7, #8]
 8001b7c:	4a06      	ldr	r2, [pc, #24]	; (8001b98 <vApplicationGetIdleTaskMemory+0x30>)
 8001b7e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	2280      	movs	r2, #128	; 0x80
 8001b84:	601a      	str	r2, [r3, #0]
}
 8001b86:	bf00      	nop
 8001b88:	3714      	adds	r7, #20
 8001b8a:	46bd      	mov	sp, r7
 8001b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b90:	4770      	bx	lr
 8001b92:	bf00      	nop
 8001b94:	20000054 	.word	0x20000054
 8001b98:	200000b0 	.word	0x200000b0

08001b9c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8001b9c:	b480      	push	{r7}
 8001b9e:	b085      	sub	sp, #20
 8001ba0:	af00      	add	r7, sp, #0
 8001ba2:	60f8      	str	r0, [r7, #12]
 8001ba4:	60b9      	str	r1, [r7, #8]
 8001ba6:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8001ba8:	68fb      	ldr	r3, [r7, #12]
 8001baa:	4a07      	ldr	r2, [pc, #28]	; (8001bc8 <vApplicationGetTimerTaskMemory+0x2c>)
 8001bac:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8001bae:	68bb      	ldr	r3, [r7, #8]
 8001bb0:	4a06      	ldr	r2, [pc, #24]	; (8001bcc <vApplicationGetTimerTaskMemory+0x30>)
 8001bb2:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001bba:	601a      	str	r2, [r3, #0]
}
 8001bbc:	bf00      	nop
 8001bbe:	3714      	adds	r7, #20
 8001bc0:	46bd      	mov	sp, r7
 8001bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc6:	4770      	bx	lr
 8001bc8:	200002b0 	.word	0x200002b0
 8001bcc:	2000030c 	.word	0x2000030c

08001bd0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8001bd0:	b480      	push	{r7}
 8001bd2:	b083      	sub	sp, #12
 8001bd4:	af00      	add	r7, sp, #0
 8001bd6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	f103 0208 	add.w	r2, r3, #8
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	f04f 32ff 	mov.w	r2, #4294967295
 8001be8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	f103 0208 	add.w	r2, r3, #8
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	f103 0208 	add.w	r2, r3, #8
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	2200      	movs	r2, #0
 8001c02:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8001c04:	bf00      	nop
 8001c06:	370c      	adds	r7, #12
 8001c08:	46bd      	mov	sp, r7
 8001c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c0e:	4770      	bx	lr

08001c10 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8001c10:	b480      	push	{r7}
 8001c12:	b083      	sub	sp, #12
 8001c14:	af00      	add	r7, sp, #0
 8001c16:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	2200      	movs	r2, #0
 8001c1c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8001c1e:	bf00      	nop
 8001c20:	370c      	adds	r7, #12
 8001c22:	46bd      	mov	sp, r7
 8001c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c28:	4770      	bx	lr

08001c2a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8001c2a:	b480      	push	{r7}
 8001c2c:	b085      	sub	sp, #20
 8001c2e:	af00      	add	r7, sp, #0
 8001c30:	6078      	str	r0, [r7, #4]
 8001c32:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	685b      	ldr	r3, [r3, #4]
 8001c38:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8001c3a:	683b      	ldr	r3, [r7, #0]
 8001c3c:	68fa      	ldr	r2, [r7, #12]
 8001c3e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	689a      	ldr	r2, [r3, #8]
 8001c44:	683b      	ldr	r3, [r7, #0]
 8001c46:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	689b      	ldr	r3, [r3, #8]
 8001c4c:	683a      	ldr	r2, [r7, #0]
 8001c4e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8001c50:	68fb      	ldr	r3, [r7, #12]
 8001c52:	683a      	ldr	r2, [r7, #0]
 8001c54:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8001c56:	683b      	ldr	r3, [r7, #0]
 8001c58:	687a      	ldr	r2, [r7, #4]
 8001c5a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	1c5a      	adds	r2, r3, #1
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	601a      	str	r2, [r3, #0]
}
 8001c66:	bf00      	nop
 8001c68:	3714      	adds	r7, #20
 8001c6a:	46bd      	mov	sp, r7
 8001c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c70:	4770      	bx	lr

08001c72 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8001c72:	b480      	push	{r7}
 8001c74:	b085      	sub	sp, #20
 8001c76:	af00      	add	r7, sp, #0
 8001c78:	6078      	str	r0, [r7, #4]
 8001c7a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8001c7c:	683b      	ldr	r3, [r7, #0]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8001c82:	68bb      	ldr	r3, [r7, #8]
 8001c84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c88:	d103      	bne.n	8001c92 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	691b      	ldr	r3, [r3, #16]
 8001c8e:	60fb      	str	r3, [r7, #12]
 8001c90:	e00c      	b.n	8001cac <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	3308      	adds	r3, #8
 8001c96:	60fb      	str	r3, [r7, #12]
 8001c98:	e002      	b.n	8001ca0 <vListInsert+0x2e>
 8001c9a:	68fb      	ldr	r3, [r7, #12]
 8001c9c:	685b      	ldr	r3, [r3, #4]
 8001c9e:	60fb      	str	r3, [r7, #12]
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	685b      	ldr	r3, [r3, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	68ba      	ldr	r2, [r7, #8]
 8001ca8:	429a      	cmp	r2, r3
 8001caa:	d2f6      	bcs.n	8001c9a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	685a      	ldr	r2, [r3, #4]
 8001cb0:	683b      	ldr	r3, [r7, #0]
 8001cb2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8001cb4:	683b      	ldr	r3, [r7, #0]
 8001cb6:	685b      	ldr	r3, [r3, #4]
 8001cb8:	683a      	ldr	r2, [r7, #0]
 8001cba:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8001cbc:	683b      	ldr	r3, [r7, #0]
 8001cbe:	68fa      	ldr	r2, [r7, #12]
 8001cc0:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8001cc2:	68fb      	ldr	r3, [r7, #12]
 8001cc4:	683a      	ldr	r2, [r7, #0]
 8001cc6:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8001cc8:	683b      	ldr	r3, [r7, #0]
 8001cca:	687a      	ldr	r2, [r7, #4]
 8001ccc:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	1c5a      	adds	r2, r3, #1
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	601a      	str	r2, [r3, #0]
}
 8001cd8:	bf00      	nop
 8001cda:	3714      	adds	r7, #20
 8001cdc:	46bd      	mov	sp, r7
 8001cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce2:	4770      	bx	lr

08001ce4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8001ce4:	b480      	push	{r7}
 8001ce6:	b085      	sub	sp, #20
 8001ce8:	af00      	add	r7, sp, #0
 8001cea:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	691b      	ldr	r3, [r3, #16]
 8001cf0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	685b      	ldr	r3, [r3, #4]
 8001cf6:	687a      	ldr	r2, [r7, #4]
 8001cf8:	6892      	ldr	r2, [r2, #8]
 8001cfa:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	689b      	ldr	r3, [r3, #8]
 8001d00:	687a      	ldr	r2, [r7, #4]
 8001d02:	6852      	ldr	r2, [r2, #4]
 8001d04:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	685b      	ldr	r3, [r3, #4]
 8001d0a:	687a      	ldr	r2, [r7, #4]
 8001d0c:	429a      	cmp	r2, r3
 8001d0e:	d103      	bne.n	8001d18 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	689a      	ldr	r2, [r3, #8]
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	2200      	movs	r2, #0
 8001d1c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	1e5a      	subs	r2, r3, #1
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	681b      	ldr	r3, [r3, #0]
}
 8001d2c:	4618      	mov	r0, r3
 8001d2e:	3714      	adds	r7, #20
 8001d30:	46bd      	mov	sp, r7
 8001d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d36:	4770      	bx	lr

08001d38 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8001d38:	b580      	push	{r7, lr}
 8001d3a:	b084      	sub	sp, #16
 8001d3c:	af00      	add	r7, sp, #0
 8001d3e:	6078      	str	r0, [r7, #4]
 8001d40:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d10a      	bne.n	8001d62 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8001d4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001d50:	f383 8811 	msr	BASEPRI, r3
 8001d54:	f3bf 8f6f 	isb	sy
 8001d58:	f3bf 8f4f 	dsb	sy
 8001d5c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8001d5e:	bf00      	nop
 8001d60:	e7fe      	b.n	8001d60 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8001d62:	f002 fadf 	bl	8004324 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8001d66:	68fb      	ldr	r3, [r7, #12]
 8001d68:	681a      	ldr	r2, [r3, #0]
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d6e:	68f9      	ldr	r1, [r7, #12]
 8001d70:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8001d72:	fb01 f303 	mul.w	r3, r1, r3
 8001d76:	441a      	add	r2, r3
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	2200      	movs	r2, #0
 8001d80:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8001d82:	68fb      	ldr	r3, [r7, #12]
 8001d84:	681a      	ldr	r2, [r3, #0]
 8001d86:	68fb      	ldr	r3, [r7, #12]
 8001d88:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	681a      	ldr	r2, [r3, #0]
 8001d8e:	68fb      	ldr	r3, [r7, #12]
 8001d90:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d92:	3b01      	subs	r3, #1
 8001d94:	68f9      	ldr	r1, [r7, #12]
 8001d96:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8001d98:	fb01 f303 	mul.w	r3, r1, r3
 8001d9c:	441a      	add	r2, r3
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	22ff      	movs	r2, #255	; 0xff
 8001da6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8001daa:	68fb      	ldr	r3, [r7, #12]
 8001dac:	22ff      	movs	r2, #255	; 0xff
 8001dae:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8001db2:	683b      	ldr	r3, [r7, #0]
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d114      	bne.n	8001de2 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	691b      	ldr	r3, [r3, #16]
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d01a      	beq.n	8001df6 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	3310      	adds	r3, #16
 8001dc4:	4618      	mov	r0, r3
 8001dc6:	f001 fa93 	bl	80032f0 <xTaskRemoveFromEventList>
 8001dca:	4603      	mov	r3, r0
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d012      	beq.n	8001df6 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8001dd0:	4b0c      	ldr	r3, [pc, #48]	; (8001e04 <xQueueGenericReset+0xcc>)
 8001dd2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001dd6:	601a      	str	r2, [r3, #0]
 8001dd8:	f3bf 8f4f 	dsb	sy
 8001ddc:	f3bf 8f6f 	isb	sy
 8001de0:	e009      	b.n	8001df6 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8001de2:	68fb      	ldr	r3, [r7, #12]
 8001de4:	3310      	adds	r3, #16
 8001de6:	4618      	mov	r0, r3
 8001de8:	f7ff fef2 	bl	8001bd0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	3324      	adds	r3, #36	; 0x24
 8001df0:	4618      	mov	r0, r3
 8001df2:	f7ff feed 	bl	8001bd0 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8001df6:	f002 fac5 	bl	8004384 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8001dfa:	2301      	movs	r3, #1
}
 8001dfc:	4618      	mov	r0, r3
 8001dfe:	3710      	adds	r7, #16
 8001e00:	46bd      	mov	sp, r7
 8001e02:	bd80      	pop	{r7, pc}
 8001e04:	e000ed04 	.word	0xe000ed04

08001e08 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8001e08:	b580      	push	{r7, lr}
 8001e0a:	b08e      	sub	sp, #56	; 0x38
 8001e0c:	af02      	add	r7, sp, #8
 8001e0e:	60f8      	str	r0, [r7, #12]
 8001e10:	60b9      	str	r1, [r7, #8]
 8001e12:	607a      	str	r2, [r7, #4]
 8001e14:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8001e16:	68fb      	ldr	r3, [r7, #12]
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d10a      	bne.n	8001e32 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8001e1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001e20:	f383 8811 	msr	BASEPRI, r3
 8001e24:	f3bf 8f6f 	isb	sy
 8001e28:	f3bf 8f4f 	dsb	sy
 8001e2c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8001e2e:	bf00      	nop
 8001e30:	e7fe      	b.n	8001e30 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8001e32:	683b      	ldr	r3, [r7, #0]
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d10a      	bne.n	8001e4e <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8001e38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001e3c:	f383 8811 	msr	BASEPRI, r3
 8001e40:	f3bf 8f6f 	isb	sy
 8001e44:	f3bf 8f4f 	dsb	sy
 8001e48:	627b      	str	r3, [r7, #36]	; 0x24
}
 8001e4a:	bf00      	nop
 8001e4c:	e7fe      	b.n	8001e4c <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d002      	beq.n	8001e5a <xQueueGenericCreateStatic+0x52>
 8001e54:	68bb      	ldr	r3, [r7, #8]
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d001      	beq.n	8001e5e <xQueueGenericCreateStatic+0x56>
 8001e5a:	2301      	movs	r3, #1
 8001e5c:	e000      	b.n	8001e60 <xQueueGenericCreateStatic+0x58>
 8001e5e:	2300      	movs	r3, #0
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d10a      	bne.n	8001e7a <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8001e64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001e68:	f383 8811 	msr	BASEPRI, r3
 8001e6c:	f3bf 8f6f 	isb	sy
 8001e70:	f3bf 8f4f 	dsb	sy
 8001e74:	623b      	str	r3, [r7, #32]
}
 8001e76:	bf00      	nop
 8001e78:	e7fe      	b.n	8001e78 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d102      	bne.n	8001e86 <xQueueGenericCreateStatic+0x7e>
 8001e80:	68bb      	ldr	r3, [r7, #8]
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d101      	bne.n	8001e8a <xQueueGenericCreateStatic+0x82>
 8001e86:	2301      	movs	r3, #1
 8001e88:	e000      	b.n	8001e8c <xQueueGenericCreateStatic+0x84>
 8001e8a:	2300      	movs	r3, #0
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d10a      	bne.n	8001ea6 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8001e90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001e94:	f383 8811 	msr	BASEPRI, r3
 8001e98:	f3bf 8f6f 	isb	sy
 8001e9c:	f3bf 8f4f 	dsb	sy
 8001ea0:	61fb      	str	r3, [r7, #28]
}
 8001ea2:	bf00      	nop
 8001ea4:	e7fe      	b.n	8001ea4 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8001ea6:	2350      	movs	r3, #80	; 0x50
 8001ea8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8001eaa:	697b      	ldr	r3, [r7, #20]
 8001eac:	2b50      	cmp	r3, #80	; 0x50
 8001eae:	d00a      	beq.n	8001ec6 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8001eb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001eb4:	f383 8811 	msr	BASEPRI, r3
 8001eb8:	f3bf 8f6f 	isb	sy
 8001ebc:	f3bf 8f4f 	dsb	sy
 8001ec0:	61bb      	str	r3, [r7, #24]
}
 8001ec2:	bf00      	nop
 8001ec4:	e7fe      	b.n	8001ec4 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8001ec6:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8001ec8:	683b      	ldr	r3, [r7, #0]
 8001eca:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8001ecc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d00d      	beq.n	8001eee <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8001ed2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ed4:	2201      	movs	r2, #1
 8001ed6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8001eda:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8001ede:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ee0:	9300      	str	r3, [sp, #0]
 8001ee2:	4613      	mov	r3, r2
 8001ee4:	687a      	ldr	r2, [r7, #4]
 8001ee6:	68b9      	ldr	r1, [r7, #8]
 8001ee8:	68f8      	ldr	r0, [r7, #12]
 8001eea:	f000 f83f 	bl	8001f6c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8001eee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8001ef0:	4618      	mov	r0, r3
 8001ef2:	3730      	adds	r7, #48	; 0x30
 8001ef4:	46bd      	mov	sp, r7
 8001ef6:	bd80      	pop	{r7, pc}

08001ef8 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8001ef8:	b580      	push	{r7, lr}
 8001efa:	b08a      	sub	sp, #40	; 0x28
 8001efc:	af02      	add	r7, sp, #8
 8001efe:	60f8      	str	r0, [r7, #12]
 8001f00:	60b9      	str	r1, [r7, #8]
 8001f02:	4613      	mov	r3, r2
 8001f04:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d10a      	bne.n	8001f22 <xQueueGenericCreate+0x2a>
	__asm volatile
 8001f0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001f10:	f383 8811 	msr	BASEPRI, r3
 8001f14:	f3bf 8f6f 	isb	sy
 8001f18:	f3bf 8f4f 	dsb	sy
 8001f1c:	613b      	str	r3, [r7, #16]
}
 8001f1e:	bf00      	nop
 8001f20:	e7fe      	b.n	8001f20 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	68ba      	ldr	r2, [r7, #8]
 8001f26:	fb02 f303 	mul.w	r3, r2, r3
 8001f2a:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8001f2c:	69fb      	ldr	r3, [r7, #28]
 8001f2e:	3350      	adds	r3, #80	; 0x50
 8001f30:	4618      	mov	r0, r3
 8001f32:	f002 fb19 	bl	8004568 <pvPortMalloc>
 8001f36:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8001f38:	69bb      	ldr	r3, [r7, #24]
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d011      	beq.n	8001f62 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8001f3e:	69bb      	ldr	r3, [r7, #24]
 8001f40:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8001f42:	697b      	ldr	r3, [r7, #20]
 8001f44:	3350      	adds	r3, #80	; 0x50
 8001f46:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8001f48:	69bb      	ldr	r3, [r7, #24]
 8001f4a:	2200      	movs	r2, #0
 8001f4c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8001f50:	79fa      	ldrb	r2, [r7, #7]
 8001f52:	69bb      	ldr	r3, [r7, #24]
 8001f54:	9300      	str	r3, [sp, #0]
 8001f56:	4613      	mov	r3, r2
 8001f58:	697a      	ldr	r2, [r7, #20]
 8001f5a:	68b9      	ldr	r1, [r7, #8]
 8001f5c:	68f8      	ldr	r0, [r7, #12]
 8001f5e:	f000 f805 	bl	8001f6c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8001f62:	69bb      	ldr	r3, [r7, #24]
	}
 8001f64:	4618      	mov	r0, r3
 8001f66:	3720      	adds	r7, #32
 8001f68:	46bd      	mov	sp, r7
 8001f6a:	bd80      	pop	{r7, pc}

08001f6c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8001f6c:	b580      	push	{r7, lr}
 8001f6e:	b084      	sub	sp, #16
 8001f70:	af00      	add	r7, sp, #0
 8001f72:	60f8      	str	r0, [r7, #12]
 8001f74:	60b9      	str	r1, [r7, #8]
 8001f76:	607a      	str	r2, [r7, #4]
 8001f78:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8001f7a:	68bb      	ldr	r3, [r7, #8]
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d103      	bne.n	8001f88 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8001f80:	69bb      	ldr	r3, [r7, #24]
 8001f82:	69ba      	ldr	r2, [r7, #24]
 8001f84:	601a      	str	r2, [r3, #0]
 8001f86:	e002      	b.n	8001f8e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8001f88:	69bb      	ldr	r3, [r7, #24]
 8001f8a:	687a      	ldr	r2, [r7, #4]
 8001f8c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8001f8e:	69bb      	ldr	r3, [r7, #24]
 8001f90:	68fa      	ldr	r2, [r7, #12]
 8001f92:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8001f94:	69bb      	ldr	r3, [r7, #24]
 8001f96:	68ba      	ldr	r2, [r7, #8]
 8001f98:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8001f9a:	2101      	movs	r1, #1
 8001f9c:	69b8      	ldr	r0, [r7, #24]
 8001f9e:	f7ff fecb 	bl	8001d38 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8001fa2:	69bb      	ldr	r3, [r7, #24]
 8001fa4:	78fa      	ldrb	r2, [r7, #3]
 8001fa6:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8001faa:	bf00      	nop
 8001fac:	3710      	adds	r7, #16
 8001fae:	46bd      	mov	sp, r7
 8001fb0:	bd80      	pop	{r7, pc}

08001fb2 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8001fb2:	b580      	push	{r7, lr}
 8001fb4:	b082      	sub	sp, #8
 8001fb6:	af00      	add	r7, sp, #0
 8001fb8:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d00e      	beq.n	8001fde <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	2200      	movs	r2, #0
 8001fc4:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	2200      	movs	r2, #0
 8001fca:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	2200      	movs	r2, #0
 8001fd0:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8001fd2:	2300      	movs	r3, #0
 8001fd4:	2200      	movs	r2, #0
 8001fd6:	2100      	movs	r1, #0
 8001fd8:	6878      	ldr	r0, [r7, #4]
 8001fda:	f000 f81d 	bl	8002018 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8001fde:	bf00      	nop
 8001fe0:	3708      	adds	r7, #8
 8001fe2:	46bd      	mov	sp, r7
 8001fe4:	bd80      	pop	{r7, pc}

08001fe6 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8001fe6:	b580      	push	{r7, lr}
 8001fe8:	b086      	sub	sp, #24
 8001fea:	af00      	add	r7, sp, #0
 8001fec:	4603      	mov	r3, r0
 8001fee:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8001ff0:	2301      	movs	r3, #1
 8001ff2:	617b      	str	r3, [r7, #20]
 8001ff4:	2300      	movs	r3, #0
 8001ff6:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8001ff8:	79fb      	ldrb	r3, [r7, #7]
 8001ffa:	461a      	mov	r2, r3
 8001ffc:	6939      	ldr	r1, [r7, #16]
 8001ffe:	6978      	ldr	r0, [r7, #20]
 8002000:	f7ff ff7a 	bl	8001ef8 <xQueueGenericCreate>
 8002004:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8002006:	68f8      	ldr	r0, [r7, #12]
 8002008:	f7ff ffd3 	bl	8001fb2 <prvInitialiseMutex>

		return xNewQueue;
 800200c:	68fb      	ldr	r3, [r7, #12]
	}
 800200e:	4618      	mov	r0, r3
 8002010:	3718      	adds	r7, #24
 8002012:	46bd      	mov	sp, r7
 8002014:	bd80      	pop	{r7, pc}
	...

08002018 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8002018:	b580      	push	{r7, lr}
 800201a:	b08e      	sub	sp, #56	; 0x38
 800201c:	af00      	add	r7, sp, #0
 800201e:	60f8      	str	r0, [r7, #12]
 8002020:	60b9      	str	r1, [r7, #8]
 8002022:	607a      	str	r2, [r7, #4]
 8002024:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8002026:	2300      	movs	r3, #0
 8002028:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800202e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002030:	2b00      	cmp	r3, #0
 8002032:	d10a      	bne.n	800204a <xQueueGenericSend+0x32>
	__asm volatile
 8002034:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002038:	f383 8811 	msr	BASEPRI, r3
 800203c:	f3bf 8f6f 	isb	sy
 8002040:	f3bf 8f4f 	dsb	sy
 8002044:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8002046:	bf00      	nop
 8002048:	e7fe      	b.n	8002048 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800204a:	68bb      	ldr	r3, [r7, #8]
 800204c:	2b00      	cmp	r3, #0
 800204e:	d103      	bne.n	8002058 <xQueueGenericSend+0x40>
 8002050:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002052:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002054:	2b00      	cmp	r3, #0
 8002056:	d101      	bne.n	800205c <xQueueGenericSend+0x44>
 8002058:	2301      	movs	r3, #1
 800205a:	e000      	b.n	800205e <xQueueGenericSend+0x46>
 800205c:	2300      	movs	r3, #0
 800205e:	2b00      	cmp	r3, #0
 8002060:	d10a      	bne.n	8002078 <xQueueGenericSend+0x60>
	__asm volatile
 8002062:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002066:	f383 8811 	msr	BASEPRI, r3
 800206a:	f3bf 8f6f 	isb	sy
 800206e:	f3bf 8f4f 	dsb	sy
 8002072:	627b      	str	r3, [r7, #36]	; 0x24
}
 8002074:	bf00      	nop
 8002076:	e7fe      	b.n	8002076 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002078:	683b      	ldr	r3, [r7, #0]
 800207a:	2b02      	cmp	r3, #2
 800207c:	d103      	bne.n	8002086 <xQueueGenericSend+0x6e>
 800207e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002080:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002082:	2b01      	cmp	r3, #1
 8002084:	d101      	bne.n	800208a <xQueueGenericSend+0x72>
 8002086:	2301      	movs	r3, #1
 8002088:	e000      	b.n	800208c <xQueueGenericSend+0x74>
 800208a:	2300      	movs	r3, #0
 800208c:	2b00      	cmp	r3, #0
 800208e:	d10a      	bne.n	80020a6 <xQueueGenericSend+0x8e>
	__asm volatile
 8002090:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002094:	f383 8811 	msr	BASEPRI, r3
 8002098:	f3bf 8f6f 	isb	sy
 800209c:	f3bf 8f4f 	dsb	sy
 80020a0:	623b      	str	r3, [r7, #32]
}
 80020a2:	bf00      	nop
 80020a4:	e7fe      	b.n	80020a4 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80020a6:	f001 fae1 	bl	800366c <xTaskGetSchedulerState>
 80020aa:	4603      	mov	r3, r0
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d102      	bne.n	80020b6 <xQueueGenericSend+0x9e>
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d101      	bne.n	80020ba <xQueueGenericSend+0xa2>
 80020b6:	2301      	movs	r3, #1
 80020b8:	e000      	b.n	80020bc <xQueueGenericSend+0xa4>
 80020ba:	2300      	movs	r3, #0
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d10a      	bne.n	80020d6 <xQueueGenericSend+0xbe>
	__asm volatile
 80020c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80020c4:	f383 8811 	msr	BASEPRI, r3
 80020c8:	f3bf 8f6f 	isb	sy
 80020cc:	f3bf 8f4f 	dsb	sy
 80020d0:	61fb      	str	r3, [r7, #28]
}
 80020d2:	bf00      	nop
 80020d4:	e7fe      	b.n	80020d4 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80020d6:	f002 f925 	bl	8004324 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80020da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80020dc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80020de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80020e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80020e2:	429a      	cmp	r2, r3
 80020e4:	d302      	bcc.n	80020ec <xQueueGenericSend+0xd4>
 80020e6:	683b      	ldr	r3, [r7, #0]
 80020e8:	2b02      	cmp	r3, #2
 80020ea:	d129      	bne.n	8002140 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80020ec:	683a      	ldr	r2, [r7, #0]
 80020ee:	68b9      	ldr	r1, [r7, #8]
 80020f0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80020f2:	f000 fb2f 	bl	8002754 <prvCopyDataToQueue>
 80020f6:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80020f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80020fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d010      	beq.n	8002122 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002100:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002102:	3324      	adds	r3, #36	; 0x24
 8002104:	4618      	mov	r0, r3
 8002106:	f001 f8f3 	bl	80032f0 <xTaskRemoveFromEventList>
 800210a:	4603      	mov	r3, r0
 800210c:	2b00      	cmp	r3, #0
 800210e:	d013      	beq.n	8002138 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8002110:	4b3f      	ldr	r3, [pc, #252]	; (8002210 <xQueueGenericSend+0x1f8>)
 8002112:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002116:	601a      	str	r2, [r3, #0]
 8002118:	f3bf 8f4f 	dsb	sy
 800211c:	f3bf 8f6f 	isb	sy
 8002120:	e00a      	b.n	8002138 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8002122:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002124:	2b00      	cmp	r3, #0
 8002126:	d007      	beq.n	8002138 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8002128:	4b39      	ldr	r3, [pc, #228]	; (8002210 <xQueueGenericSend+0x1f8>)
 800212a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800212e:	601a      	str	r2, [r3, #0]
 8002130:	f3bf 8f4f 	dsb	sy
 8002134:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8002138:	f002 f924 	bl	8004384 <vPortExitCritical>
				return pdPASS;
 800213c:	2301      	movs	r3, #1
 800213e:	e063      	b.n	8002208 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	2b00      	cmp	r3, #0
 8002144:	d103      	bne.n	800214e <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002146:	f002 f91d 	bl	8004384 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800214a:	2300      	movs	r3, #0
 800214c:	e05c      	b.n	8002208 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800214e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002150:	2b00      	cmp	r3, #0
 8002152:	d106      	bne.n	8002162 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002154:	f107 0314 	add.w	r3, r7, #20
 8002158:	4618      	mov	r0, r3
 800215a:	f001 f92d 	bl	80033b8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800215e:	2301      	movs	r3, #1
 8002160:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002162:	f002 f90f 	bl	8004384 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002166:	f000 fe9f 	bl	8002ea8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800216a:	f002 f8db 	bl	8004324 <vPortEnterCritical>
 800216e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002170:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002174:	b25b      	sxtb	r3, r3
 8002176:	f1b3 3fff 	cmp.w	r3, #4294967295
 800217a:	d103      	bne.n	8002184 <xQueueGenericSend+0x16c>
 800217c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800217e:	2200      	movs	r2, #0
 8002180:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002184:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002186:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800218a:	b25b      	sxtb	r3, r3
 800218c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002190:	d103      	bne.n	800219a <xQueueGenericSend+0x182>
 8002192:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002194:	2200      	movs	r2, #0
 8002196:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800219a:	f002 f8f3 	bl	8004384 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800219e:	1d3a      	adds	r2, r7, #4
 80021a0:	f107 0314 	add.w	r3, r7, #20
 80021a4:	4611      	mov	r1, r2
 80021a6:	4618      	mov	r0, r3
 80021a8:	f001 f91c 	bl	80033e4 <xTaskCheckForTimeOut>
 80021ac:	4603      	mov	r3, r0
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d124      	bne.n	80021fc <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80021b2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80021b4:	f000 fbc6 	bl	8002944 <prvIsQueueFull>
 80021b8:	4603      	mov	r3, r0
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d018      	beq.n	80021f0 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80021be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80021c0:	3310      	adds	r3, #16
 80021c2:	687a      	ldr	r2, [r7, #4]
 80021c4:	4611      	mov	r1, r2
 80021c6:	4618      	mov	r0, r3
 80021c8:	f001 f842 	bl	8003250 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80021cc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80021ce:	f000 fb51 	bl	8002874 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80021d2:	f000 fe77 	bl	8002ec4 <xTaskResumeAll>
 80021d6:	4603      	mov	r3, r0
 80021d8:	2b00      	cmp	r3, #0
 80021da:	f47f af7c 	bne.w	80020d6 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 80021de:	4b0c      	ldr	r3, [pc, #48]	; (8002210 <xQueueGenericSend+0x1f8>)
 80021e0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80021e4:	601a      	str	r2, [r3, #0]
 80021e6:	f3bf 8f4f 	dsb	sy
 80021ea:	f3bf 8f6f 	isb	sy
 80021ee:	e772      	b.n	80020d6 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80021f0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80021f2:	f000 fb3f 	bl	8002874 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80021f6:	f000 fe65 	bl	8002ec4 <xTaskResumeAll>
 80021fa:	e76c      	b.n	80020d6 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80021fc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80021fe:	f000 fb39 	bl	8002874 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002202:	f000 fe5f 	bl	8002ec4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8002206:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8002208:	4618      	mov	r0, r3
 800220a:	3738      	adds	r7, #56	; 0x38
 800220c:	46bd      	mov	sp, r7
 800220e:	bd80      	pop	{r7, pc}
 8002210:	e000ed04 	.word	0xe000ed04

08002214 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8002214:	b580      	push	{r7, lr}
 8002216:	b090      	sub	sp, #64	; 0x40
 8002218:	af00      	add	r7, sp, #0
 800221a:	60f8      	str	r0, [r7, #12]
 800221c:	60b9      	str	r1, [r7, #8]
 800221e:	607a      	str	r2, [r7, #4]
 8002220:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8002226:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002228:	2b00      	cmp	r3, #0
 800222a:	d10a      	bne.n	8002242 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800222c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002230:	f383 8811 	msr	BASEPRI, r3
 8002234:	f3bf 8f6f 	isb	sy
 8002238:	f3bf 8f4f 	dsb	sy
 800223c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800223e:	bf00      	nop
 8002240:	e7fe      	b.n	8002240 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002242:	68bb      	ldr	r3, [r7, #8]
 8002244:	2b00      	cmp	r3, #0
 8002246:	d103      	bne.n	8002250 <xQueueGenericSendFromISR+0x3c>
 8002248:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800224a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800224c:	2b00      	cmp	r3, #0
 800224e:	d101      	bne.n	8002254 <xQueueGenericSendFromISR+0x40>
 8002250:	2301      	movs	r3, #1
 8002252:	e000      	b.n	8002256 <xQueueGenericSendFromISR+0x42>
 8002254:	2300      	movs	r3, #0
 8002256:	2b00      	cmp	r3, #0
 8002258:	d10a      	bne.n	8002270 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800225a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800225e:	f383 8811 	msr	BASEPRI, r3
 8002262:	f3bf 8f6f 	isb	sy
 8002266:	f3bf 8f4f 	dsb	sy
 800226a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800226c:	bf00      	nop
 800226e:	e7fe      	b.n	800226e <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002270:	683b      	ldr	r3, [r7, #0]
 8002272:	2b02      	cmp	r3, #2
 8002274:	d103      	bne.n	800227e <xQueueGenericSendFromISR+0x6a>
 8002276:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002278:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800227a:	2b01      	cmp	r3, #1
 800227c:	d101      	bne.n	8002282 <xQueueGenericSendFromISR+0x6e>
 800227e:	2301      	movs	r3, #1
 8002280:	e000      	b.n	8002284 <xQueueGenericSendFromISR+0x70>
 8002282:	2300      	movs	r3, #0
 8002284:	2b00      	cmp	r3, #0
 8002286:	d10a      	bne.n	800229e <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8002288:	f04f 0350 	mov.w	r3, #80	; 0x50
 800228c:	f383 8811 	msr	BASEPRI, r3
 8002290:	f3bf 8f6f 	isb	sy
 8002294:	f3bf 8f4f 	dsb	sy
 8002298:	623b      	str	r3, [r7, #32]
}
 800229a:	bf00      	nop
 800229c:	e7fe      	b.n	800229c <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800229e:	f002 f923 	bl	80044e8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80022a2:	f3ef 8211 	mrs	r2, BASEPRI
 80022a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80022aa:	f383 8811 	msr	BASEPRI, r3
 80022ae:	f3bf 8f6f 	isb	sy
 80022b2:	f3bf 8f4f 	dsb	sy
 80022b6:	61fa      	str	r2, [r7, #28]
 80022b8:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80022ba:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80022bc:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80022be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80022c0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80022c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80022c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80022c6:	429a      	cmp	r2, r3
 80022c8:	d302      	bcc.n	80022d0 <xQueueGenericSendFromISR+0xbc>
 80022ca:	683b      	ldr	r3, [r7, #0]
 80022cc:	2b02      	cmp	r3, #2
 80022ce:	d12f      	bne.n	8002330 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80022d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80022d2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80022d6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80022da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80022dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022de:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80022e0:	683a      	ldr	r2, [r7, #0]
 80022e2:	68b9      	ldr	r1, [r7, #8]
 80022e4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80022e6:	f000 fa35 	bl	8002754 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80022ea:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 80022ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80022f2:	d112      	bne.n	800231a <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80022f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80022f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d016      	beq.n	800232a <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80022fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80022fe:	3324      	adds	r3, #36	; 0x24
 8002300:	4618      	mov	r0, r3
 8002302:	f000 fff5 	bl	80032f0 <xTaskRemoveFromEventList>
 8002306:	4603      	mov	r3, r0
 8002308:	2b00      	cmp	r3, #0
 800230a:	d00e      	beq.n	800232a <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	2b00      	cmp	r3, #0
 8002310:	d00b      	beq.n	800232a <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	2201      	movs	r2, #1
 8002316:	601a      	str	r2, [r3, #0]
 8002318:	e007      	b.n	800232a <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800231a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800231e:	3301      	adds	r3, #1
 8002320:	b2db      	uxtb	r3, r3
 8002322:	b25a      	sxtb	r2, r3
 8002324:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002326:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800232a:	2301      	movs	r3, #1
 800232c:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800232e:	e001      	b.n	8002334 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8002330:	2300      	movs	r3, #0
 8002332:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002334:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002336:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8002338:	697b      	ldr	r3, [r7, #20]
 800233a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800233e:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8002340:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8002342:	4618      	mov	r0, r3
 8002344:	3740      	adds	r7, #64	; 0x40
 8002346:	46bd      	mov	sp, r7
 8002348:	bd80      	pop	{r7, pc}
	...

0800234c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800234c:	b580      	push	{r7, lr}
 800234e:	b08c      	sub	sp, #48	; 0x30
 8002350:	af00      	add	r7, sp, #0
 8002352:	60f8      	str	r0, [r7, #12]
 8002354:	60b9      	str	r1, [r7, #8]
 8002356:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8002358:	2300      	movs	r3, #0
 800235a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8002360:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002362:	2b00      	cmp	r3, #0
 8002364:	d10a      	bne.n	800237c <xQueueReceive+0x30>
	__asm volatile
 8002366:	f04f 0350 	mov.w	r3, #80	; 0x50
 800236a:	f383 8811 	msr	BASEPRI, r3
 800236e:	f3bf 8f6f 	isb	sy
 8002372:	f3bf 8f4f 	dsb	sy
 8002376:	623b      	str	r3, [r7, #32]
}
 8002378:	bf00      	nop
 800237a:	e7fe      	b.n	800237a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800237c:	68bb      	ldr	r3, [r7, #8]
 800237e:	2b00      	cmp	r3, #0
 8002380:	d103      	bne.n	800238a <xQueueReceive+0x3e>
 8002382:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002384:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002386:	2b00      	cmp	r3, #0
 8002388:	d101      	bne.n	800238e <xQueueReceive+0x42>
 800238a:	2301      	movs	r3, #1
 800238c:	e000      	b.n	8002390 <xQueueReceive+0x44>
 800238e:	2300      	movs	r3, #0
 8002390:	2b00      	cmp	r3, #0
 8002392:	d10a      	bne.n	80023aa <xQueueReceive+0x5e>
	__asm volatile
 8002394:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002398:	f383 8811 	msr	BASEPRI, r3
 800239c:	f3bf 8f6f 	isb	sy
 80023a0:	f3bf 8f4f 	dsb	sy
 80023a4:	61fb      	str	r3, [r7, #28]
}
 80023a6:	bf00      	nop
 80023a8:	e7fe      	b.n	80023a8 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80023aa:	f001 f95f 	bl	800366c <xTaskGetSchedulerState>
 80023ae:	4603      	mov	r3, r0
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d102      	bne.n	80023ba <xQueueReceive+0x6e>
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d101      	bne.n	80023be <xQueueReceive+0x72>
 80023ba:	2301      	movs	r3, #1
 80023bc:	e000      	b.n	80023c0 <xQueueReceive+0x74>
 80023be:	2300      	movs	r3, #0
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d10a      	bne.n	80023da <xQueueReceive+0x8e>
	__asm volatile
 80023c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80023c8:	f383 8811 	msr	BASEPRI, r3
 80023cc:	f3bf 8f6f 	isb	sy
 80023d0:	f3bf 8f4f 	dsb	sy
 80023d4:	61bb      	str	r3, [r7, #24]
}
 80023d6:	bf00      	nop
 80023d8:	e7fe      	b.n	80023d8 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80023da:	f001 ffa3 	bl	8004324 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80023de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023e2:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80023e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d01f      	beq.n	800242a <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80023ea:	68b9      	ldr	r1, [r7, #8]
 80023ec:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80023ee:	f000 fa1b 	bl	8002828 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80023f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023f4:	1e5a      	subs	r2, r3, #1
 80023f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023f8:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80023fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023fc:	691b      	ldr	r3, [r3, #16]
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d00f      	beq.n	8002422 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002402:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002404:	3310      	adds	r3, #16
 8002406:	4618      	mov	r0, r3
 8002408:	f000 ff72 	bl	80032f0 <xTaskRemoveFromEventList>
 800240c:	4603      	mov	r3, r0
 800240e:	2b00      	cmp	r3, #0
 8002410:	d007      	beq.n	8002422 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8002412:	4b3d      	ldr	r3, [pc, #244]	; (8002508 <xQueueReceive+0x1bc>)
 8002414:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002418:	601a      	str	r2, [r3, #0]
 800241a:	f3bf 8f4f 	dsb	sy
 800241e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8002422:	f001 ffaf 	bl	8004384 <vPortExitCritical>
				return pdPASS;
 8002426:	2301      	movs	r3, #1
 8002428:	e069      	b.n	80024fe <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	2b00      	cmp	r3, #0
 800242e:	d103      	bne.n	8002438 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002430:	f001 ffa8 	bl	8004384 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8002434:	2300      	movs	r3, #0
 8002436:	e062      	b.n	80024fe <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002438:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800243a:	2b00      	cmp	r3, #0
 800243c:	d106      	bne.n	800244c <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800243e:	f107 0310 	add.w	r3, r7, #16
 8002442:	4618      	mov	r0, r3
 8002444:	f000 ffb8 	bl	80033b8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002448:	2301      	movs	r3, #1
 800244a:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800244c:	f001 ff9a 	bl	8004384 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002450:	f000 fd2a 	bl	8002ea8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002454:	f001 ff66 	bl	8004324 <vPortEnterCritical>
 8002458:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800245a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800245e:	b25b      	sxtb	r3, r3
 8002460:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002464:	d103      	bne.n	800246e <xQueueReceive+0x122>
 8002466:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002468:	2200      	movs	r2, #0
 800246a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800246e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002470:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002474:	b25b      	sxtb	r3, r3
 8002476:	f1b3 3fff 	cmp.w	r3, #4294967295
 800247a:	d103      	bne.n	8002484 <xQueueReceive+0x138>
 800247c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800247e:	2200      	movs	r2, #0
 8002480:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002484:	f001 ff7e 	bl	8004384 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002488:	1d3a      	adds	r2, r7, #4
 800248a:	f107 0310 	add.w	r3, r7, #16
 800248e:	4611      	mov	r1, r2
 8002490:	4618      	mov	r0, r3
 8002492:	f000 ffa7 	bl	80033e4 <xTaskCheckForTimeOut>
 8002496:	4603      	mov	r3, r0
 8002498:	2b00      	cmp	r3, #0
 800249a:	d123      	bne.n	80024e4 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800249c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800249e:	f000 fa3b 	bl	8002918 <prvIsQueueEmpty>
 80024a2:	4603      	mov	r3, r0
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d017      	beq.n	80024d8 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80024a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024aa:	3324      	adds	r3, #36	; 0x24
 80024ac:	687a      	ldr	r2, [r7, #4]
 80024ae:	4611      	mov	r1, r2
 80024b0:	4618      	mov	r0, r3
 80024b2:	f000 fecd 	bl	8003250 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80024b6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80024b8:	f000 f9dc 	bl	8002874 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80024bc:	f000 fd02 	bl	8002ec4 <xTaskResumeAll>
 80024c0:	4603      	mov	r3, r0
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d189      	bne.n	80023da <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 80024c6:	4b10      	ldr	r3, [pc, #64]	; (8002508 <xQueueReceive+0x1bc>)
 80024c8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80024cc:	601a      	str	r2, [r3, #0]
 80024ce:	f3bf 8f4f 	dsb	sy
 80024d2:	f3bf 8f6f 	isb	sy
 80024d6:	e780      	b.n	80023da <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80024d8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80024da:	f000 f9cb 	bl	8002874 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80024de:	f000 fcf1 	bl	8002ec4 <xTaskResumeAll>
 80024e2:	e77a      	b.n	80023da <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80024e4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80024e6:	f000 f9c5 	bl	8002874 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80024ea:	f000 fceb 	bl	8002ec4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80024ee:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80024f0:	f000 fa12 	bl	8002918 <prvIsQueueEmpty>
 80024f4:	4603      	mov	r3, r0
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	f43f af6f 	beq.w	80023da <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80024fc:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80024fe:	4618      	mov	r0, r3
 8002500:	3730      	adds	r7, #48	; 0x30
 8002502:	46bd      	mov	sp, r7
 8002504:	bd80      	pop	{r7, pc}
 8002506:	bf00      	nop
 8002508:	e000ed04 	.word	0xe000ed04

0800250c <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800250c:	b580      	push	{r7, lr}
 800250e:	b08e      	sub	sp, #56	; 0x38
 8002510:	af00      	add	r7, sp, #0
 8002512:	6078      	str	r0, [r7, #4]
 8002514:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8002516:	2300      	movs	r3, #0
 8002518:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800251e:	2300      	movs	r3, #0
 8002520:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8002522:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002524:	2b00      	cmp	r3, #0
 8002526:	d10a      	bne.n	800253e <xQueueSemaphoreTake+0x32>
	__asm volatile
 8002528:	f04f 0350 	mov.w	r3, #80	; 0x50
 800252c:	f383 8811 	msr	BASEPRI, r3
 8002530:	f3bf 8f6f 	isb	sy
 8002534:	f3bf 8f4f 	dsb	sy
 8002538:	623b      	str	r3, [r7, #32]
}
 800253a:	bf00      	nop
 800253c:	e7fe      	b.n	800253c <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800253e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002540:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002542:	2b00      	cmp	r3, #0
 8002544:	d00a      	beq.n	800255c <xQueueSemaphoreTake+0x50>
	__asm volatile
 8002546:	f04f 0350 	mov.w	r3, #80	; 0x50
 800254a:	f383 8811 	msr	BASEPRI, r3
 800254e:	f3bf 8f6f 	isb	sy
 8002552:	f3bf 8f4f 	dsb	sy
 8002556:	61fb      	str	r3, [r7, #28]
}
 8002558:	bf00      	nop
 800255a:	e7fe      	b.n	800255a <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800255c:	f001 f886 	bl	800366c <xTaskGetSchedulerState>
 8002560:	4603      	mov	r3, r0
 8002562:	2b00      	cmp	r3, #0
 8002564:	d102      	bne.n	800256c <xQueueSemaphoreTake+0x60>
 8002566:	683b      	ldr	r3, [r7, #0]
 8002568:	2b00      	cmp	r3, #0
 800256a:	d101      	bne.n	8002570 <xQueueSemaphoreTake+0x64>
 800256c:	2301      	movs	r3, #1
 800256e:	e000      	b.n	8002572 <xQueueSemaphoreTake+0x66>
 8002570:	2300      	movs	r3, #0
 8002572:	2b00      	cmp	r3, #0
 8002574:	d10a      	bne.n	800258c <xQueueSemaphoreTake+0x80>
	__asm volatile
 8002576:	f04f 0350 	mov.w	r3, #80	; 0x50
 800257a:	f383 8811 	msr	BASEPRI, r3
 800257e:	f3bf 8f6f 	isb	sy
 8002582:	f3bf 8f4f 	dsb	sy
 8002586:	61bb      	str	r3, [r7, #24]
}
 8002588:	bf00      	nop
 800258a:	e7fe      	b.n	800258a <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800258c:	f001 feca 	bl	8004324 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8002590:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002592:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002594:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8002596:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002598:	2b00      	cmp	r3, #0
 800259a:	d024      	beq.n	80025e6 <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800259c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800259e:	1e5a      	subs	r2, r3, #1
 80025a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025a2:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80025a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d104      	bne.n	80025b6 <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 80025ac:	f001 f9d4 	bl	8003958 <pvTaskIncrementMutexHeldCount>
 80025b0:	4602      	mov	r2, r0
 80025b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025b4:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80025b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025b8:	691b      	ldr	r3, [r3, #16]
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d00f      	beq.n	80025de <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80025be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025c0:	3310      	adds	r3, #16
 80025c2:	4618      	mov	r0, r3
 80025c4:	f000 fe94 	bl	80032f0 <xTaskRemoveFromEventList>
 80025c8:	4603      	mov	r3, r0
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d007      	beq.n	80025de <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80025ce:	4b54      	ldr	r3, [pc, #336]	; (8002720 <xQueueSemaphoreTake+0x214>)
 80025d0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80025d4:	601a      	str	r2, [r3, #0]
 80025d6:	f3bf 8f4f 	dsb	sy
 80025da:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80025de:	f001 fed1 	bl	8004384 <vPortExitCritical>
				return pdPASS;
 80025e2:	2301      	movs	r3, #1
 80025e4:	e097      	b.n	8002716 <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80025e6:	683b      	ldr	r3, [r7, #0]
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d111      	bne.n	8002610 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 80025ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d00a      	beq.n	8002608 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 80025f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80025f6:	f383 8811 	msr	BASEPRI, r3
 80025fa:	f3bf 8f6f 	isb	sy
 80025fe:	f3bf 8f4f 	dsb	sy
 8002602:	617b      	str	r3, [r7, #20]
}
 8002604:	bf00      	nop
 8002606:	e7fe      	b.n	8002606 <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8002608:	f001 febc 	bl	8004384 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800260c:	2300      	movs	r3, #0
 800260e:	e082      	b.n	8002716 <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002610:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002612:	2b00      	cmp	r3, #0
 8002614:	d106      	bne.n	8002624 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002616:	f107 030c 	add.w	r3, r7, #12
 800261a:	4618      	mov	r0, r3
 800261c:	f000 fecc 	bl	80033b8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002620:	2301      	movs	r3, #1
 8002622:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002624:	f001 feae 	bl	8004384 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002628:	f000 fc3e 	bl	8002ea8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800262c:	f001 fe7a 	bl	8004324 <vPortEnterCritical>
 8002630:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002632:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002636:	b25b      	sxtb	r3, r3
 8002638:	f1b3 3fff 	cmp.w	r3, #4294967295
 800263c:	d103      	bne.n	8002646 <xQueueSemaphoreTake+0x13a>
 800263e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002640:	2200      	movs	r2, #0
 8002642:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002646:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002648:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800264c:	b25b      	sxtb	r3, r3
 800264e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002652:	d103      	bne.n	800265c <xQueueSemaphoreTake+0x150>
 8002654:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002656:	2200      	movs	r2, #0
 8002658:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800265c:	f001 fe92 	bl	8004384 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002660:	463a      	mov	r2, r7
 8002662:	f107 030c 	add.w	r3, r7, #12
 8002666:	4611      	mov	r1, r2
 8002668:	4618      	mov	r0, r3
 800266a:	f000 febb 	bl	80033e4 <xTaskCheckForTimeOut>
 800266e:	4603      	mov	r3, r0
 8002670:	2b00      	cmp	r3, #0
 8002672:	d132      	bne.n	80026da <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002674:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002676:	f000 f94f 	bl	8002918 <prvIsQueueEmpty>
 800267a:	4603      	mov	r3, r0
 800267c:	2b00      	cmp	r3, #0
 800267e:	d026      	beq.n	80026ce <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002680:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	2b00      	cmp	r3, #0
 8002686:	d109      	bne.n	800269c <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 8002688:	f001 fe4c 	bl	8004324 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800268c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800268e:	689b      	ldr	r3, [r3, #8]
 8002690:	4618      	mov	r0, r3
 8002692:	f001 f809 	bl	80036a8 <xTaskPriorityInherit>
 8002696:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8002698:	f001 fe74 	bl	8004384 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800269c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800269e:	3324      	adds	r3, #36	; 0x24
 80026a0:	683a      	ldr	r2, [r7, #0]
 80026a2:	4611      	mov	r1, r2
 80026a4:	4618      	mov	r0, r3
 80026a6:	f000 fdd3 	bl	8003250 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80026aa:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80026ac:	f000 f8e2 	bl	8002874 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80026b0:	f000 fc08 	bl	8002ec4 <xTaskResumeAll>
 80026b4:	4603      	mov	r3, r0
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	f47f af68 	bne.w	800258c <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 80026bc:	4b18      	ldr	r3, [pc, #96]	; (8002720 <xQueueSemaphoreTake+0x214>)
 80026be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80026c2:	601a      	str	r2, [r3, #0]
 80026c4:	f3bf 8f4f 	dsb	sy
 80026c8:	f3bf 8f6f 	isb	sy
 80026cc:	e75e      	b.n	800258c <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 80026ce:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80026d0:	f000 f8d0 	bl	8002874 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80026d4:	f000 fbf6 	bl	8002ec4 <xTaskResumeAll>
 80026d8:	e758      	b.n	800258c <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 80026da:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80026dc:	f000 f8ca 	bl	8002874 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80026e0:	f000 fbf0 	bl	8002ec4 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80026e4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80026e6:	f000 f917 	bl	8002918 <prvIsQueueEmpty>
 80026ea:	4603      	mov	r3, r0
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	f43f af4d 	beq.w	800258c <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 80026f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d00d      	beq.n	8002714 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 80026f8:	f001 fe14 	bl	8004324 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 80026fc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80026fe:	f000 f811 	bl	8002724 <prvGetDisinheritPriorityAfterTimeout>
 8002702:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8002704:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002706:	689b      	ldr	r3, [r3, #8]
 8002708:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800270a:	4618      	mov	r0, r3
 800270c:	f001 f8a2 	bl	8003854 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8002710:	f001 fe38 	bl	8004384 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8002714:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8002716:	4618      	mov	r0, r3
 8002718:	3738      	adds	r7, #56	; 0x38
 800271a:	46bd      	mov	sp, r7
 800271c:	bd80      	pop	{r7, pc}
 800271e:	bf00      	nop
 8002720:	e000ed04 	.word	0xe000ed04

08002724 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8002724:	b480      	push	{r7}
 8002726:	b085      	sub	sp, #20
 8002728:	af00      	add	r7, sp, #0
 800272a:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002730:	2b00      	cmp	r3, #0
 8002732:	d006      	beq.n	8002742 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 800273e:	60fb      	str	r3, [r7, #12]
 8002740:	e001      	b.n	8002746 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8002742:	2300      	movs	r3, #0
 8002744:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8002746:	68fb      	ldr	r3, [r7, #12]
	}
 8002748:	4618      	mov	r0, r3
 800274a:	3714      	adds	r7, #20
 800274c:	46bd      	mov	sp, r7
 800274e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002752:	4770      	bx	lr

08002754 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8002754:	b580      	push	{r7, lr}
 8002756:	b086      	sub	sp, #24
 8002758:	af00      	add	r7, sp, #0
 800275a:	60f8      	str	r0, [r7, #12]
 800275c:	60b9      	str	r1, [r7, #8]
 800275e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8002760:	2300      	movs	r3, #0
 8002762:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002768:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800276e:	2b00      	cmp	r3, #0
 8002770:	d10d      	bne.n	800278e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	2b00      	cmp	r3, #0
 8002778:	d14d      	bne.n	8002816 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	689b      	ldr	r3, [r3, #8]
 800277e:	4618      	mov	r0, r3
 8002780:	f000 fffa 	bl	8003778 <xTaskPriorityDisinherit>
 8002784:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	2200      	movs	r2, #0
 800278a:	609a      	str	r2, [r3, #8]
 800278c:	e043      	b.n	8002816 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	2b00      	cmp	r3, #0
 8002792:	d119      	bne.n	80027c8 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	6858      	ldr	r0, [r3, #4]
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800279c:	461a      	mov	r2, r3
 800279e:	68b9      	ldr	r1, [r7, #8]
 80027a0:	f002 f8f0 	bl	8004984 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	685a      	ldr	r2, [r3, #4]
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027ac:	441a      	add	r2, r3
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	685a      	ldr	r2, [r3, #4]
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	689b      	ldr	r3, [r3, #8]
 80027ba:	429a      	cmp	r2, r3
 80027bc:	d32b      	bcc.n	8002816 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	681a      	ldr	r2, [r3, #0]
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	605a      	str	r2, [r3, #4]
 80027c6:	e026      	b.n	8002816 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	68d8      	ldr	r0, [r3, #12]
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027d0:	461a      	mov	r2, r3
 80027d2:	68b9      	ldr	r1, [r7, #8]
 80027d4:	f002 f8d6 	bl	8004984 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	68da      	ldr	r2, [r3, #12]
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027e0:	425b      	negs	r3, r3
 80027e2:	441a      	add	r2, r3
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	68da      	ldr	r2, [r3, #12]
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	429a      	cmp	r2, r3
 80027f2:	d207      	bcs.n	8002804 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	689a      	ldr	r2, [r3, #8]
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027fc:	425b      	negs	r3, r3
 80027fe:	441a      	add	r2, r3
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	2b02      	cmp	r3, #2
 8002808:	d105      	bne.n	8002816 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800280a:	693b      	ldr	r3, [r7, #16]
 800280c:	2b00      	cmp	r3, #0
 800280e:	d002      	beq.n	8002816 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8002810:	693b      	ldr	r3, [r7, #16]
 8002812:	3b01      	subs	r3, #1
 8002814:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8002816:	693b      	ldr	r3, [r7, #16]
 8002818:	1c5a      	adds	r2, r3, #1
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800281e:	697b      	ldr	r3, [r7, #20]
}
 8002820:	4618      	mov	r0, r3
 8002822:	3718      	adds	r7, #24
 8002824:	46bd      	mov	sp, r7
 8002826:	bd80      	pop	{r7, pc}

08002828 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8002828:	b580      	push	{r7, lr}
 800282a:	b082      	sub	sp, #8
 800282c:	af00      	add	r7, sp, #0
 800282e:	6078      	str	r0, [r7, #4]
 8002830:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002836:	2b00      	cmp	r3, #0
 8002838:	d018      	beq.n	800286c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	68da      	ldr	r2, [r3, #12]
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002842:	441a      	add	r2, r3
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	68da      	ldr	r2, [r3, #12]
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	689b      	ldr	r3, [r3, #8]
 8002850:	429a      	cmp	r2, r3
 8002852:	d303      	bcc.n	800285c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681a      	ldr	r2, [r3, #0]
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	68d9      	ldr	r1, [r3, #12]
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002864:	461a      	mov	r2, r3
 8002866:	6838      	ldr	r0, [r7, #0]
 8002868:	f002 f88c 	bl	8004984 <memcpy>
	}
}
 800286c:	bf00      	nop
 800286e:	3708      	adds	r7, #8
 8002870:	46bd      	mov	sp, r7
 8002872:	bd80      	pop	{r7, pc}

08002874 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8002874:	b580      	push	{r7, lr}
 8002876:	b084      	sub	sp, #16
 8002878:	af00      	add	r7, sp, #0
 800287a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800287c:	f001 fd52 	bl	8004324 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002886:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8002888:	e011      	b.n	80028ae <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800288e:	2b00      	cmp	r3, #0
 8002890:	d012      	beq.n	80028b8 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	3324      	adds	r3, #36	; 0x24
 8002896:	4618      	mov	r0, r3
 8002898:	f000 fd2a 	bl	80032f0 <xTaskRemoveFromEventList>
 800289c:	4603      	mov	r3, r0
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d001      	beq.n	80028a6 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80028a2:	f000 fe01 	bl	80034a8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80028a6:	7bfb      	ldrb	r3, [r7, #15]
 80028a8:	3b01      	subs	r3, #1
 80028aa:	b2db      	uxtb	r3, r3
 80028ac:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80028ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	dce9      	bgt.n	800288a <prvUnlockQueue+0x16>
 80028b6:	e000      	b.n	80028ba <prvUnlockQueue+0x46>
					break;
 80028b8:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	22ff      	movs	r2, #255	; 0xff
 80028be:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80028c2:	f001 fd5f 	bl	8004384 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80028c6:	f001 fd2d 	bl	8004324 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80028d0:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80028d2:	e011      	b.n	80028f8 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	691b      	ldr	r3, [r3, #16]
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d012      	beq.n	8002902 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	3310      	adds	r3, #16
 80028e0:	4618      	mov	r0, r3
 80028e2:	f000 fd05 	bl	80032f0 <xTaskRemoveFromEventList>
 80028e6:	4603      	mov	r3, r0
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d001      	beq.n	80028f0 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80028ec:	f000 fddc 	bl	80034a8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80028f0:	7bbb      	ldrb	r3, [r7, #14]
 80028f2:	3b01      	subs	r3, #1
 80028f4:	b2db      	uxtb	r3, r3
 80028f6:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80028f8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	dce9      	bgt.n	80028d4 <prvUnlockQueue+0x60>
 8002900:	e000      	b.n	8002904 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8002902:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	22ff      	movs	r2, #255	; 0xff
 8002908:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800290c:	f001 fd3a 	bl	8004384 <vPortExitCritical>
}
 8002910:	bf00      	nop
 8002912:	3710      	adds	r7, #16
 8002914:	46bd      	mov	sp, r7
 8002916:	bd80      	pop	{r7, pc}

08002918 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8002918:	b580      	push	{r7, lr}
 800291a:	b084      	sub	sp, #16
 800291c:	af00      	add	r7, sp, #0
 800291e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8002920:	f001 fd00 	bl	8004324 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002928:	2b00      	cmp	r3, #0
 800292a:	d102      	bne.n	8002932 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800292c:	2301      	movs	r3, #1
 800292e:	60fb      	str	r3, [r7, #12]
 8002930:	e001      	b.n	8002936 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8002932:	2300      	movs	r3, #0
 8002934:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8002936:	f001 fd25 	bl	8004384 <vPortExitCritical>

	return xReturn;
 800293a:	68fb      	ldr	r3, [r7, #12]
}
 800293c:	4618      	mov	r0, r3
 800293e:	3710      	adds	r7, #16
 8002940:	46bd      	mov	sp, r7
 8002942:	bd80      	pop	{r7, pc}

08002944 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8002944:	b580      	push	{r7, lr}
 8002946:	b084      	sub	sp, #16
 8002948:	af00      	add	r7, sp, #0
 800294a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800294c:	f001 fcea 	bl	8004324 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002958:	429a      	cmp	r2, r3
 800295a:	d102      	bne.n	8002962 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800295c:	2301      	movs	r3, #1
 800295e:	60fb      	str	r3, [r7, #12]
 8002960:	e001      	b.n	8002966 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8002962:	2300      	movs	r3, #0
 8002964:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8002966:	f001 fd0d 	bl	8004384 <vPortExitCritical>

	return xReturn;
 800296a:	68fb      	ldr	r3, [r7, #12]
}
 800296c:	4618      	mov	r0, r3
 800296e:	3710      	adds	r7, #16
 8002970:	46bd      	mov	sp, r7
 8002972:	bd80      	pop	{r7, pc}

08002974 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8002974:	b480      	push	{r7}
 8002976:	b085      	sub	sp, #20
 8002978:	af00      	add	r7, sp, #0
 800297a:	6078      	str	r0, [r7, #4]
 800297c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800297e:	2300      	movs	r3, #0
 8002980:	60fb      	str	r3, [r7, #12]
 8002982:	e014      	b.n	80029ae <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8002984:	4a0f      	ldr	r2, [pc, #60]	; (80029c4 <vQueueAddToRegistry+0x50>)
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800298c:	2b00      	cmp	r3, #0
 800298e:	d10b      	bne.n	80029a8 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8002990:	490c      	ldr	r1, [pc, #48]	; (80029c4 <vQueueAddToRegistry+0x50>)
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	683a      	ldr	r2, [r7, #0]
 8002996:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800299a:	4a0a      	ldr	r2, [pc, #40]	; (80029c4 <vQueueAddToRegistry+0x50>)
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	00db      	lsls	r3, r3, #3
 80029a0:	4413      	add	r3, r2
 80029a2:	687a      	ldr	r2, [r7, #4]
 80029a4:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80029a6:	e006      	b.n	80029b6 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	3301      	adds	r3, #1
 80029ac:	60fb      	str	r3, [r7, #12]
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	2b07      	cmp	r3, #7
 80029b2:	d9e7      	bls.n	8002984 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80029b4:	bf00      	nop
 80029b6:	bf00      	nop
 80029b8:	3714      	adds	r7, #20
 80029ba:	46bd      	mov	sp, r7
 80029bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c0:	4770      	bx	lr
 80029c2:	bf00      	nop
 80029c4:	2000070c 	.word	0x2000070c

080029c8 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80029c8:	b580      	push	{r7, lr}
 80029ca:	b086      	sub	sp, #24
 80029cc:	af00      	add	r7, sp, #0
 80029ce:	60f8      	str	r0, [r7, #12]
 80029d0:	60b9      	str	r1, [r7, #8]
 80029d2:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80029d8:	f001 fca4 	bl	8004324 <vPortEnterCritical>
 80029dc:	697b      	ldr	r3, [r7, #20]
 80029de:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80029e2:	b25b      	sxtb	r3, r3
 80029e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80029e8:	d103      	bne.n	80029f2 <vQueueWaitForMessageRestricted+0x2a>
 80029ea:	697b      	ldr	r3, [r7, #20]
 80029ec:	2200      	movs	r2, #0
 80029ee:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80029f2:	697b      	ldr	r3, [r7, #20]
 80029f4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80029f8:	b25b      	sxtb	r3, r3
 80029fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80029fe:	d103      	bne.n	8002a08 <vQueueWaitForMessageRestricted+0x40>
 8002a00:	697b      	ldr	r3, [r7, #20]
 8002a02:	2200      	movs	r2, #0
 8002a04:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002a08:	f001 fcbc 	bl	8004384 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8002a0c:	697b      	ldr	r3, [r7, #20]
 8002a0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d106      	bne.n	8002a22 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8002a14:	697b      	ldr	r3, [r7, #20]
 8002a16:	3324      	adds	r3, #36	; 0x24
 8002a18:	687a      	ldr	r2, [r7, #4]
 8002a1a:	68b9      	ldr	r1, [r7, #8]
 8002a1c:	4618      	mov	r0, r3
 8002a1e:	f000 fc3b 	bl	8003298 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8002a22:	6978      	ldr	r0, [r7, #20]
 8002a24:	f7ff ff26 	bl	8002874 <prvUnlockQueue>
	}
 8002a28:	bf00      	nop
 8002a2a:	3718      	adds	r7, #24
 8002a2c:	46bd      	mov	sp, r7
 8002a2e:	bd80      	pop	{r7, pc}

08002a30 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8002a30:	b580      	push	{r7, lr}
 8002a32:	b08e      	sub	sp, #56	; 0x38
 8002a34:	af04      	add	r7, sp, #16
 8002a36:	60f8      	str	r0, [r7, #12]
 8002a38:	60b9      	str	r1, [r7, #8]
 8002a3a:	607a      	str	r2, [r7, #4]
 8002a3c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8002a3e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d10a      	bne.n	8002a5a <xTaskCreateStatic+0x2a>
	__asm volatile
 8002a44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a48:	f383 8811 	msr	BASEPRI, r3
 8002a4c:	f3bf 8f6f 	isb	sy
 8002a50:	f3bf 8f4f 	dsb	sy
 8002a54:	623b      	str	r3, [r7, #32]
}
 8002a56:	bf00      	nop
 8002a58:	e7fe      	b.n	8002a58 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8002a5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d10a      	bne.n	8002a76 <xTaskCreateStatic+0x46>
	__asm volatile
 8002a60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a64:	f383 8811 	msr	BASEPRI, r3
 8002a68:	f3bf 8f6f 	isb	sy
 8002a6c:	f3bf 8f4f 	dsb	sy
 8002a70:	61fb      	str	r3, [r7, #28]
}
 8002a72:	bf00      	nop
 8002a74:	e7fe      	b.n	8002a74 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8002a76:	235c      	movs	r3, #92	; 0x5c
 8002a78:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8002a7a:	693b      	ldr	r3, [r7, #16]
 8002a7c:	2b5c      	cmp	r3, #92	; 0x5c
 8002a7e:	d00a      	beq.n	8002a96 <xTaskCreateStatic+0x66>
	__asm volatile
 8002a80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a84:	f383 8811 	msr	BASEPRI, r3
 8002a88:	f3bf 8f6f 	isb	sy
 8002a8c:	f3bf 8f4f 	dsb	sy
 8002a90:	61bb      	str	r3, [r7, #24]
}
 8002a92:	bf00      	nop
 8002a94:	e7fe      	b.n	8002a94 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8002a96:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8002a98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d01e      	beq.n	8002adc <xTaskCreateStatic+0xac>
 8002a9e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d01b      	beq.n	8002adc <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002aa4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002aa6:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8002aa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002aaa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002aac:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8002aae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ab0:	2202      	movs	r2, #2
 8002ab2:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8002ab6:	2300      	movs	r3, #0
 8002ab8:	9303      	str	r3, [sp, #12]
 8002aba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002abc:	9302      	str	r3, [sp, #8]
 8002abe:	f107 0314 	add.w	r3, r7, #20
 8002ac2:	9301      	str	r3, [sp, #4]
 8002ac4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ac6:	9300      	str	r3, [sp, #0]
 8002ac8:	683b      	ldr	r3, [r7, #0]
 8002aca:	687a      	ldr	r2, [r7, #4]
 8002acc:	68b9      	ldr	r1, [r7, #8]
 8002ace:	68f8      	ldr	r0, [r7, #12]
 8002ad0:	f000 f850 	bl	8002b74 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8002ad4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002ad6:	f000 f8dd 	bl	8002c94 <prvAddNewTaskToReadyList>
 8002ada:	e001      	b.n	8002ae0 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8002adc:	2300      	movs	r3, #0
 8002ade:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8002ae0:	697b      	ldr	r3, [r7, #20]
	}
 8002ae2:	4618      	mov	r0, r3
 8002ae4:	3728      	adds	r7, #40	; 0x28
 8002ae6:	46bd      	mov	sp, r7
 8002ae8:	bd80      	pop	{r7, pc}

08002aea <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8002aea:	b580      	push	{r7, lr}
 8002aec:	b08c      	sub	sp, #48	; 0x30
 8002aee:	af04      	add	r7, sp, #16
 8002af0:	60f8      	str	r0, [r7, #12]
 8002af2:	60b9      	str	r1, [r7, #8]
 8002af4:	603b      	str	r3, [r7, #0]
 8002af6:	4613      	mov	r3, r2
 8002af8:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8002afa:	88fb      	ldrh	r3, [r7, #6]
 8002afc:	009b      	lsls	r3, r3, #2
 8002afe:	4618      	mov	r0, r3
 8002b00:	f001 fd32 	bl	8004568 <pvPortMalloc>
 8002b04:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8002b06:	697b      	ldr	r3, [r7, #20]
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d00e      	beq.n	8002b2a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8002b0c:	205c      	movs	r0, #92	; 0x5c
 8002b0e:	f001 fd2b 	bl	8004568 <pvPortMalloc>
 8002b12:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8002b14:	69fb      	ldr	r3, [r7, #28]
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d003      	beq.n	8002b22 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8002b1a:	69fb      	ldr	r3, [r7, #28]
 8002b1c:	697a      	ldr	r2, [r7, #20]
 8002b1e:	631a      	str	r2, [r3, #48]	; 0x30
 8002b20:	e005      	b.n	8002b2e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8002b22:	6978      	ldr	r0, [r7, #20]
 8002b24:	f001 fdec 	bl	8004700 <vPortFree>
 8002b28:	e001      	b.n	8002b2e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8002b2a:	2300      	movs	r3, #0
 8002b2c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8002b2e:	69fb      	ldr	r3, [r7, #28]
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d017      	beq.n	8002b64 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8002b34:	69fb      	ldr	r3, [r7, #28]
 8002b36:	2200      	movs	r2, #0
 8002b38:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8002b3c:	88fa      	ldrh	r2, [r7, #6]
 8002b3e:	2300      	movs	r3, #0
 8002b40:	9303      	str	r3, [sp, #12]
 8002b42:	69fb      	ldr	r3, [r7, #28]
 8002b44:	9302      	str	r3, [sp, #8]
 8002b46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b48:	9301      	str	r3, [sp, #4]
 8002b4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b4c:	9300      	str	r3, [sp, #0]
 8002b4e:	683b      	ldr	r3, [r7, #0]
 8002b50:	68b9      	ldr	r1, [r7, #8]
 8002b52:	68f8      	ldr	r0, [r7, #12]
 8002b54:	f000 f80e 	bl	8002b74 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8002b58:	69f8      	ldr	r0, [r7, #28]
 8002b5a:	f000 f89b 	bl	8002c94 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8002b5e:	2301      	movs	r3, #1
 8002b60:	61bb      	str	r3, [r7, #24]
 8002b62:	e002      	b.n	8002b6a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8002b64:	f04f 33ff 	mov.w	r3, #4294967295
 8002b68:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8002b6a:	69bb      	ldr	r3, [r7, #24]
	}
 8002b6c:	4618      	mov	r0, r3
 8002b6e:	3720      	adds	r7, #32
 8002b70:	46bd      	mov	sp, r7
 8002b72:	bd80      	pop	{r7, pc}

08002b74 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8002b74:	b580      	push	{r7, lr}
 8002b76:	b088      	sub	sp, #32
 8002b78:	af00      	add	r7, sp, #0
 8002b7a:	60f8      	str	r0, [r7, #12]
 8002b7c:	60b9      	str	r1, [r7, #8]
 8002b7e:	607a      	str	r2, [r7, #4]
 8002b80:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8002b82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b84:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	009b      	lsls	r3, r3, #2
 8002b8a:	461a      	mov	r2, r3
 8002b8c:	21a5      	movs	r1, #165	; 0xa5
 8002b8e:	f001 ff07 	bl	80049a0 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8002b92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b94:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002b9c:	3b01      	subs	r3, #1
 8002b9e:	009b      	lsls	r3, r3, #2
 8002ba0:	4413      	add	r3, r2
 8002ba2:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8002ba4:	69bb      	ldr	r3, [r7, #24]
 8002ba6:	f023 0307 	bic.w	r3, r3, #7
 8002baa:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8002bac:	69bb      	ldr	r3, [r7, #24]
 8002bae:	f003 0307 	and.w	r3, r3, #7
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d00a      	beq.n	8002bcc <prvInitialiseNewTask+0x58>
	__asm volatile
 8002bb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002bba:	f383 8811 	msr	BASEPRI, r3
 8002bbe:	f3bf 8f6f 	isb	sy
 8002bc2:	f3bf 8f4f 	dsb	sy
 8002bc6:	617b      	str	r3, [r7, #20]
}
 8002bc8:	bf00      	nop
 8002bca:	e7fe      	b.n	8002bca <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8002bcc:	68bb      	ldr	r3, [r7, #8]
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d01f      	beq.n	8002c12 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002bd2:	2300      	movs	r3, #0
 8002bd4:	61fb      	str	r3, [r7, #28]
 8002bd6:	e012      	b.n	8002bfe <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8002bd8:	68ba      	ldr	r2, [r7, #8]
 8002bda:	69fb      	ldr	r3, [r7, #28]
 8002bdc:	4413      	add	r3, r2
 8002bde:	7819      	ldrb	r1, [r3, #0]
 8002be0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002be2:	69fb      	ldr	r3, [r7, #28]
 8002be4:	4413      	add	r3, r2
 8002be6:	3334      	adds	r3, #52	; 0x34
 8002be8:	460a      	mov	r2, r1
 8002bea:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8002bec:	68ba      	ldr	r2, [r7, #8]
 8002bee:	69fb      	ldr	r3, [r7, #28]
 8002bf0:	4413      	add	r3, r2
 8002bf2:	781b      	ldrb	r3, [r3, #0]
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d006      	beq.n	8002c06 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002bf8:	69fb      	ldr	r3, [r7, #28]
 8002bfa:	3301      	adds	r3, #1
 8002bfc:	61fb      	str	r3, [r7, #28]
 8002bfe:	69fb      	ldr	r3, [r7, #28]
 8002c00:	2b0f      	cmp	r3, #15
 8002c02:	d9e9      	bls.n	8002bd8 <prvInitialiseNewTask+0x64>
 8002c04:	e000      	b.n	8002c08 <prvInitialiseNewTask+0x94>
			{
				break;
 8002c06:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8002c08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c0a:	2200      	movs	r2, #0
 8002c0c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002c10:	e003      	b.n	8002c1a <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8002c12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c14:	2200      	movs	r2, #0
 8002c16:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8002c1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c1c:	2b37      	cmp	r3, #55	; 0x37
 8002c1e:	d901      	bls.n	8002c24 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8002c20:	2337      	movs	r3, #55	; 0x37
 8002c22:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8002c24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c26:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002c28:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8002c2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c2c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002c2e:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8002c30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c32:	2200      	movs	r2, #0
 8002c34:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002c36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c38:	3304      	adds	r3, #4
 8002c3a:	4618      	mov	r0, r3
 8002c3c:	f7fe ffe8 	bl	8001c10 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8002c40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c42:	3318      	adds	r3, #24
 8002c44:	4618      	mov	r0, r3
 8002c46:	f7fe ffe3 	bl	8001c10 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8002c4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c4c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002c4e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002c50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c52:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8002c56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c58:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8002c5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c5c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002c5e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8002c60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c62:	2200      	movs	r2, #0
 8002c64:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8002c66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c68:	2200      	movs	r2, #0
 8002c6a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8002c6e:	683a      	ldr	r2, [r7, #0]
 8002c70:	68f9      	ldr	r1, [r7, #12]
 8002c72:	69b8      	ldr	r0, [r7, #24]
 8002c74:	f001 fa26 	bl	80040c4 <pxPortInitialiseStack>
 8002c78:	4602      	mov	r2, r0
 8002c7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c7c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8002c7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d002      	beq.n	8002c8a <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8002c84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c86:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002c88:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002c8a:	bf00      	nop
 8002c8c:	3720      	adds	r7, #32
 8002c8e:	46bd      	mov	sp, r7
 8002c90:	bd80      	pop	{r7, pc}
	...

08002c94 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8002c94:	b580      	push	{r7, lr}
 8002c96:	b082      	sub	sp, #8
 8002c98:	af00      	add	r7, sp, #0
 8002c9a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8002c9c:	f001 fb42 	bl	8004324 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8002ca0:	4b2d      	ldr	r3, [pc, #180]	; (8002d58 <prvAddNewTaskToReadyList+0xc4>)
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	3301      	adds	r3, #1
 8002ca6:	4a2c      	ldr	r2, [pc, #176]	; (8002d58 <prvAddNewTaskToReadyList+0xc4>)
 8002ca8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8002caa:	4b2c      	ldr	r3, [pc, #176]	; (8002d5c <prvAddNewTaskToReadyList+0xc8>)
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d109      	bne.n	8002cc6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8002cb2:	4a2a      	ldr	r2, [pc, #168]	; (8002d5c <prvAddNewTaskToReadyList+0xc8>)
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8002cb8:	4b27      	ldr	r3, [pc, #156]	; (8002d58 <prvAddNewTaskToReadyList+0xc4>)
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	2b01      	cmp	r3, #1
 8002cbe:	d110      	bne.n	8002ce2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8002cc0:	f000 fc16 	bl	80034f0 <prvInitialiseTaskLists>
 8002cc4:	e00d      	b.n	8002ce2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8002cc6:	4b26      	ldr	r3, [pc, #152]	; (8002d60 <prvAddNewTaskToReadyList+0xcc>)
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d109      	bne.n	8002ce2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8002cce:	4b23      	ldr	r3, [pc, #140]	; (8002d5c <prvAddNewTaskToReadyList+0xc8>)
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cd8:	429a      	cmp	r2, r3
 8002cda:	d802      	bhi.n	8002ce2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8002cdc:	4a1f      	ldr	r2, [pc, #124]	; (8002d5c <prvAddNewTaskToReadyList+0xc8>)
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8002ce2:	4b20      	ldr	r3, [pc, #128]	; (8002d64 <prvAddNewTaskToReadyList+0xd0>)
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	3301      	adds	r3, #1
 8002ce8:	4a1e      	ldr	r2, [pc, #120]	; (8002d64 <prvAddNewTaskToReadyList+0xd0>)
 8002cea:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8002cec:	4b1d      	ldr	r3, [pc, #116]	; (8002d64 <prvAddNewTaskToReadyList+0xd0>)
 8002cee:	681a      	ldr	r2, [r3, #0]
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002cf8:	4b1b      	ldr	r3, [pc, #108]	; (8002d68 <prvAddNewTaskToReadyList+0xd4>)
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	429a      	cmp	r2, r3
 8002cfe:	d903      	bls.n	8002d08 <prvAddNewTaskToReadyList+0x74>
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d04:	4a18      	ldr	r2, [pc, #96]	; (8002d68 <prvAddNewTaskToReadyList+0xd4>)
 8002d06:	6013      	str	r3, [r2, #0]
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002d0c:	4613      	mov	r3, r2
 8002d0e:	009b      	lsls	r3, r3, #2
 8002d10:	4413      	add	r3, r2
 8002d12:	009b      	lsls	r3, r3, #2
 8002d14:	4a15      	ldr	r2, [pc, #84]	; (8002d6c <prvAddNewTaskToReadyList+0xd8>)
 8002d16:	441a      	add	r2, r3
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	3304      	adds	r3, #4
 8002d1c:	4619      	mov	r1, r3
 8002d1e:	4610      	mov	r0, r2
 8002d20:	f7fe ff83 	bl	8001c2a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8002d24:	f001 fb2e 	bl	8004384 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8002d28:	4b0d      	ldr	r3, [pc, #52]	; (8002d60 <prvAddNewTaskToReadyList+0xcc>)
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d00e      	beq.n	8002d4e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8002d30:	4b0a      	ldr	r3, [pc, #40]	; (8002d5c <prvAddNewTaskToReadyList+0xc8>)
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d3a:	429a      	cmp	r2, r3
 8002d3c:	d207      	bcs.n	8002d4e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8002d3e:	4b0c      	ldr	r3, [pc, #48]	; (8002d70 <prvAddNewTaskToReadyList+0xdc>)
 8002d40:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002d44:	601a      	str	r2, [r3, #0]
 8002d46:	f3bf 8f4f 	dsb	sy
 8002d4a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002d4e:	bf00      	nop
 8002d50:	3708      	adds	r7, #8
 8002d52:	46bd      	mov	sp, r7
 8002d54:	bd80      	pop	{r7, pc}
 8002d56:	bf00      	nop
 8002d58:	20000c20 	.word	0x20000c20
 8002d5c:	2000074c 	.word	0x2000074c
 8002d60:	20000c2c 	.word	0x20000c2c
 8002d64:	20000c3c 	.word	0x20000c3c
 8002d68:	20000c28 	.word	0x20000c28
 8002d6c:	20000750 	.word	0x20000750
 8002d70:	e000ed04 	.word	0xe000ed04

08002d74 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8002d74:	b580      	push	{r7, lr}
 8002d76:	b084      	sub	sp, #16
 8002d78:	af00      	add	r7, sp, #0
 8002d7a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8002d7c:	2300      	movs	r3, #0
 8002d7e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d017      	beq.n	8002db6 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8002d86:	4b13      	ldr	r3, [pc, #76]	; (8002dd4 <vTaskDelay+0x60>)
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d00a      	beq.n	8002da4 <vTaskDelay+0x30>
	__asm volatile
 8002d8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d92:	f383 8811 	msr	BASEPRI, r3
 8002d96:	f3bf 8f6f 	isb	sy
 8002d9a:	f3bf 8f4f 	dsb	sy
 8002d9e:	60bb      	str	r3, [r7, #8]
}
 8002da0:	bf00      	nop
 8002da2:	e7fe      	b.n	8002da2 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8002da4:	f000 f880 	bl	8002ea8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8002da8:	2100      	movs	r1, #0
 8002daa:	6878      	ldr	r0, [r7, #4]
 8002dac:	f000 fde8 	bl	8003980 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8002db0:	f000 f888 	bl	8002ec4 <xTaskResumeAll>
 8002db4:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d107      	bne.n	8002dcc <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8002dbc:	4b06      	ldr	r3, [pc, #24]	; (8002dd8 <vTaskDelay+0x64>)
 8002dbe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002dc2:	601a      	str	r2, [r3, #0]
 8002dc4:	f3bf 8f4f 	dsb	sy
 8002dc8:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8002dcc:	bf00      	nop
 8002dce:	3710      	adds	r7, #16
 8002dd0:	46bd      	mov	sp, r7
 8002dd2:	bd80      	pop	{r7, pc}
 8002dd4:	20000c48 	.word	0x20000c48
 8002dd8:	e000ed04 	.word	0xe000ed04

08002ddc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8002ddc:	b580      	push	{r7, lr}
 8002dde:	b08a      	sub	sp, #40	; 0x28
 8002de0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8002de2:	2300      	movs	r3, #0
 8002de4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8002de6:	2300      	movs	r3, #0
 8002de8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8002dea:	463a      	mov	r2, r7
 8002dec:	1d39      	adds	r1, r7, #4
 8002dee:	f107 0308 	add.w	r3, r7, #8
 8002df2:	4618      	mov	r0, r3
 8002df4:	f7fe feb8 	bl	8001b68 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8002df8:	6839      	ldr	r1, [r7, #0]
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	68ba      	ldr	r2, [r7, #8]
 8002dfe:	9202      	str	r2, [sp, #8]
 8002e00:	9301      	str	r3, [sp, #4]
 8002e02:	2300      	movs	r3, #0
 8002e04:	9300      	str	r3, [sp, #0]
 8002e06:	2300      	movs	r3, #0
 8002e08:	460a      	mov	r2, r1
 8002e0a:	4921      	ldr	r1, [pc, #132]	; (8002e90 <vTaskStartScheduler+0xb4>)
 8002e0c:	4821      	ldr	r0, [pc, #132]	; (8002e94 <vTaskStartScheduler+0xb8>)
 8002e0e:	f7ff fe0f 	bl	8002a30 <xTaskCreateStatic>
 8002e12:	4603      	mov	r3, r0
 8002e14:	4a20      	ldr	r2, [pc, #128]	; (8002e98 <vTaskStartScheduler+0xbc>)
 8002e16:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8002e18:	4b1f      	ldr	r3, [pc, #124]	; (8002e98 <vTaskStartScheduler+0xbc>)
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d002      	beq.n	8002e26 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8002e20:	2301      	movs	r3, #1
 8002e22:	617b      	str	r3, [r7, #20]
 8002e24:	e001      	b.n	8002e2a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8002e26:	2300      	movs	r3, #0
 8002e28:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8002e2a:	697b      	ldr	r3, [r7, #20]
 8002e2c:	2b01      	cmp	r3, #1
 8002e2e:	d102      	bne.n	8002e36 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8002e30:	f000 fdfa 	bl	8003a28 <xTimerCreateTimerTask>
 8002e34:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8002e36:	697b      	ldr	r3, [r7, #20]
 8002e38:	2b01      	cmp	r3, #1
 8002e3a:	d116      	bne.n	8002e6a <vTaskStartScheduler+0x8e>
	__asm volatile
 8002e3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e40:	f383 8811 	msr	BASEPRI, r3
 8002e44:	f3bf 8f6f 	isb	sy
 8002e48:	f3bf 8f4f 	dsb	sy
 8002e4c:	613b      	str	r3, [r7, #16]
}
 8002e4e:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8002e50:	4b12      	ldr	r3, [pc, #72]	; (8002e9c <vTaskStartScheduler+0xc0>)
 8002e52:	f04f 32ff 	mov.w	r2, #4294967295
 8002e56:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8002e58:	4b11      	ldr	r3, [pc, #68]	; (8002ea0 <vTaskStartScheduler+0xc4>)
 8002e5a:	2201      	movs	r2, #1
 8002e5c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8002e5e:	4b11      	ldr	r3, [pc, #68]	; (8002ea4 <vTaskStartScheduler+0xc8>)
 8002e60:	2200      	movs	r2, #0
 8002e62:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8002e64:	f001 f9bc 	bl	80041e0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8002e68:	e00e      	b.n	8002e88 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8002e6a:	697b      	ldr	r3, [r7, #20]
 8002e6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e70:	d10a      	bne.n	8002e88 <vTaskStartScheduler+0xac>
	__asm volatile
 8002e72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e76:	f383 8811 	msr	BASEPRI, r3
 8002e7a:	f3bf 8f6f 	isb	sy
 8002e7e:	f3bf 8f4f 	dsb	sy
 8002e82:	60fb      	str	r3, [r7, #12]
}
 8002e84:	bf00      	nop
 8002e86:	e7fe      	b.n	8002e86 <vTaskStartScheduler+0xaa>
}
 8002e88:	bf00      	nop
 8002e8a:	3718      	adds	r7, #24
 8002e8c:	46bd      	mov	sp, r7
 8002e8e:	bd80      	pop	{r7, pc}
 8002e90:	080049e0 	.word	0x080049e0
 8002e94:	080034c1 	.word	0x080034c1
 8002e98:	20000c44 	.word	0x20000c44
 8002e9c:	20000c40 	.word	0x20000c40
 8002ea0:	20000c2c 	.word	0x20000c2c
 8002ea4:	20000c24 	.word	0x20000c24

08002ea8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8002ea8:	b480      	push	{r7}
 8002eaa:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8002eac:	4b04      	ldr	r3, [pc, #16]	; (8002ec0 <vTaskSuspendAll+0x18>)
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	3301      	adds	r3, #1
 8002eb2:	4a03      	ldr	r2, [pc, #12]	; (8002ec0 <vTaskSuspendAll+0x18>)
 8002eb4:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8002eb6:	bf00      	nop
 8002eb8:	46bd      	mov	sp, r7
 8002eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ebe:	4770      	bx	lr
 8002ec0:	20000c48 	.word	0x20000c48

08002ec4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8002ec4:	b580      	push	{r7, lr}
 8002ec6:	b084      	sub	sp, #16
 8002ec8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8002eca:	2300      	movs	r3, #0
 8002ecc:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8002ece:	2300      	movs	r3, #0
 8002ed0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8002ed2:	4b42      	ldr	r3, [pc, #264]	; (8002fdc <xTaskResumeAll+0x118>)
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d10a      	bne.n	8002ef0 <xTaskResumeAll+0x2c>
	__asm volatile
 8002eda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ede:	f383 8811 	msr	BASEPRI, r3
 8002ee2:	f3bf 8f6f 	isb	sy
 8002ee6:	f3bf 8f4f 	dsb	sy
 8002eea:	603b      	str	r3, [r7, #0]
}
 8002eec:	bf00      	nop
 8002eee:	e7fe      	b.n	8002eee <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8002ef0:	f001 fa18 	bl	8004324 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8002ef4:	4b39      	ldr	r3, [pc, #228]	; (8002fdc <xTaskResumeAll+0x118>)
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	3b01      	subs	r3, #1
 8002efa:	4a38      	ldr	r2, [pc, #224]	; (8002fdc <xTaskResumeAll+0x118>)
 8002efc:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002efe:	4b37      	ldr	r3, [pc, #220]	; (8002fdc <xTaskResumeAll+0x118>)
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d162      	bne.n	8002fcc <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8002f06:	4b36      	ldr	r3, [pc, #216]	; (8002fe0 <xTaskResumeAll+0x11c>)
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d05e      	beq.n	8002fcc <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002f0e:	e02f      	b.n	8002f70 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002f10:	4b34      	ldr	r3, [pc, #208]	; (8002fe4 <xTaskResumeAll+0x120>)
 8002f12:	68db      	ldr	r3, [r3, #12]
 8002f14:	68db      	ldr	r3, [r3, #12]
 8002f16:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	3318      	adds	r3, #24
 8002f1c:	4618      	mov	r0, r3
 8002f1e:	f7fe fee1 	bl	8001ce4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	3304      	adds	r3, #4
 8002f26:	4618      	mov	r0, r3
 8002f28:	f7fe fedc 	bl	8001ce4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f30:	4b2d      	ldr	r3, [pc, #180]	; (8002fe8 <xTaskResumeAll+0x124>)
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	429a      	cmp	r2, r3
 8002f36:	d903      	bls.n	8002f40 <xTaskResumeAll+0x7c>
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f3c:	4a2a      	ldr	r2, [pc, #168]	; (8002fe8 <xTaskResumeAll+0x124>)
 8002f3e:	6013      	str	r3, [r2, #0]
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f44:	4613      	mov	r3, r2
 8002f46:	009b      	lsls	r3, r3, #2
 8002f48:	4413      	add	r3, r2
 8002f4a:	009b      	lsls	r3, r3, #2
 8002f4c:	4a27      	ldr	r2, [pc, #156]	; (8002fec <xTaskResumeAll+0x128>)
 8002f4e:	441a      	add	r2, r3
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	3304      	adds	r3, #4
 8002f54:	4619      	mov	r1, r3
 8002f56:	4610      	mov	r0, r2
 8002f58:	f7fe fe67 	bl	8001c2a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f60:	4b23      	ldr	r3, [pc, #140]	; (8002ff0 <xTaskResumeAll+0x12c>)
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f66:	429a      	cmp	r2, r3
 8002f68:	d302      	bcc.n	8002f70 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8002f6a:	4b22      	ldr	r3, [pc, #136]	; (8002ff4 <xTaskResumeAll+0x130>)
 8002f6c:	2201      	movs	r2, #1
 8002f6e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002f70:	4b1c      	ldr	r3, [pc, #112]	; (8002fe4 <xTaskResumeAll+0x120>)
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d1cb      	bne.n	8002f10 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d001      	beq.n	8002f82 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8002f7e:	f000 fb55 	bl	800362c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8002f82:	4b1d      	ldr	r3, [pc, #116]	; (8002ff8 <xTaskResumeAll+0x134>)
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d010      	beq.n	8002fb0 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8002f8e:	f000 f847 	bl	8003020 <xTaskIncrementTick>
 8002f92:	4603      	mov	r3, r0
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d002      	beq.n	8002f9e <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8002f98:	4b16      	ldr	r3, [pc, #88]	; (8002ff4 <xTaskResumeAll+0x130>)
 8002f9a:	2201      	movs	r2, #1
 8002f9c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	3b01      	subs	r3, #1
 8002fa2:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d1f1      	bne.n	8002f8e <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8002faa:	4b13      	ldr	r3, [pc, #76]	; (8002ff8 <xTaskResumeAll+0x134>)
 8002fac:	2200      	movs	r2, #0
 8002fae:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8002fb0:	4b10      	ldr	r3, [pc, #64]	; (8002ff4 <xTaskResumeAll+0x130>)
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d009      	beq.n	8002fcc <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8002fb8:	2301      	movs	r3, #1
 8002fba:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8002fbc:	4b0f      	ldr	r3, [pc, #60]	; (8002ffc <xTaskResumeAll+0x138>)
 8002fbe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002fc2:	601a      	str	r2, [r3, #0]
 8002fc4:	f3bf 8f4f 	dsb	sy
 8002fc8:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8002fcc:	f001 f9da 	bl	8004384 <vPortExitCritical>

	return xAlreadyYielded;
 8002fd0:	68bb      	ldr	r3, [r7, #8]
}
 8002fd2:	4618      	mov	r0, r3
 8002fd4:	3710      	adds	r7, #16
 8002fd6:	46bd      	mov	sp, r7
 8002fd8:	bd80      	pop	{r7, pc}
 8002fda:	bf00      	nop
 8002fdc:	20000c48 	.word	0x20000c48
 8002fe0:	20000c20 	.word	0x20000c20
 8002fe4:	20000be0 	.word	0x20000be0
 8002fe8:	20000c28 	.word	0x20000c28
 8002fec:	20000750 	.word	0x20000750
 8002ff0:	2000074c 	.word	0x2000074c
 8002ff4:	20000c34 	.word	0x20000c34
 8002ff8:	20000c30 	.word	0x20000c30
 8002ffc:	e000ed04 	.word	0xe000ed04

08003000 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8003000:	b480      	push	{r7}
 8003002:	b083      	sub	sp, #12
 8003004:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8003006:	4b05      	ldr	r3, [pc, #20]	; (800301c <xTaskGetTickCount+0x1c>)
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800300c:	687b      	ldr	r3, [r7, #4]
}
 800300e:	4618      	mov	r0, r3
 8003010:	370c      	adds	r7, #12
 8003012:	46bd      	mov	sp, r7
 8003014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003018:	4770      	bx	lr
 800301a:	bf00      	nop
 800301c:	20000c24 	.word	0x20000c24

08003020 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003020:	b580      	push	{r7, lr}
 8003022:	b086      	sub	sp, #24
 8003024:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8003026:	2300      	movs	r3, #0
 8003028:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800302a:	4b4f      	ldr	r3, [pc, #316]	; (8003168 <xTaskIncrementTick+0x148>)
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	2b00      	cmp	r3, #0
 8003030:	f040 808f 	bne.w	8003152 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003034:	4b4d      	ldr	r3, [pc, #308]	; (800316c <xTaskIncrementTick+0x14c>)
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	3301      	adds	r3, #1
 800303a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800303c:	4a4b      	ldr	r2, [pc, #300]	; (800316c <xTaskIncrementTick+0x14c>)
 800303e:	693b      	ldr	r3, [r7, #16]
 8003040:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003042:	693b      	ldr	r3, [r7, #16]
 8003044:	2b00      	cmp	r3, #0
 8003046:	d120      	bne.n	800308a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8003048:	4b49      	ldr	r3, [pc, #292]	; (8003170 <xTaskIncrementTick+0x150>)
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	2b00      	cmp	r3, #0
 8003050:	d00a      	beq.n	8003068 <xTaskIncrementTick+0x48>
	__asm volatile
 8003052:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003056:	f383 8811 	msr	BASEPRI, r3
 800305a:	f3bf 8f6f 	isb	sy
 800305e:	f3bf 8f4f 	dsb	sy
 8003062:	603b      	str	r3, [r7, #0]
}
 8003064:	bf00      	nop
 8003066:	e7fe      	b.n	8003066 <xTaskIncrementTick+0x46>
 8003068:	4b41      	ldr	r3, [pc, #260]	; (8003170 <xTaskIncrementTick+0x150>)
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	60fb      	str	r3, [r7, #12]
 800306e:	4b41      	ldr	r3, [pc, #260]	; (8003174 <xTaskIncrementTick+0x154>)
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	4a3f      	ldr	r2, [pc, #252]	; (8003170 <xTaskIncrementTick+0x150>)
 8003074:	6013      	str	r3, [r2, #0]
 8003076:	4a3f      	ldr	r2, [pc, #252]	; (8003174 <xTaskIncrementTick+0x154>)
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	6013      	str	r3, [r2, #0]
 800307c:	4b3e      	ldr	r3, [pc, #248]	; (8003178 <xTaskIncrementTick+0x158>)
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	3301      	adds	r3, #1
 8003082:	4a3d      	ldr	r2, [pc, #244]	; (8003178 <xTaskIncrementTick+0x158>)
 8003084:	6013      	str	r3, [r2, #0]
 8003086:	f000 fad1 	bl	800362c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800308a:	4b3c      	ldr	r3, [pc, #240]	; (800317c <xTaskIncrementTick+0x15c>)
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	693a      	ldr	r2, [r7, #16]
 8003090:	429a      	cmp	r2, r3
 8003092:	d349      	bcc.n	8003128 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003094:	4b36      	ldr	r3, [pc, #216]	; (8003170 <xTaskIncrementTick+0x150>)
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	2b00      	cmp	r3, #0
 800309c:	d104      	bne.n	80030a8 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800309e:	4b37      	ldr	r3, [pc, #220]	; (800317c <xTaskIncrementTick+0x15c>)
 80030a0:	f04f 32ff 	mov.w	r2, #4294967295
 80030a4:	601a      	str	r2, [r3, #0]
					break;
 80030a6:	e03f      	b.n	8003128 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80030a8:	4b31      	ldr	r3, [pc, #196]	; (8003170 <xTaskIncrementTick+0x150>)
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	68db      	ldr	r3, [r3, #12]
 80030ae:	68db      	ldr	r3, [r3, #12]
 80030b0:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80030b2:	68bb      	ldr	r3, [r7, #8]
 80030b4:	685b      	ldr	r3, [r3, #4]
 80030b6:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80030b8:	693a      	ldr	r2, [r7, #16]
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	429a      	cmp	r2, r3
 80030be:	d203      	bcs.n	80030c8 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80030c0:	4a2e      	ldr	r2, [pc, #184]	; (800317c <xTaskIncrementTick+0x15c>)
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80030c6:	e02f      	b.n	8003128 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80030c8:	68bb      	ldr	r3, [r7, #8]
 80030ca:	3304      	adds	r3, #4
 80030cc:	4618      	mov	r0, r3
 80030ce:	f7fe fe09 	bl	8001ce4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80030d2:	68bb      	ldr	r3, [r7, #8]
 80030d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d004      	beq.n	80030e4 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80030da:	68bb      	ldr	r3, [r7, #8]
 80030dc:	3318      	adds	r3, #24
 80030de:	4618      	mov	r0, r3
 80030e0:	f7fe fe00 	bl	8001ce4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80030e4:	68bb      	ldr	r3, [r7, #8]
 80030e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80030e8:	4b25      	ldr	r3, [pc, #148]	; (8003180 <xTaskIncrementTick+0x160>)
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	429a      	cmp	r2, r3
 80030ee:	d903      	bls.n	80030f8 <xTaskIncrementTick+0xd8>
 80030f0:	68bb      	ldr	r3, [r7, #8]
 80030f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030f4:	4a22      	ldr	r2, [pc, #136]	; (8003180 <xTaskIncrementTick+0x160>)
 80030f6:	6013      	str	r3, [r2, #0]
 80030f8:	68bb      	ldr	r3, [r7, #8]
 80030fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80030fc:	4613      	mov	r3, r2
 80030fe:	009b      	lsls	r3, r3, #2
 8003100:	4413      	add	r3, r2
 8003102:	009b      	lsls	r3, r3, #2
 8003104:	4a1f      	ldr	r2, [pc, #124]	; (8003184 <xTaskIncrementTick+0x164>)
 8003106:	441a      	add	r2, r3
 8003108:	68bb      	ldr	r3, [r7, #8]
 800310a:	3304      	adds	r3, #4
 800310c:	4619      	mov	r1, r3
 800310e:	4610      	mov	r0, r2
 8003110:	f7fe fd8b 	bl	8001c2a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003114:	68bb      	ldr	r3, [r7, #8]
 8003116:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003118:	4b1b      	ldr	r3, [pc, #108]	; (8003188 <xTaskIncrementTick+0x168>)
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800311e:	429a      	cmp	r2, r3
 8003120:	d3b8      	bcc.n	8003094 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8003122:	2301      	movs	r3, #1
 8003124:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003126:	e7b5      	b.n	8003094 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003128:	4b17      	ldr	r3, [pc, #92]	; (8003188 <xTaskIncrementTick+0x168>)
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800312e:	4915      	ldr	r1, [pc, #84]	; (8003184 <xTaskIncrementTick+0x164>)
 8003130:	4613      	mov	r3, r2
 8003132:	009b      	lsls	r3, r3, #2
 8003134:	4413      	add	r3, r2
 8003136:	009b      	lsls	r3, r3, #2
 8003138:	440b      	add	r3, r1
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	2b01      	cmp	r3, #1
 800313e:	d901      	bls.n	8003144 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8003140:	2301      	movs	r3, #1
 8003142:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8003144:	4b11      	ldr	r3, [pc, #68]	; (800318c <xTaskIncrementTick+0x16c>)
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	2b00      	cmp	r3, #0
 800314a:	d007      	beq.n	800315c <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800314c:	2301      	movs	r3, #1
 800314e:	617b      	str	r3, [r7, #20]
 8003150:	e004      	b.n	800315c <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8003152:	4b0f      	ldr	r3, [pc, #60]	; (8003190 <xTaskIncrementTick+0x170>)
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	3301      	adds	r3, #1
 8003158:	4a0d      	ldr	r2, [pc, #52]	; (8003190 <xTaskIncrementTick+0x170>)
 800315a:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800315c:	697b      	ldr	r3, [r7, #20]
}
 800315e:	4618      	mov	r0, r3
 8003160:	3718      	adds	r7, #24
 8003162:	46bd      	mov	sp, r7
 8003164:	bd80      	pop	{r7, pc}
 8003166:	bf00      	nop
 8003168:	20000c48 	.word	0x20000c48
 800316c:	20000c24 	.word	0x20000c24
 8003170:	20000bd8 	.word	0x20000bd8
 8003174:	20000bdc 	.word	0x20000bdc
 8003178:	20000c38 	.word	0x20000c38
 800317c:	20000c40 	.word	0x20000c40
 8003180:	20000c28 	.word	0x20000c28
 8003184:	20000750 	.word	0x20000750
 8003188:	2000074c 	.word	0x2000074c
 800318c:	20000c34 	.word	0x20000c34
 8003190:	20000c30 	.word	0x20000c30

08003194 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003194:	b480      	push	{r7}
 8003196:	b085      	sub	sp, #20
 8003198:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800319a:	4b28      	ldr	r3, [pc, #160]	; (800323c <vTaskSwitchContext+0xa8>)
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d003      	beq.n	80031aa <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80031a2:	4b27      	ldr	r3, [pc, #156]	; (8003240 <vTaskSwitchContext+0xac>)
 80031a4:	2201      	movs	r2, #1
 80031a6:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80031a8:	e041      	b.n	800322e <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 80031aa:	4b25      	ldr	r3, [pc, #148]	; (8003240 <vTaskSwitchContext+0xac>)
 80031ac:	2200      	movs	r2, #0
 80031ae:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80031b0:	4b24      	ldr	r3, [pc, #144]	; (8003244 <vTaskSwitchContext+0xb0>)
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	60fb      	str	r3, [r7, #12]
 80031b6:	e010      	b.n	80031da <vTaskSwitchContext+0x46>
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d10a      	bne.n	80031d4 <vTaskSwitchContext+0x40>
	__asm volatile
 80031be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031c2:	f383 8811 	msr	BASEPRI, r3
 80031c6:	f3bf 8f6f 	isb	sy
 80031ca:	f3bf 8f4f 	dsb	sy
 80031ce:	607b      	str	r3, [r7, #4]
}
 80031d0:	bf00      	nop
 80031d2:	e7fe      	b.n	80031d2 <vTaskSwitchContext+0x3e>
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	3b01      	subs	r3, #1
 80031d8:	60fb      	str	r3, [r7, #12]
 80031da:	491b      	ldr	r1, [pc, #108]	; (8003248 <vTaskSwitchContext+0xb4>)
 80031dc:	68fa      	ldr	r2, [r7, #12]
 80031de:	4613      	mov	r3, r2
 80031e0:	009b      	lsls	r3, r3, #2
 80031e2:	4413      	add	r3, r2
 80031e4:	009b      	lsls	r3, r3, #2
 80031e6:	440b      	add	r3, r1
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d0e4      	beq.n	80031b8 <vTaskSwitchContext+0x24>
 80031ee:	68fa      	ldr	r2, [r7, #12]
 80031f0:	4613      	mov	r3, r2
 80031f2:	009b      	lsls	r3, r3, #2
 80031f4:	4413      	add	r3, r2
 80031f6:	009b      	lsls	r3, r3, #2
 80031f8:	4a13      	ldr	r2, [pc, #76]	; (8003248 <vTaskSwitchContext+0xb4>)
 80031fa:	4413      	add	r3, r2
 80031fc:	60bb      	str	r3, [r7, #8]
 80031fe:	68bb      	ldr	r3, [r7, #8]
 8003200:	685b      	ldr	r3, [r3, #4]
 8003202:	685a      	ldr	r2, [r3, #4]
 8003204:	68bb      	ldr	r3, [r7, #8]
 8003206:	605a      	str	r2, [r3, #4]
 8003208:	68bb      	ldr	r3, [r7, #8]
 800320a:	685a      	ldr	r2, [r3, #4]
 800320c:	68bb      	ldr	r3, [r7, #8]
 800320e:	3308      	adds	r3, #8
 8003210:	429a      	cmp	r2, r3
 8003212:	d104      	bne.n	800321e <vTaskSwitchContext+0x8a>
 8003214:	68bb      	ldr	r3, [r7, #8]
 8003216:	685b      	ldr	r3, [r3, #4]
 8003218:	685a      	ldr	r2, [r3, #4]
 800321a:	68bb      	ldr	r3, [r7, #8]
 800321c:	605a      	str	r2, [r3, #4]
 800321e:	68bb      	ldr	r3, [r7, #8]
 8003220:	685b      	ldr	r3, [r3, #4]
 8003222:	68db      	ldr	r3, [r3, #12]
 8003224:	4a09      	ldr	r2, [pc, #36]	; (800324c <vTaskSwitchContext+0xb8>)
 8003226:	6013      	str	r3, [r2, #0]
 8003228:	4a06      	ldr	r2, [pc, #24]	; (8003244 <vTaskSwitchContext+0xb0>)
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	6013      	str	r3, [r2, #0]
}
 800322e:	bf00      	nop
 8003230:	3714      	adds	r7, #20
 8003232:	46bd      	mov	sp, r7
 8003234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003238:	4770      	bx	lr
 800323a:	bf00      	nop
 800323c:	20000c48 	.word	0x20000c48
 8003240:	20000c34 	.word	0x20000c34
 8003244:	20000c28 	.word	0x20000c28
 8003248:	20000750 	.word	0x20000750
 800324c:	2000074c 	.word	0x2000074c

08003250 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8003250:	b580      	push	{r7, lr}
 8003252:	b084      	sub	sp, #16
 8003254:	af00      	add	r7, sp, #0
 8003256:	6078      	str	r0, [r7, #4]
 8003258:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	2b00      	cmp	r3, #0
 800325e:	d10a      	bne.n	8003276 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8003260:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003264:	f383 8811 	msr	BASEPRI, r3
 8003268:	f3bf 8f6f 	isb	sy
 800326c:	f3bf 8f4f 	dsb	sy
 8003270:	60fb      	str	r3, [r7, #12]
}
 8003272:	bf00      	nop
 8003274:	e7fe      	b.n	8003274 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003276:	4b07      	ldr	r3, [pc, #28]	; (8003294 <vTaskPlaceOnEventList+0x44>)
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	3318      	adds	r3, #24
 800327c:	4619      	mov	r1, r3
 800327e:	6878      	ldr	r0, [r7, #4]
 8003280:	f7fe fcf7 	bl	8001c72 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8003284:	2101      	movs	r1, #1
 8003286:	6838      	ldr	r0, [r7, #0]
 8003288:	f000 fb7a 	bl	8003980 <prvAddCurrentTaskToDelayedList>
}
 800328c:	bf00      	nop
 800328e:	3710      	adds	r7, #16
 8003290:	46bd      	mov	sp, r7
 8003292:	bd80      	pop	{r7, pc}
 8003294:	2000074c 	.word	0x2000074c

08003298 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003298:	b580      	push	{r7, lr}
 800329a:	b086      	sub	sp, #24
 800329c:	af00      	add	r7, sp, #0
 800329e:	60f8      	str	r0, [r7, #12]
 80032a0:	60b9      	str	r1, [r7, #8]
 80032a2:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d10a      	bne.n	80032c0 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 80032aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80032ae:	f383 8811 	msr	BASEPRI, r3
 80032b2:	f3bf 8f6f 	isb	sy
 80032b6:	f3bf 8f4f 	dsb	sy
 80032ba:	617b      	str	r3, [r7, #20]
}
 80032bc:	bf00      	nop
 80032be:	e7fe      	b.n	80032be <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80032c0:	4b0a      	ldr	r3, [pc, #40]	; (80032ec <vTaskPlaceOnEventListRestricted+0x54>)
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	3318      	adds	r3, #24
 80032c6:	4619      	mov	r1, r3
 80032c8:	68f8      	ldr	r0, [r7, #12]
 80032ca:	f7fe fcae 	bl	8001c2a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d002      	beq.n	80032da <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 80032d4:	f04f 33ff 	mov.w	r3, #4294967295
 80032d8:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80032da:	6879      	ldr	r1, [r7, #4]
 80032dc:	68b8      	ldr	r0, [r7, #8]
 80032de:	f000 fb4f 	bl	8003980 <prvAddCurrentTaskToDelayedList>
	}
 80032e2:	bf00      	nop
 80032e4:	3718      	adds	r7, #24
 80032e6:	46bd      	mov	sp, r7
 80032e8:	bd80      	pop	{r7, pc}
 80032ea:	bf00      	nop
 80032ec:	2000074c 	.word	0x2000074c

080032f0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80032f0:	b580      	push	{r7, lr}
 80032f2:	b086      	sub	sp, #24
 80032f4:	af00      	add	r7, sp, #0
 80032f6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	68db      	ldr	r3, [r3, #12]
 80032fc:	68db      	ldr	r3, [r3, #12]
 80032fe:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8003300:	693b      	ldr	r3, [r7, #16]
 8003302:	2b00      	cmp	r3, #0
 8003304:	d10a      	bne.n	800331c <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8003306:	f04f 0350 	mov.w	r3, #80	; 0x50
 800330a:	f383 8811 	msr	BASEPRI, r3
 800330e:	f3bf 8f6f 	isb	sy
 8003312:	f3bf 8f4f 	dsb	sy
 8003316:	60fb      	str	r3, [r7, #12]
}
 8003318:	bf00      	nop
 800331a:	e7fe      	b.n	800331a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800331c:	693b      	ldr	r3, [r7, #16]
 800331e:	3318      	adds	r3, #24
 8003320:	4618      	mov	r0, r3
 8003322:	f7fe fcdf 	bl	8001ce4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003326:	4b1e      	ldr	r3, [pc, #120]	; (80033a0 <xTaskRemoveFromEventList+0xb0>)
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	2b00      	cmp	r3, #0
 800332c:	d11d      	bne.n	800336a <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800332e:	693b      	ldr	r3, [r7, #16]
 8003330:	3304      	adds	r3, #4
 8003332:	4618      	mov	r0, r3
 8003334:	f7fe fcd6 	bl	8001ce4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8003338:	693b      	ldr	r3, [r7, #16]
 800333a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800333c:	4b19      	ldr	r3, [pc, #100]	; (80033a4 <xTaskRemoveFromEventList+0xb4>)
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	429a      	cmp	r2, r3
 8003342:	d903      	bls.n	800334c <xTaskRemoveFromEventList+0x5c>
 8003344:	693b      	ldr	r3, [r7, #16]
 8003346:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003348:	4a16      	ldr	r2, [pc, #88]	; (80033a4 <xTaskRemoveFromEventList+0xb4>)
 800334a:	6013      	str	r3, [r2, #0]
 800334c:	693b      	ldr	r3, [r7, #16]
 800334e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003350:	4613      	mov	r3, r2
 8003352:	009b      	lsls	r3, r3, #2
 8003354:	4413      	add	r3, r2
 8003356:	009b      	lsls	r3, r3, #2
 8003358:	4a13      	ldr	r2, [pc, #76]	; (80033a8 <xTaskRemoveFromEventList+0xb8>)
 800335a:	441a      	add	r2, r3
 800335c:	693b      	ldr	r3, [r7, #16]
 800335e:	3304      	adds	r3, #4
 8003360:	4619      	mov	r1, r3
 8003362:	4610      	mov	r0, r2
 8003364:	f7fe fc61 	bl	8001c2a <vListInsertEnd>
 8003368:	e005      	b.n	8003376 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800336a:	693b      	ldr	r3, [r7, #16]
 800336c:	3318      	adds	r3, #24
 800336e:	4619      	mov	r1, r3
 8003370:	480e      	ldr	r0, [pc, #56]	; (80033ac <xTaskRemoveFromEventList+0xbc>)
 8003372:	f7fe fc5a 	bl	8001c2a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003376:	693b      	ldr	r3, [r7, #16]
 8003378:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800337a:	4b0d      	ldr	r3, [pc, #52]	; (80033b0 <xTaskRemoveFromEventList+0xc0>)
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003380:	429a      	cmp	r2, r3
 8003382:	d905      	bls.n	8003390 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8003384:	2301      	movs	r3, #1
 8003386:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8003388:	4b0a      	ldr	r3, [pc, #40]	; (80033b4 <xTaskRemoveFromEventList+0xc4>)
 800338a:	2201      	movs	r2, #1
 800338c:	601a      	str	r2, [r3, #0]
 800338e:	e001      	b.n	8003394 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8003390:	2300      	movs	r3, #0
 8003392:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8003394:	697b      	ldr	r3, [r7, #20]
}
 8003396:	4618      	mov	r0, r3
 8003398:	3718      	adds	r7, #24
 800339a:	46bd      	mov	sp, r7
 800339c:	bd80      	pop	{r7, pc}
 800339e:	bf00      	nop
 80033a0:	20000c48 	.word	0x20000c48
 80033a4:	20000c28 	.word	0x20000c28
 80033a8:	20000750 	.word	0x20000750
 80033ac:	20000be0 	.word	0x20000be0
 80033b0:	2000074c 	.word	0x2000074c
 80033b4:	20000c34 	.word	0x20000c34

080033b8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80033b8:	b480      	push	{r7}
 80033ba:	b083      	sub	sp, #12
 80033bc:	af00      	add	r7, sp, #0
 80033be:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80033c0:	4b06      	ldr	r3, [pc, #24]	; (80033dc <vTaskInternalSetTimeOutState+0x24>)
 80033c2:	681a      	ldr	r2, [r3, #0]
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80033c8:	4b05      	ldr	r3, [pc, #20]	; (80033e0 <vTaskInternalSetTimeOutState+0x28>)
 80033ca:	681a      	ldr	r2, [r3, #0]
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	605a      	str	r2, [r3, #4]
}
 80033d0:	bf00      	nop
 80033d2:	370c      	adds	r7, #12
 80033d4:	46bd      	mov	sp, r7
 80033d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033da:	4770      	bx	lr
 80033dc:	20000c38 	.word	0x20000c38
 80033e0:	20000c24 	.word	0x20000c24

080033e4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80033e4:	b580      	push	{r7, lr}
 80033e6:	b088      	sub	sp, #32
 80033e8:	af00      	add	r7, sp, #0
 80033ea:	6078      	str	r0, [r7, #4]
 80033ec:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d10a      	bne.n	800340a <xTaskCheckForTimeOut+0x26>
	__asm volatile
 80033f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033f8:	f383 8811 	msr	BASEPRI, r3
 80033fc:	f3bf 8f6f 	isb	sy
 8003400:	f3bf 8f4f 	dsb	sy
 8003404:	613b      	str	r3, [r7, #16]
}
 8003406:	bf00      	nop
 8003408:	e7fe      	b.n	8003408 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800340a:	683b      	ldr	r3, [r7, #0]
 800340c:	2b00      	cmp	r3, #0
 800340e:	d10a      	bne.n	8003426 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8003410:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003414:	f383 8811 	msr	BASEPRI, r3
 8003418:	f3bf 8f6f 	isb	sy
 800341c:	f3bf 8f4f 	dsb	sy
 8003420:	60fb      	str	r3, [r7, #12]
}
 8003422:	bf00      	nop
 8003424:	e7fe      	b.n	8003424 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8003426:	f000 ff7d 	bl	8004324 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800342a:	4b1d      	ldr	r3, [pc, #116]	; (80034a0 <xTaskCheckForTimeOut+0xbc>)
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	685b      	ldr	r3, [r3, #4]
 8003434:	69ba      	ldr	r2, [r7, #24]
 8003436:	1ad3      	subs	r3, r2, r3
 8003438:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800343a:	683b      	ldr	r3, [r7, #0]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003442:	d102      	bne.n	800344a <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8003444:	2300      	movs	r3, #0
 8003446:	61fb      	str	r3, [r7, #28]
 8003448:	e023      	b.n	8003492 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681a      	ldr	r2, [r3, #0]
 800344e:	4b15      	ldr	r3, [pc, #84]	; (80034a4 <xTaskCheckForTimeOut+0xc0>)
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	429a      	cmp	r2, r3
 8003454:	d007      	beq.n	8003466 <xTaskCheckForTimeOut+0x82>
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	685b      	ldr	r3, [r3, #4]
 800345a:	69ba      	ldr	r2, [r7, #24]
 800345c:	429a      	cmp	r2, r3
 800345e:	d302      	bcc.n	8003466 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8003460:	2301      	movs	r3, #1
 8003462:	61fb      	str	r3, [r7, #28]
 8003464:	e015      	b.n	8003492 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8003466:	683b      	ldr	r3, [r7, #0]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	697a      	ldr	r2, [r7, #20]
 800346c:	429a      	cmp	r2, r3
 800346e:	d20b      	bcs.n	8003488 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8003470:	683b      	ldr	r3, [r7, #0]
 8003472:	681a      	ldr	r2, [r3, #0]
 8003474:	697b      	ldr	r3, [r7, #20]
 8003476:	1ad2      	subs	r2, r2, r3
 8003478:	683b      	ldr	r3, [r7, #0]
 800347a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800347c:	6878      	ldr	r0, [r7, #4]
 800347e:	f7ff ff9b 	bl	80033b8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8003482:	2300      	movs	r3, #0
 8003484:	61fb      	str	r3, [r7, #28]
 8003486:	e004      	b.n	8003492 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8003488:	683b      	ldr	r3, [r7, #0]
 800348a:	2200      	movs	r2, #0
 800348c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800348e:	2301      	movs	r3, #1
 8003490:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8003492:	f000 ff77 	bl	8004384 <vPortExitCritical>

	return xReturn;
 8003496:	69fb      	ldr	r3, [r7, #28]
}
 8003498:	4618      	mov	r0, r3
 800349a:	3720      	adds	r7, #32
 800349c:	46bd      	mov	sp, r7
 800349e:	bd80      	pop	{r7, pc}
 80034a0:	20000c24 	.word	0x20000c24
 80034a4:	20000c38 	.word	0x20000c38

080034a8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80034a8:	b480      	push	{r7}
 80034aa:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80034ac:	4b03      	ldr	r3, [pc, #12]	; (80034bc <vTaskMissedYield+0x14>)
 80034ae:	2201      	movs	r2, #1
 80034b0:	601a      	str	r2, [r3, #0]
}
 80034b2:	bf00      	nop
 80034b4:	46bd      	mov	sp, r7
 80034b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ba:	4770      	bx	lr
 80034bc:	20000c34 	.word	0x20000c34

080034c0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80034c0:	b580      	push	{r7, lr}
 80034c2:	b082      	sub	sp, #8
 80034c4:	af00      	add	r7, sp, #0
 80034c6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80034c8:	f000 f852 	bl	8003570 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80034cc:	4b06      	ldr	r3, [pc, #24]	; (80034e8 <prvIdleTask+0x28>)
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	2b01      	cmp	r3, #1
 80034d2:	d9f9      	bls.n	80034c8 <prvIdleTask+0x8>
			{
				taskYIELD();
 80034d4:	4b05      	ldr	r3, [pc, #20]	; (80034ec <prvIdleTask+0x2c>)
 80034d6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80034da:	601a      	str	r2, [r3, #0]
 80034dc:	f3bf 8f4f 	dsb	sy
 80034e0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80034e4:	e7f0      	b.n	80034c8 <prvIdleTask+0x8>
 80034e6:	bf00      	nop
 80034e8:	20000750 	.word	0x20000750
 80034ec:	e000ed04 	.word	0xe000ed04

080034f0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80034f0:	b580      	push	{r7, lr}
 80034f2:	b082      	sub	sp, #8
 80034f4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80034f6:	2300      	movs	r3, #0
 80034f8:	607b      	str	r3, [r7, #4]
 80034fa:	e00c      	b.n	8003516 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80034fc:	687a      	ldr	r2, [r7, #4]
 80034fe:	4613      	mov	r3, r2
 8003500:	009b      	lsls	r3, r3, #2
 8003502:	4413      	add	r3, r2
 8003504:	009b      	lsls	r3, r3, #2
 8003506:	4a12      	ldr	r2, [pc, #72]	; (8003550 <prvInitialiseTaskLists+0x60>)
 8003508:	4413      	add	r3, r2
 800350a:	4618      	mov	r0, r3
 800350c:	f7fe fb60 	bl	8001bd0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	3301      	adds	r3, #1
 8003514:	607b      	str	r3, [r7, #4]
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	2b37      	cmp	r3, #55	; 0x37
 800351a:	d9ef      	bls.n	80034fc <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800351c:	480d      	ldr	r0, [pc, #52]	; (8003554 <prvInitialiseTaskLists+0x64>)
 800351e:	f7fe fb57 	bl	8001bd0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8003522:	480d      	ldr	r0, [pc, #52]	; (8003558 <prvInitialiseTaskLists+0x68>)
 8003524:	f7fe fb54 	bl	8001bd0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8003528:	480c      	ldr	r0, [pc, #48]	; (800355c <prvInitialiseTaskLists+0x6c>)
 800352a:	f7fe fb51 	bl	8001bd0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800352e:	480c      	ldr	r0, [pc, #48]	; (8003560 <prvInitialiseTaskLists+0x70>)
 8003530:	f7fe fb4e 	bl	8001bd0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8003534:	480b      	ldr	r0, [pc, #44]	; (8003564 <prvInitialiseTaskLists+0x74>)
 8003536:	f7fe fb4b 	bl	8001bd0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800353a:	4b0b      	ldr	r3, [pc, #44]	; (8003568 <prvInitialiseTaskLists+0x78>)
 800353c:	4a05      	ldr	r2, [pc, #20]	; (8003554 <prvInitialiseTaskLists+0x64>)
 800353e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003540:	4b0a      	ldr	r3, [pc, #40]	; (800356c <prvInitialiseTaskLists+0x7c>)
 8003542:	4a05      	ldr	r2, [pc, #20]	; (8003558 <prvInitialiseTaskLists+0x68>)
 8003544:	601a      	str	r2, [r3, #0]
}
 8003546:	bf00      	nop
 8003548:	3708      	adds	r7, #8
 800354a:	46bd      	mov	sp, r7
 800354c:	bd80      	pop	{r7, pc}
 800354e:	bf00      	nop
 8003550:	20000750 	.word	0x20000750
 8003554:	20000bb0 	.word	0x20000bb0
 8003558:	20000bc4 	.word	0x20000bc4
 800355c:	20000be0 	.word	0x20000be0
 8003560:	20000bf4 	.word	0x20000bf4
 8003564:	20000c0c 	.word	0x20000c0c
 8003568:	20000bd8 	.word	0x20000bd8
 800356c:	20000bdc 	.word	0x20000bdc

08003570 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003570:	b580      	push	{r7, lr}
 8003572:	b082      	sub	sp, #8
 8003574:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003576:	e019      	b.n	80035ac <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8003578:	f000 fed4 	bl	8004324 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800357c:	4b10      	ldr	r3, [pc, #64]	; (80035c0 <prvCheckTasksWaitingTermination+0x50>)
 800357e:	68db      	ldr	r3, [r3, #12]
 8003580:	68db      	ldr	r3, [r3, #12]
 8003582:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	3304      	adds	r3, #4
 8003588:	4618      	mov	r0, r3
 800358a:	f7fe fbab 	bl	8001ce4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800358e:	4b0d      	ldr	r3, [pc, #52]	; (80035c4 <prvCheckTasksWaitingTermination+0x54>)
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	3b01      	subs	r3, #1
 8003594:	4a0b      	ldr	r2, [pc, #44]	; (80035c4 <prvCheckTasksWaitingTermination+0x54>)
 8003596:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8003598:	4b0b      	ldr	r3, [pc, #44]	; (80035c8 <prvCheckTasksWaitingTermination+0x58>)
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	3b01      	subs	r3, #1
 800359e:	4a0a      	ldr	r2, [pc, #40]	; (80035c8 <prvCheckTasksWaitingTermination+0x58>)
 80035a0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80035a2:	f000 feef 	bl	8004384 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80035a6:	6878      	ldr	r0, [r7, #4]
 80035a8:	f000 f810 	bl	80035cc <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80035ac:	4b06      	ldr	r3, [pc, #24]	; (80035c8 <prvCheckTasksWaitingTermination+0x58>)
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d1e1      	bne.n	8003578 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80035b4:	bf00      	nop
 80035b6:	bf00      	nop
 80035b8:	3708      	adds	r7, #8
 80035ba:	46bd      	mov	sp, r7
 80035bc:	bd80      	pop	{r7, pc}
 80035be:	bf00      	nop
 80035c0:	20000bf4 	.word	0x20000bf4
 80035c4:	20000c20 	.word	0x20000c20
 80035c8:	20000c08 	.word	0x20000c08

080035cc <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80035cc:	b580      	push	{r7, lr}
 80035ce:	b084      	sub	sp, #16
 80035d0:	af00      	add	r7, sp, #0
 80035d2:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d108      	bne.n	80035f0 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035e2:	4618      	mov	r0, r3
 80035e4:	f001 f88c 	bl	8004700 <vPortFree>
				vPortFree( pxTCB );
 80035e8:	6878      	ldr	r0, [r7, #4]
 80035ea:	f001 f889 	bl	8004700 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80035ee:	e018      	b.n	8003622 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80035f6:	2b01      	cmp	r3, #1
 80035f8:	d103      	bne.n	8003602 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80035fa:	6878      	ldr	r0, [r7, #4]
 80035fc:	f001 f880 	bl	8004700 <vPortFree>
	}
 8003600:	e00f      	b.n	8003622 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8003608:	2b02      	cmp	r3, #2
 800360a:	d00a      	beq.n	8003622 <prvDeleteTCB+0x56>
	__asm volatile
 800360c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003610:	f383 8811 	msr	BASEPRI, r3
 8003614:	f3bf 8f6f 	isb	sy
 8003618:	f3bf 8f4f 	dsb	sy
 800361c:	60fb      	str	r3, [r7, #12]
}
 800361e:	bf00      	nop
 8003620:	e7fe      	b.n	8003620 <prvDeleteTCB+0x54>
	}
 8003622:	bf00      	nop
 8003624:	3710      	adds	r7, #16
 8003626:	46bd      	mov	sp, r7
 8003628:	bd80      	pop	{r7, pc}
	...

0800362c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800362c:	b480      	push	{r7}
 800362e:	b083      	sub	sp, #12
 8003630:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003632:	4b0c      	ldr	r3, [pc, #48]	; (8003664 <prvResetNextTaskUnblockTime+0x38>)
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	2b00      	cmp	r3, #0
 800363a:	d104      	bne.n	8003646 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800363c:	4b0a      	ldr	r3, [pc, #40]	; (8003668 <prvResetNextTaskUnblockTime+0x3c>)
 800363e:	f04f 32ff 	mov.w	r2, #4294967295
 8003642:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8003644:	e008      	b.n	8003658 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003646:	4b07      	ldr	r3, [pc, #28]	; (8003664 <prvResetNextTaskUnblockTime+0x38>)
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	68db      	ldr	r3, [r3, #12]
 800364c:	68db      	ldr	r3, [r3, #12]
 800364e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	685b      	ldr	r3, [r3, #4]
 8003654:	4a04      	ldr	r2, [pc, #16]	; (8003668 <prvResetNextTaskUnblockTime+0x3c>)
 8003656:	6013      	str	r3, [r2, #0]
}
 8003658:	bf00      	nop
 800365a:	370c      	adds	r7, #12
 800365c:	46bd      	mov	sp, r7
 800365e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003662:	4770      	bx	lr
 8003664:	20000bd8 	.word	0x20000bd8
 8003668:	20000c40 	.word	0x20000c40

0800366c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800366c:	b480      	push	{r7}
 800366e:	b083      	sub	sp, #12
 8003670:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8003672:	4b0b      	ldr	r3, [pc, #44]	; (80036a0 <xTaskGetSchedulerState+0x34>)
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	2b00      	cmp	r3, #0
 8003678:	d102      	bne.n	8003680 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800367a:	2301      	movs	r3, #1
 800367c:	607b      	str	r3, [r7, #4]
 800367e:	e008      	b.n	8003692 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003680:	4b08      	ldr	r3, [pc, #32]	; (80036a4 <xTaskGetSchedulerState+0x38>)
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	2b00      	cmp	r3, #0
 8003686:	d102      	bne.n	800368e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8003688:	2302      	movs	r3, #2
 800368a:	607b      	str	r3, [r7, #4]
 800368c:	e001      	b.n	8003692 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800368e:	2300      	movs	r3, #0
 8003690:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8003692:	687b      	ldr	r3, [r7, #4]
	}
 8003694:	4618      	mov	r0, r3
 8003696:	370c      	adds	r7, #12
 8003698:	46bd      	mov	sp, r7
 800369a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800369e:	4770      	bx	lr
 80036a0:	20000c2c 	.word	0x20000c2c
 80036a4:	20000c48 	.word	0x20000c48

080036a8 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 80036a8:	b580      	push	{r7, lr}
 80036aa:	b084      	sub	sp, #16
 80036ac:	af00      	add	r7, sp, #0
 80036ae:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 80036b4:	2300      	movs	r3, #0
 80036b6:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d051      	beq.n	8003762 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 80036be:	68bb      	ldr	r3, [r7, #8]
 80036c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80036c2:	4b2a      	ldr	r3, [pc, #168]	; (800376c <xTaskPriorityInherit+0xc4>)
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036c8:	429a      	cmp	r2, r3
 80036ca:	d241      	bcs.n	8003750 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80036cc:	68bb      	ldr	r3, [r7, #8]
 80036ce:	699b      	ldr	r3, [r3, #24]
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	db06      	blt.n	80036e2 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80036d4:	4b25      	ldr	r3, [pc, #148]	; (800376c <xTaskPriorityInherit+0xc4>)
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036da:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80036de:	68bb      	ldr	r3, [r7, #8]
 80036e0:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 80036e2:	68bb      	ldr	r3, [r7, #8]
 80036e4:	6959      	ldr	r1, [r3, #20]
 80036e6:	68bb      	ldr	r3, [r7, #8]
 80036e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80036ea:	4613      	mov	r3, r2
 80036ec:	009b      	lsls	r3, r3, #2
 80036ee:	4413      	add	r3, r2
 80036f0:	009b      	lsls	r3, r3, #2
 80036f2:	4a1f      	ldr	r2, [pc, #124]	; (8003770 <xTaskPriorityInherit+0xc8>)
 80036f4:	4413      	add	r3, r2
 80036f6:	4299      	cmp	r1, r3
 80036f8:	d122      	bne.n	8003740 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80036fa:	68bb      	ldr	r3, [r7, #8]
 80036fc:	3304      	adds	r3, #4
 80036fe:	4618      	mov	r0, r3
 8003700:	f7fe faf0 	bl	8001ce4 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8003704:	4b19      	ldr	r3, [pc, #100]	; (800376c <xTaskPriorityInherit+0xc4>)
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800370a:	68bb      	ldr	r3, [r7, #8]
 800370c:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800370e:	68bb      	ldr	r3, [r7, #8]
 8003710:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003712:	4b18      	ldr	r3, [pc, #96]	; (8003774 <xTaskPriorityInherit+0xcc>)
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	429a      	cmp	r2, r3
 8003718:	d903      	bls.n	8003722 <xTaskPriorityInherit+0x7a>
 800371a:	68bb      	ldr	r3, [r7, #8]
 800371c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800371e:	4a15      	ldr	r2, [pc, #84]	; (8003774 <xTaskPriorityInherit+0xcc>)
 8003720:	6013      	str	r3, [r2, #0]
 8003722:	68bb      	ldr	r3, [r7, #8]
 8003724:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003726:	4613      	mov	r3, r2
 8003728:	009b      	lsls	r3, r3, #2
 800372a:	4413      	add	r3, r2
 800372c:	009b      	lsls	r3, r3, #2
 800372e:	4a10      	ldr	r2, [pc, #64]	; (8003770 <xTaskPriorityInherit+0xc8>)
 8003730:	441a      	add	r2, r3
 8003732:	68bb      	ldr	r3, [r7, #8]
 8003734:	3304      	adds	r3, #4
 8003736:	4619      	mov	r1, r3
 8003738:	4610      	mov	r0, r2
 800373a:	f7fe fa76 	bl	8001c2a <vListInsertEnd>
 800373e:	e004      	b.n	800374a <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8003740:	4b0a      	ldr	r3, [pc, #40]	; (800376c <xTaskPriorityInherit+0xc4>)
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003746:	68bb      	ldr	r3, [r7, #8]
 8003748:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800374a:	2301      	movs	r3, #1
 800374c:	60fb      	str	r3, [r7, #12]
 800374e:	e008      	b.n	8003762 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8003750:	68bb      	ldr	r3, [r7, #8]
 8003752:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003754:	4b05      	ldr	r3, [pc, #20]	; (800376c <xTaskPriorityInherit+0xc4>)
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800375a:	429a      	cmp	r2, r3
 800375c:	d201      	bcs.n	8003762 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800375e:	2301      	movs	r3, #1
 8003760:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8003762:	68fb      	ldr	r3, [r7, #12]
	}
 8003764:	4618      	mov	r0, r3
 8003766:	3710      	adds	r7, #16
 8003768:	46bd      	mov	sp, r7
 800376a:	bd80      	pop	{r7, pc}
 800376c:	2000074c 	.word	0x2000074c
 8003770:	20000750 	.word	0x20000750
 8003774:	20000c28 	.word	0x20000c28

08003778 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8003778:	b580      	push	{r7, lr}
 800377a:	b086      	sub	sp, #24
 800377c:	af00      	add	r7, sp, #0
 800377e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8003784:	2300      	movs	r3, #0
 8003786:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	2b00      	cmp	r3, #0
 800378c:	d056      	beq.n	800383c <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800378e:	4b2e      	ldr	r3, [pc, #184]	; (8003848 <xTaskPriorityDisinherit+0xd0>)
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	693a      	ldr	r2, [r7, #16]
 8003794:	429a      	cmp	r2, r3
 8003796:	d00a      	beq.n	80037ae <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8003798:	f04f 0350 	mov.w	r3, #80	; 0x50
 800379c:	f383 8811 	msr	BASEPRI, r3
 80037a0:	f3bf 8f6f 	isb	sy
 80037a4:	f3bf 8f4f 	dsb	sy
 80037a8:	60fb      	str	r3, [r7, #12]
}
 80037aa:	bf00      	nop
 80037ac:	e7fe      	b.n	80037ac <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80037ae:	693b      	ldr	r3, [r7, #16]
 80037b0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d10a      	bne.n	80037cc <xTaskPriorityDisinherit+0x54>
	__asm volatile
 80037b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037ba:	f383 8811 	msr	BASEPRI, r3
 80037be:	f3bf 8f6f 	isb	sy
 80037c2:	f3bf 8f4f 	dsb	sy
 80037c6:	60bb      	str	r3, [r7, #8]
}
 80037c8:	bf00      	nop
 80037ca:	e7fe      	b.n	80037ca <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 80037cc:	693b      	ldr	r3, [r7, #16]
 80037ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80037d0:	1e5a      	subs	r2, r3, #1
 80037d2:	693b      	ldr	r3, [r7, #16]
 80037d4:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80037d6:	693b      	ldr	r3, [r7, #16]
 80037d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80037da:	693b      	ldr	r3, [r7, #16]
 80037dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80037de:	429a      	cmp	r2, r3
 80037e0:	d02c      	beq.n	800383c <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80037e2:	693b      	ldr	r3, [r7, #16]
 80037e4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d128      	bne.n	800383c <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80037ea:	693b      	ldr	r3, [r7, #16]
 80037ec:	3304      	adds	r3, #4
 80037ee:	4618      	mov	r0, r3
 80037f0:	f7fe fa78 	bl	8001ce4 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80037f4:	693b      	ldr	r3, [r7, #16]
 80037f6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80037f8:	693b      	ldr	r3, [r7, #16]
 80037fa:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80037fc:	693b      	ldr	r3, [r7, #16]
 80037fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003800:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8003804:	693b      	ldr	r3, [r7, #16]
 8003806:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8003808:	693b      	ldr	r3, [r7, #16]
 800380a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800380c:	4b0f      	ldr	r3, [pc, #60]	; (800384c <xTaskPriorityDisinherit+0xd4>)
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	429a      	cmp	r2, r3
 8003812:	d903      	bls.n	800381c <xTaskPriorityDisinherit+0xa4>
 8003814:	693b      	ldr	r3, [r7, #16]
 8003816:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003818:	4a0c      	ldr	r2, [pc, #48]	; (800384c <xTaskPriorityDisinherit+0xd4>)
 800381a:	6013      	str	r3, [r2, #0]
 800381c:	693b      	ldr	r3, [r7, #16]
 800381e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003820:	4613      	mov	r3, r2
 8003822:	009b      	lsls	r3, r3, #2
 8003824:	4413      	add	r3, r2
 8003826:	009b      	lsls	r3, r3, #2
 8003828:	4a09      	ldr	r2, [pc, #36]	; (8003850 <xTaskPriorityDisinherit+0xd8>)
 800382a:	441a      	add	r2, r3
 800382c:	693b      	ldr	r3, [r7, #16]
 800382e:	3304      	adds	r3, #4
 8003830:	4619      	mov	r1, r3
 8003832:	4610      	mov	r0, r2
 8003834:	f7fe f9f9 	bl	8001c2a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8003838:	2301      	movs	r3, #1
 800383a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800383c:	697b      	ldr	r3, [r7, #20]
	}
 800383e:	4618      	mov	r0, r3
 8003840:	3718      	adds	r7, #24
 8003842:	46bd      	mov	sp, r7
 8003844:	bd80      	pop	{r7, pc}
 8003846:	bf00      	nop
 8003848:	2000074c 	.word	0x2000074c
 800384c:	20000c28 	.word	0x20000c28
 8003850:	20000750 	.word	0x20000750

08003854 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8003854:	b580      	push	{r7, lr}
 8003856:	b088      	sub	sp, #32
 8003858:	af00      	add	r7, sp, #0
 800385a:	6078      	str	r0, [r7, #4]
 800385c:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8003862:	2301      	movs	r3, #1
 8003864:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	2b00      	cmp	r3, #0
 800386a:	d06a      	beq.n	8003942 <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800386c:	69bb      	ldr	r3, [r7, #24]
 800386e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003870:	2b00      	cmp	r3, #0
 8003872:	d10a      	bne.n	800388a <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 8003874:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003878:	f383 8811 	msr	BASEPRI, r3
 800387c:	f3bf 8f6f 	isb	sy
 8003880:	f3bf 8f4f 	dsb	sy
 8003884:	60fb      	str	r3, [r7, #12]
}
 8003886:	bf00      	nop
 8003888:	e7fe      	b.n	8003888 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800388a:	69bb      	ldr	r3, [r7, #24]
 800388c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800388e:	683a      	ldr	r2, [r7, #0]
 8003890:	429a      	cmp	r2, r3
 8003892:	d902      	bls.n	800389a <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8003894:	683b      	ldr	r3, [r7, #0]
 8003896:	61fb      	str	r3, [r7, #28]
 8003898:	e002      	b.n	80038a0 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800389a:	69bb      	ldr	r3, [r7, #24]
 800389c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800389e:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 80038a0:	69bb      	ldr	r3, [r7, #24]
 80038a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038a4:	69fa      	ldr	r2, [r7, #28]
 80038a6:	429a      	cmp	r2, r3
 80038a8:	d04b      	beq.n	8003942 <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 80038aa:	69bb      	ldr	r3, [r7, #24]
 80038ac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80038ae:	697a      	ldr	r2, [r7, #20]
 80038b0:	429a      	cmp	r2, r3
 80038b2:	d146      	bne.n	8003942 <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 80038b4:	4b25      	ldr	r3, [pc, #148]	; (800394c <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	69ba      	ldr	r2, [r7, #24]
 80038ba:	429a      	cmp	r2, r3
 80038bc:	d10a      	bne.n	80038d4 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 80038be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038c2:	f383 8811 	msr	BASEPRI, r3
 80038c6:	f3bf 8f6f 	isb	sy
 80038ca:	f3bf 8f4f 	dsb	sy
 80038ce:	60bb      	str	r3, [r7, #8]
}
 80038d0:	bf00      	nop
 80038d2:	e7fe      	b.n	80038d2 <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 80038d4:	69bb      	ldr	r3, [r7, #24]
 80038d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038d8:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 80038da:	69bb      	ldr	r3, [r7, #24]
 80038dc:	69fa      	ldr	r2, [r7, #28]
 80038de:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80038e0:	69bb      	ldr	r3, [r7, #24]
 80038e2:	699b      	ldr	r3, [r3, #24]
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	db04      	blt.n	80038f2 <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80038e8:	69fb      	ldr	r3, [r7, #28]
 80038ea:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80038ee:	69bb      	ldr	r3, [r7, #24]
 80038f0:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80038f2:	69bb      	ldr	r3, [r7, #24]
 80038f4:	6959      	ldr	r1, [r3, #20]
 80038f6:	693a      	ldr	r2, [r7, #16]
 80038f8:	4613      	mov	r3, r2
 80038fa:	009b      	lsls	r3, r3, #2
 80038fc:	4413      	add	r3, r2
 80038fe:	009b      	lsls	r3, r3, #2
 8003900:	4a13      	ldr	r2, [pc, #76]	; (8003950 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8003902:	4413      	add	r3, r2
 8003904:	4299      	cmp	r1, r3
 8003906:	d11c      	bne.n	8003942 <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003908:	69bb      	ldr	r3, [r7, #24]
 800390a:	3304      	adds	r3, #4
 800390c:	4618      	mov	r0, r3
 800390e:	f7fe f9e9 	bl	8001ce4 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8003912:	69bb      	ldr	r3, [r7, #24]
 8003914:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003916:	4b0f      	ldr	r3, [pc, #60]	; (8003954 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	429a      	cmp	r2, r3
 800391c:	d903      	bls.n	8003926 <vTaskPriorityDisinheritAfterTimeout+0xd2>
 800391e:	69bb      	ldr	r3, [r7, #24]
 8003920:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003922:	4a0c      	ldr	r2, [pc, #48]	; (8003954 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8003924:	6013      	str	r3, [r2, #0]
 8003926:	69bb      	ldr	r3, [r7, #24]
 8003928:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800392a:	4613      	mov	r3, r2
 800392c:	009b      	lsls	r3, r3, #2
 800392e:	4413      	add	r3, r2
 8003930:	009b      	lsls	r3, r3, #2
 8003932:	4a07      	ldr	r2, [pc, #28]	; (8003950 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8003934:	441a      	add	r2, r3
 8003936:	69bb      	ldr	r3, [r7, #24]
 8003938:	3304      	adds	r3, #4
 800393a:	4619      	mov	r1, r3
 800393c:	4610      	mov	r0, r2
 800393e:	f7fe f974 	bl	8001c2a <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8003942:	bf00      	nop
 8003944:	3720      	adds	r7, #32
 8003946:	46bd      	mov	sp, r7
 8003948:	bd80      	pop	{r7, pc}
 800394a:	bf00      	nop
 800394c:	2000074c 	.word	0x2000074c
 8003950:	20000750 	.word	0x20000750
 8003954:	20000c28 	.word	0x20000c28

08003958 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8003958:	b480      	push	{r7}
 800395a:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800395c:	4b07      	ldr	r3, [pc, #28]	; (800397c <pvTaskIncrementMutexHeldCount+0x24>)
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	2b00      	cmp	r3, #0
 8003962:	d004      	beq.n	800396e <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8003964:	4b05      	ldr	r3, [pc, #20]	; (800397c <pvTaskIncrementMutexHeldCount+0x24>)
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800396a:	3201      	adds	r2, #1
 800396c:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 800396e:	4b03      	ldr	r3, [pc, #12]	; (800397c <pvTaskIncrementMutexHeldCount+0x24>)
 8003970:	681b      	ldr	r3, [r3, #0]
	}
 8003972:	4618      	mov	r0, r3
 8003974:	46bd      	mov	sp, r7
 8003976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800397a:	4770      	bx	lr
 800397c:	2000074c 	.word	0x2000074c

08003980 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8003980:	b580      	push	{r7, lr}
 8003982:	b084      	sub	sp, #16
 8003984:	af00      	add	r7, sp, #0
 8003986:	6078      	str	r0, [r7, #4]
 8003988:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800398a:	4b21      	ldr	r3, [pc, #132]	; (8003a10 <prvAddCurrentTaskToDelayedList+0x90>)
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003990:	4b20      	ldr	r3, [pc, #128]	; (8003a14 <prvAddCurrentTaskToDelayedList+0x94>)
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	3304      	adds	r3, #4
 8003996:	4618      	mov	r0, r3
 8003998:	f7fe f9a4 	bl	8001ce4 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80039a2:	d10a      	bne.n	80039ba <prvAddCurrentTaskToDelayedList+0x3a>
 80039a4:	683b      	ldr	r3, [r7, #0]
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d007      	beq.n	80039ba <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80039aa:	4b1a      	ldr	r3, [pc, #104]	; (8003a14 <prvAddCurrentTaskToDelayedList+0x94>)
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	3304      	adds	r3, #4
 80039b0:	4619      	mov	r1, r3
 80039b2:	4819      	ldr	r0, [pc, #100]	; (8003a18 <prvAddCurrentTaskToDelayedList+0x98>)
 80039b4:	f7fe f939 	bl	8001c2a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80039b8:	e026      	b.n	8003a08 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80039ba:	68fa      	ldr	r2, [r7, #12]
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	4413      	add	r3, r2
 80039c0:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80039c2:	4b14      	ldr	r3, [pc, #80]	; (8003a14 <prvAddCurrentTaskToDelayedList+0x94>)
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	68ba      	ldr	r2, [r7, #8]
 80039c8:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80039ca:	68ba      	ldr	r2, [r7, #8]
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	429a      	cmp	r2, r3
 80039d0:	d209      	bcs.n	80039e6 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80039d2:	4b12      	ldr	r3, [pc, #72]	; (8003a1c <prvAddCurrentTaskToDelayedList+0x9c>)
 80039d4:	681a      	ldr	r2, [r3, #0]
 80039d6:	4b0f      	ldr	r3, [pc, #60]	; (8003a14 <prvAddCurrentTaskToDelayedList+0x94>)
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	3304      	adds	r3, #4
 80039dc:	4619      	mov	r1, r3
 80039de:	4610      	mov	r0, r2
 80039e0:	f7fe f947 	bl	8001c72 <vListInsert>
}
 80039e4:	e010      	b.n	8003a08 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80039e6:	4b0e      	ldr	r3, [pc, #56]	; (8003a20 <prvAddCurrentTaskToDelayedList+0xa0>)
 80039e8:	681a      	ldr	r2, [r3, #0]
 80039ea:	4b0a      	ldr	r3, [pc, #40]	; (8003a14 <prvAddCurrentTaskToDelayedList+0x94>)
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	3304      	adds	r3, #4
 80039f0:	4619      	mov	r1, r3
 80039f2:	4610      	mov	r0, r2
 80039f4:	f7fe f93d 	bl	8001c72 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80039f8:	4b0a      	ldr	r3, [pc, #40]	; (8003a24 <prvAddCurrentTaskToDelayedList+0xa4>)
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	68ba      	ldr	r2, [r7, #8]
 80039fe:	429a      	cmp	r2, r3
 8003a00:	d202      	bcs.n	8003a08 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8003a02:	4a08      	ldr	r2, [pc, #32]	; (8003a24 <prvAddCurrentTaskToDelayedList+0xa4>)
 8003a04:	68bb      	ldr	r3, [r7, #8]
 8003a06:	6013      	str	r3, [r2, #0]
}
 8003a08:	bf00      	nop
 8003a0a:	3710      	adds	r7, #16
 8003a0c:	46bd      	mov	sp, r7
 8003a0e:	bd80      	pop	{r7, pc}
 8003a10:	20000c24 	.word	0x20000c24
 8003a14:	2000074c 	.word	0x2000074c
 8003a18:	20000c0c 	.word	0x20000c0c
 8003a1c:	20000bdc 	.word	0x20000bdc
 8003a20:	20000bd8 	.word	0x20000bd8
 8003a24:	20000c40 	.word	0x20000c40

08003a28 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8003a28:	b580      	push	{r7, lr}
 8003a2a:	b08a      	sub	sp, #40	; 0x28
 8003a2c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8003a2e:	2300      	movs	r3, #0
 8003a30:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8003a32:	f000 fb07 	bl	8004044 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8003a36:	4b1c      	ldr	r3, [pc, #112]	; (8003aa8 <xTimerCreateTimerTask+0x80>)
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d021      	beq.n	8003a82 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8003a3e:	2300      	movs	r3, #0
 8003a40:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8003a42:	2300      	movs	r3, #0
 8003a44:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8003a46:	1d3a      	adds	r2, r7, #4
 8003a48:	f107 0108 	add.w	r1, r7, #8
 8003a4c:	f107 030c 	add.w	r3, r7, #12
 8003a50:	4618      	mov	r0, r3
 8003a52:	f7fe f8a3 	bl	8001b9c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8003a56:	6879      	ldr	r1, [r7, #4]
 8003a58:	68bb      	ldr	r3, [r7, #8]
 8003a5a:	68fa      	ldr	r2, [r7, #12]
 8003a5c:	9202      	str	r2, [sp, #8]
 8003a5e:	9301      	str	r3, [sp, #4]
 8003a60:	2302      	movs	r3, #2
 8003a62:	9300      	str	r3, [sp, #0]
 8003a64:	2300      	movs	r3, #0
 8003a66:	460a      	mov	r2, r1
 8003a68:	4910      	ldr	r1, [pc, #64]	; (8003aac <xTimerCreateTimerTask+0x84>)
 8003a6a:	4811      	ldr	r0, [pc, #68]	; (8003ab0 <xTimerCreateTimerTask+0x88>)
 8003a6c:	f7fe ffe0 	bl	8002a30 <xTaskCreateStatic>
 8003a70:	4603      	mov	r3, r0
 8003a72:	4a10      	ldr	r2, [pc, #64]	; (8003ab4 <xTimerCreateTimerTask+0x8c>)
 8003a74:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8003a76:	4b0f      	ldr	r3, [pc, #60]	; (8003ab4 <xTimerCreateTimerTask+0x8c>)
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d001      	beq.n	8003a82 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8003a7e:	2301      	movs	r3, #1
 8003a80:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8003a82:	697b      	ldr	r3, [r7, #20]
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d10a      	bne.n	8003a9e <xTimerCreateTimerTask+0x76>
	__asm volatile
 8003a88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a8c:	f383 8811 	msr	BASEPRI, r3
 8003a90:	f3bf 8f6f 	isb	sy
 8003a94:	f3bf 8f4f 	dsb	sy
 8003a98:	613b      	str	r3, [r7, #16]
}
 8003a9a:	bf00      	nop
 8003a9c:	e7fe      	b.n	8003a9c <xTimerCreateTimerTask+0x74>
	return xReturn;
 8003a9e:	697b      	ldr	r3, [r7, #20]
}
 8003aa0:	4618      	mov	r0, r3
 8003aa2:	3718      	adds	r7, #24
 8003aa4:	46bd      	mov	sp, r7
 8003aa6:	bd80      	pop	{r7, pc}
 8003aa8:	20000c7c 	.word	0x20000c7c
 8003aac:	080049e8 	.word	0x080049e8
 8003ab0:	08003bed 	.word	0x08003bed
 8003ab4:	20000c80 	.word	0x20000c80

08003ab8 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8003ab8:	b580      	push	{r7, lr}
 8003aba:	b08a      	sub	sp, #40	; 0x28
 8003abc:	af00      	add	r7, sp, #0
 8003abe:	60f8      	str	r0, [r7, #12]
 8003ac0:	60b9      	str	r1, [r7, #8]
 8003ac2:	607a      	str	r2, [r7, #4]
 8003ac4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8003ac6:	2300      	movs	r3, #0
 8003ac8:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d10a      	bne.n	8003ae6 <xTimerGenericCommand+0x2e>
	__asm volatile
 8003ad0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ad4:	f383 8811 	msr	BASEPRI, r3
 8003ad8:	f3bf 8f6f 	isb	sy
 8003adc:	f3bf 8f4f 	dsb	sy
 8003ae0:	623b      	str	r3, [r7, #32]
}
 8003ae2:	bf00      	nop
 8003ae4:	e7fe      	b.n	8003ae4 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8003ae6:	4b1a      	ldr	r3, [pc, #104]	; (8003b50 <xTimerGenericCommand+0x98>)
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d02a      	beq.n	8003b44 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8003aee:	68bb      	ldr	r3, [r7, #8]
 8003af0:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8003afa:	68bb      	ldr	r3, [r7, #8]
 8003afc:	2b05      	cmp	r3, #5
 8003afe:	dc18      	bgt.n	8003b32 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8003b00:	f7ff fdb4 	bl	800366c <xTaskGetSchedulerState>
 8003b04:	4603      	mov	r3, r0
 8003b06:	2b02      	cmp	r3, #2
 8003b08:	d109      	bne.n	8003b1e <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8003b0a:	4b11      	ldr	r3, [pc, #68]	; (8003b50 <xTimerGenericCommand+0x98>)
 8003b0c:	6818      	ldr	r0, [r3, #0]
 8003b0e:	f107 0110 	add.w	r1, r7, #16
 8003b12:	2300      	movs	r3, #0
 8003b14:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003b16:	f7fe fa7f 	bl	8002018 <xQueueGenericSend>
 8003b1a:	6278      	str	r0, [r7, #36]	; 0x24
 8003b1c:	e012      	b.n	8003b44 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8003b1e:	4b0c      	ldr	r3, [pc, #48]	; (8003b50 <xTimerGenericCommand+0x98>)
 8003b20:	6818      	ldr	r0, [r3, #0]
 8003b22:	f107 0110 	add.w	r1, r7, #16
 8003b26:	2300      	movs	r3, #0
 8003b28:	2200      	movs	r2, #0
 8003b2a:	f7fe fa75 	bl	8002018 <xQueueGenericSend>
 8003b2e:	6278      	str	r0, [r7, #36]	; 0x24
 8003b30:	e008      	b.n	8003b44 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8003b32:	4b07      	ldr	r3, [pc, #28]	; (8003b50 <xTimerGenericCommand+0x98>)
 8003b34:	6818      	ldr	r0, [r3, #0]
 8003b36:	f107 0110 	add.w	r1, r7, #16
 8003b3a:	2300      	movs	r3, #0
 8003b3c:	683a      	ldr	r2, [r7, #0]
 8003b3e:	f7fe fb69 	bl	8002214 <xQueueGenericSendFromISR>
 8003b42:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8003b44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8003b46:	4618      	mov	r0, r3
 8003b48:	3728      	adds	r7, #40	; 0x28
 8003b4a:	46bd      	mov	sp, r7
 8003b4c:	bd80      	pop	{r7, pc}
 8003b4e:	bf00      	nop
 8003b50:	20000c7c 	.word	0x20000c7c

08003b54 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8003b54:	b580      	push	{r7, lr}
 8003b56:	b088      	sub	sp, #32
 8003b58:	af02      	add	r7, sp, #8
 8003b5a:	6078      	str	r0, [r7, #4]
 8003b5c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003b5e:	4b22      	ldr	r3, [pc, #136]	; (8003be8 <prvProcessExpiredTimer+0x94>)
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	68db      	ldr	r3, [r3, #12]
 8003b64:	68db      	ldr	r3, [r3, #12]
 8003b66:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003b68:	697b      	ldr	r3, [r7, #20]
 8003b6a:	3304      	adds	r3, #4
 8003b6c:	4618      	mov	r0, r3
 8003b6e:	f7fe f8b9 	bl	8001ce4 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8003b72:	697b      	ldr	r3, [r7, #20]
 8003b74:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003b78:	f003 0304 	and.w	r3, r3, #4
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d022      	beq.n	8003bc6 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8003b80:	697b      	ldr	r3, [r7, #20]
 8003b82:	699a      	ldr	r2, [r3, #24]
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	18d1      	adds	r1, r2, r3
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	683a      	ldr	r2, [r7, #0]
 8003b8c:	6978      	ldr	r0, [r7, #20]
 8003b8e:	f000 f8d1 	bl	8003d34 <prvInsertTimerInActiveList>
 8003b92:	4603      	mov	r3, r0
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d01f      	beq.n	8003bd8 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8003b98:	2300      	movs	r3, #0
 8003b9a:	9300      	str	r3, [sp, #0]
 8003b9c:	2300      	movs	r3, #0
 8003b9e:	687a      	ldr	r2, [r7, #4]
 8003ba0:	2100      	movs	r1, #0
 8003ba2:	6978      	ldr	r0, [r7, #20]
 8003ba4:	f7ff ff88 	bl	8003ab8 <xTimerGenericCommand>
 8003ba8:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8003baa:	693b      	ldr	r3, [r7, #16]
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d113      	bne.n	8003bd8 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8003bb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003bb4:	f383 8811 	msr	BASEPRI, r3
 8003bb8:	f3bf 8f6f 	isb	sy
 8003bbc:	f3bf 8f4f 	dsb	sy
 8003bc0:	60fb      	str	r3, [r7, #12]
}
 8003bc2:	bf00      	nop
 8003bc4:	e7fe      	b.n	8003bc4 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8003bc6:	697b      	ldr	r3, [r7, #20]
 8003bc8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003bcc:	f023 0301 	bic.w	r3, r3, #1
 8003bd0:	b2da      	uxtb	r2, r3
 8003bd2:	697b      	ldr	r3, [r7, #20]
 8003bd4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003bd8:	697b      	ldr	r3, [r7, #20]
 8003bda:	6a1b      	ldr	r3, [r3, #32]
 8003bdc:	6978      	ldr	r0, [r7, #20]
 8003bde:	4798      	blx	r3
}
 8003be0:	bf00      	nop
 8003be2:	3718      	adds	r7, #24
 8003be4:	46bd      	mov	sp, r7
 8003be6:	bd80      	pop	{r7, pc}
 8003be8:	20000c74 	.word	0x20000c74

08003bec <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8003bec:	b580      	push	{r7, lr}
 8003bee:	b084      	sub	sp, #16
 8003bf0:	af00      	add	r7, sp, #0
 8003bf2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8003bf4:	f107 0308 	add.w	r3, r7, #8
 8003bf8:	4618      	mov	r0, r3
 8003bfa:	f000 f857 	bl	8003cac <prvGetNextExpireTime>
 8003bfe:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8003c00:	68bb      	ldr	r3, [r7, #8]
 8003c02:	4619      	mov	r1, r3
 8003c04:	68f8      	ldr	r0, [r7, #12]
 8003c06:	f000 f803 	bl	8003c10 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8003c0a:	f000 f8d5 	bl	8003db8 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8003c0e:	e7f1      	b.n	8003bf4 <prvTimerTask+0x8>

08003c10 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8003c10:	b580      	push	{r7, lr}
 8003c12:	b084      	sub	sp, #16
 8003c14:	af00      	add	r7, sp, #0
 8003c16:	6078      	str	r0, [r7, #4]
 8003c18:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8003c1a:	f7ff f945 	bl	8002ea8 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8003c1e:	f107 0308 	add.w	r3, r7, #8
 8003c22:	4618      	mov	r0, r3
 8003c24:	f000 f866 	bl	8003cf4 <prvSampleTimeNow>
 8003c28:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8003c2a:	68bb      	ldr	r3, [r7, #8]
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d130      	bne.n	8003c92 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8003c30:	683b      	ldr	r3, [r7, #0]
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d10a      	bne.n	8003c4c <prvProcessTimerOrBlockTask+0x3c>
 8003c36:	687a      	ldr	r2, [r7, #4]
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	429a      	cmp	r2, r3
 8003c3c:	d806      	bhi.n	8003c4c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8003c3e:	f7ff f941 	bl	8002ec4 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8003c42:	68f9      	ldr	r1, [r7, #12]
 8003c44:	6878      	ldr	r0, [r7, #4]
 8003c46:	f7ff ff85 	bl	8003b54 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8003c4a:	e024      	b.n	8003c96 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8003c4c:	683b      	ldr	r3, [r7, #0]
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d008      	beq.n	8003c64 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8003c52:	4b13      	ldr	r3, [pc, #76]	; (8003ca0 <prvProcessTimerOrBlockTask+0x90>)
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d101      	bne.n	8003c60 <prvProcessTimerOrBlockTask+0x50>
 8003c5c:	2301      	movs	r3, #1
 8003c5e:	e000      	b.n	8003c62 <prvProcessTimerOrBlockTask+0x52>
 8003c60:	2300      	movs	r3, #0
 8003c62:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8003c64:	4b0f      	ldr	r3, [pc, #60]	; (8003ca4 <prvProcessTimerOrBlockTask+0x94>)
 8003c66:	6818      	ldr	r0, [r3, #0]
 8003c68:	687a      	ldr	r2, [r7, #4]
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	1ad3      	subs	r3, r2, r3
 8003c6e:	683a      	ldr	r2, [r7, #0]
 8003c70:	4619      	mov	r1, r3
 8003c72:	f7fe fea9 	bl	80029c8 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8003c76:	f7ff f925 	bl	8002ec4 <xTaskResumeAll>
 8003c7a:	4603      	mov	r3, r0
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d10a      	bne.n	8003c96 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8003c80:	4b09      	ldr	r3, [pc, #36]	; (8003ca8 <prvProcessTimerOrBlockTask+0x98>)
 8003c82:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003c86:	601a      	str	r2, [r3, #0]
 8003c88:	f3bf 8f4f 	dsb	sy
 8003c8c:	f3bf 8f6f 	isb	sy
}
 8003c90:	e001      	b.n	8003c96 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8003c92:	f7ff f917 	bl	8002ec4 <xTaskResumeAll>
}
 8003c96:	bf00      	nop
 8003c98:	3710      	adds	r7, #16
 8003c9a:	46bd      	mov	sp, r7
 8003c9c:	bd80      	pop	{r7, pc}
 8003c9e:	bf00      	nop
 8003ca0:	20000c78 	.word	0x20000c78
 8003ca4:	20000c7c 	.word	0x20000c7c
 8003ca8:	e000ed04 	.word	0xe000ed04

08003cac <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8003cac:	b480      	push	{r7}
 8003cae:	b085      	sub	sp, #20
 8003cb0:	af00      	add	r7, sp, #0
 8003cb2:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8003cb4:	4b0e      	ldr	r3, [pc, #56]	; (8003cf0 <prvGetNextExpireTime+0x44>)
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d101      	bne.n	8003cc2 <prvGetNextExpireTime+0x16>
 8003cbe:	2201      	movs	r2, #1
 8003cc0:	e000      	b.n	8003cc4 <prvGetNextExpireTime+0x18>
 8003cc2:	2200      	movs	r2, #0
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d105      	bne.n	8003cdc <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003cd0:	4b07      	ldr	r3, [pc, #28]	; (8003cf0 <prvGetNextExpireTime+0x44>)
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	68db      	ldr	r3, [r3, #12]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	60fb      	str	r3, [r7, #12]
 8003cda:	e001      	b.n	8003ce0 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8003cdc:	2300      	movs	r3, #0
 8003cde:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8003ce0:	68fb      	ldr	r3, [r7, #12]
}
 8003ce2:	4618      	mov	r0, r3
 8003ce4:	3714      	adds	r7, #20
 8003ce6:	46bd      	mov	sp, r7
 8003ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cec:	4770      	bx	lr
 8003cee:	bf00      	nop
 8003cf0:	20000c74 	.word	0x20000c74

08003cf4 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8003cf4:	b580      	push	{r7, lr}
 8003cf6:	b084      	sub	sp, #16
 8003cf8:	af00      	add	r7, sp, #0
 8003cfa:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8003cfc:	f7ff f980 	bl	8003000 <xTaskGetTickCount>
 8003d00:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8003d02:	4b0b      	ldr	r3, [pc, #44]	; (8003d30 <prvSampleTimeNow+0x3c>)
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	68fa      	ldr	r2, [r7, #12]
 8003d08:	429a      	cmp	r2, r3
 8003d0a:	d205      	bcs.n	8003d18 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8003d0c:	f000 f936 	bl	8003f7c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	2201      	movs	r2, #1
 8003d14:	601a      	str	r2, [r3, #0]
 8003d16:	e002      	b.n	8003d1e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	2200      	movs	r2, #0
 8003d1c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8003d1e:	4a04      	ldr	r2, [pc, #16]	; (8003d30 <prvSampleTimeNow+0x3c>)
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8003d24:	68fb      	ldr	r3, [r7, #12]
}
 8003d26:	4618      	mov	r0, r3
 8003d28:	3710      	adds	r7, #16
 8003d2a:	46bd      	mov	sp, r7
 8003d2c:	bd80      	pop	{r7, pc}
 8003d2e:	bf00      	nop
 8003d30:	20000c84 	.word	0x20000c84

08003d34 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8003d34:	b580      	push	{r7, lr}
 8003d36:	b086      	sub	sp, #24
 8003d38:	af00      	add	r7, sp, #0
 8003d3a:	60f8      	str	r0, [r7, #12]
 8003d3c:	60b9      	str	r1, [r7, #8]
 8003d3e:	607a      	str	r2, [r7, #4]
 8003d40:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8003d42:	2300      	movs	r3, #0
 8003d44:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	68ba      	ldr	r2, [r7, #8]
 8003d4a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	68fa      	ldr	r2, [r7, #12]
 8003d50:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8003d52:	68ba      	ldr	r2, [r7, #8]
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	429a      	cmp	r2, r3
 8003d58:	d812      	bhi.n	8003d80 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003d5a:	687a      	ldr	r2, [r7, #4]
 8003d5c:	683b      	ldr	r3, [r7, #0]
 8003d5e:	1ad2      	subs	r2, r2, r3
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	699b      	ldr	r3, [r3, #24]
 8003d64:	429a      	cmp	r2, r3
 8003d66:	d302      	bcc.n	8003d6e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8003d68:	2301      	movs	r3, #1
 8003d6a:	617b      	str	r3, [r7, #20]
 8003d6c:	e01b      	b.n	8003da6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8003d6e:	4b10      	ldr	r3, [pc, #64]	; (8003db0 <prvInsertTimerInActiveList+0x7c>)
 8003d70:	681a      	ldr	r2, [r3, #0]
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	3304      	adds	r3, #4
 8003d76:	4619      	mov	r1, r3
 8003d78:	4610      	mov	r0, r2
 8003d7a:	f7fd ff7a 	bl	8001c72 <vListInsert>
 8003d7e:	e012      	b.n	8003da6 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8003d80:	687a      	ldr	r2, [r7, #4]
 8003d82:	683b      	ldr	r3, [r7, #0]
 8003d84:	429a      	cmp	r2, r3
 8003d86:	d206      	bcs.n	8003d96 <prvInsertTimerInActiveList+0x62>
 8003d88:	68ba      	ldr	r2, [r7, #8]
 8003d8a:	683b      	ldr	r3, [r7, #0]
 8003d8c:	429a      	cmp	r2, r3
 8003d8e:	d302      	bcc.n	8003d96 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8003d90:	2301      	movs	r3, #1
 8003d92:	617b      	str	r3, [r7, #20]
 8003d94:	e007      	b.n	8003da6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8003d96:	4b07      	ldr	r3, [pc, #28]	; (8003db4 <prvInsertTimerInActiveList+0x80>)
 8003d98:	681a      	ldr	r2, [r3, #0]
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	3304      	adds	r3, #4
 8003d9e:	4619      	mov	r1, r3
 8003da0:	4610      	mov	r0, r2
 8003da2:	f7fd ff66 	bl	8001c72 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8003da6:	697b      	ldr	r3, [r7, #20]
}
 8003da8:	4618      	mov	r0, r3
 8003daa:	3718      	adds	r7, #24
 8003dac:	46bd      	mov	sp, r7
 8003dae:	bd80      	pop	{r7, pc}
 8003db0:	20000c78 	.word	0x20000c78
 8003db4:	20000c74 	.word	0x20000c74

08003db8 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8003db8:	b580      	push	{r7, lr}
 8003dba:	b08e      	sub	sp, #56	; 0x38
 8003dbc:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8003dbe:	e0ca      	b.n	8003f56 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	da18      	bge.n	8003df8 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8003dc6:	1d3b      	adds	r3, r7, #4
 8003dc8:	3304      	adds	r3, #4
 8003dca:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8003dcc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d10a      	bne.n	8003de8 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8003dd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003dd6:	f383 8811 	msr	BASEPRI, r3
 8003dda:	f3bf 8f6f 	isb	sy
 8003dde:	f3bf 8f4f 	dsb	sy
 8003de2:	61fb      	str	r3, [r7, #28]
}
 8003de4:	bf00      	nop
 8003de6:	e7fe      	b.n	8003de6 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8003de8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003dee:	6850      	ldr	r0, [r2, #4]
 8003df0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003df2:	6892      	ldr	r2, [r2, #8]
 8003df4:	4611      	mov	r1, r2
 8003df6:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	f2c0 80aa 	blt.w	8003f54 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8003e04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e06:	695b      	ldr	r3, [r3, #20]
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d004      	beq.n	8003e16 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003e0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e0e:	3304      	adds	r3, #4
 8003e10:	4618      	mov	r0, r3
 8003e12:	f7fd ff67 	bl	8001ce4 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8003e16:	463b      	mov	r3, r7
 8003e18:	4618      	mov	r0, r3
 8003e1a:	f7ff ff6b 	bl	8003cf4 <prvSampleTimeNow>
 8003e1e:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	2b09      	cmp	r3, #9
 8003e24:	f200 8097 	bhi.w	8003f56 <prvProcessReceivedCommands+0x19e>
 8003e28:	a201      	add	r2, pc, #4	; (adr r2, 8003e30 <prvProcessReceivedCommands+0x78>)
 8003e2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e2e:	bf00      	nop
 8003e30:	08003e59 	.word	0x08003e59
 8003e34:	08003e59 	.word	0x08003e59
 8003e38:	08003e59 	.word	0x08003e59
 8003e3c:	08003ecd 	.word	0x08003ecd
 8003e40:	08003ee1 	.word	0x08003ee1
 8003e44:	08003f2b 	.word	0x08003f2b
 8003e48:	08003e59 	.word	0x08003e59
 8003e4c:	08003e59 	.word	0x08003e59
 8003e50:	08003ecd 	.word	0x08003ecd
 8003e54:	08003ee1 	.word	0x08003ee1
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8003e58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e5a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003e5e:	f043 0301 	orr.w	r3, r3, #1
 8003e62:	b2da      	uxtb	r2, r3
 8003e64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e66:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8003e6a:	68ba      	ldr	r2, [r7, #8]
 8003e6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e6e:	699b      	ldr	r3, [r3, #24]
 8003e70:	18d1      	adds	r1, r2, r3
 8003e72:	68bb      	ldr	r3, [r7, #8]
 8003e74:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e76:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003e78:	f7ff ff5c 	bl	8003d34 <prvInsertTimerInActiveList>
 8003e7c:	4603      	mov	r3, r0
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d069      	beq.n	8003f56 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003e82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e84:	6a1b      	ldr	r3, [r3, #32]
 8003e86:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003e88:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8003e8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e8c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003e90:	f003 0304 	and.w	r3, r3, #4
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d05e      	beq.n	8003f56 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8003e98:	68ba      	ldr	r2, [r7, #8]
 8003e9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e9c:	699b      	ldr	r3, [r3, #24]
 8003e9e:	441a      	add	r2, r3
 8003ea0:	2300      	movs	r3, #0
 8003ea2:	9300      	str	r3, [sp, #0]
 8003ea4:	2300      	movs	r3, #0
 8003ea6:	2100      	movs	r1, #0
 8003ea8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003eaa:	f7ff fe05 	bl	8003ab8 <xTimerGenericCommand>
 8003eae:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8003eb0:	6a3b      	ldr	r3, [r7, #32]
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d14f      	bne.n	8003f56 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8003eb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003eba:	f383 8811 	msr	BASEPRI, r3
 8003ebe:	f3bf 8f6f 	isb	sy
 8003ec2:	f3bf 8f4f 	dsb	sy
 8003ec6:	61bb      	str	r3, [r7, #24]
}
 8003ec8:	bf00      	nop
 8003eca:	e7fe      	b.n	8003eca <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8003ecc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ece:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003ed2:	f023 0301 	bic.w	r3, r3, #1
 8003ed6:	b2da      	uxtb	r2, r3
 8003ed8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003eda:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8003ede:	e03a      	b.n	8003f56 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8003ee0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ee2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003ee6:	f043 0301 	orr.w	r3, r3, #1
 8003eea:	b2da      	uxtb	r2, r3
 8003eec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003eee:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8003ef2:	68ba      	ldr	r2, [r7, #8]
 8003ef4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ef6:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8003ef8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003efa:	699b      	ldr	r3, [r3, #24]
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d10a      	bne.n	8003f16 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8003f00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f04:	f383 8811 	msr	BASEPRI, r3
 8003f08:	f3bf 8f6f 	isb	sy
 8003f0c:	f3bf 8f4f 	dsb	sy
 8003f10:	617b      	str	r3, [r7, #20]
}
 8003f12:	bf00      	nop
 8003f14:	e7fe      	b.n	8003f14 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8003f16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f18:	699a      	ldr	r2, [r3, #24]
 8003f1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f1c:	18d1      	adds	r1, r2, r3
 8003f1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f20:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f22:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003f24:	f7ff ff06 	bl	8003d34 <prvInsertTimerInActiveList>
					break;
 8003f28:	e015      	b.n	8003f56 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8003f2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f2c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003f30:	f003 0302 	and.w	r3, r3, #2
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d103      	bne.n	8003f40 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8003f38:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003f3a:	f000 fbe1 	bl	8004700 <vPortFree>
 8003f3e:	e00a      	b.n	8003f56 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8003f40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f42:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003f46:	f023 0301 	bic.w	r3, r3, #1
 8003f4a:	b2da      	uxtb	r2, r3
 8003f4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f4e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8003f52:	e000      	b.n	8003f56 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8003f54:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8003f56:	4b08      	ldr	r3, [pc, #32]	; (8003f78 <prvProcessReceivedCommands+0x1c0>)
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	1d39      	adds	r1, r7, #4
 8003f5c:	2200      	movs	r2, #0
 8003f5e:	4618      	mov	r0, r3
 8003f60:	f7fe f9f4 	bl	800234c <xQueueReceive>
 8003f64:	4603      	mov	r3, r0
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	f47f af2a 	bne.w	8003dc0 <prvProcessReceivedCommands+0x8>
	}
}
 8003f6c:	bf00      	nop
 8003f6e:	bf00      	nop
 8003f70:	3730      	adds	r7, #48	; 0x30
 8003f72:	46bd      	mov	sp, r7
 8003f74:	bd80      	pop	{r7, pc}
 8003f76:	bf00      	nop
 8003f78:	20000c7c 	.word	0x20000c7c

08003f7c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8003f7c:	b580      	push	{r7, lr}
 8003f7e:	b088      	sub	sp, #32
 8003f80:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8003f82:	e048      	b.n	8004016 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003f84:	4b2d      	ldr	r3, [pc, #180]	; (800403c <prvSwitchTimerLists+0xc0>)
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	68db      	ldr	r3, [r3, #12]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003f8e:	4b2b      	ldr	r3, [pc, #172]	; (800403c <prvSwitchTimerLists+0xc0>)
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	68db      	ldr	r3, [r3, #12]
 8003f94:	68db      	ldr	r3, [r3, #12]
 8003f96:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	3304      	adds	r3, #4
 8003f9c:	4618      	mov	r0, r3
 8003f9e:	f7fd fea1 	bl	8001ce4 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	6a1b      	ldr	r3, [r3, #32]
 8003fa6:	68f8      	ldr	r0, [r7, #12]
 8003fa8:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003fb0:	f003 0304 	and.w	r3, r3, #4
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d02e      	beq.n	8004016 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	699b      	ldr	r3, [r3, #24]
 8003fbc:	693a      	ldr	r2, [r7, #16]
 8003fbe:	4413      	add	r3, r2
 8003fc0:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8003fc2:	68ba      	ldr	r2, [r7, #8]
 8003fc4:	693b      	ldr	r3, [r7, #16]
 8003fc6:	429a      	cmp	r2, r3
 8003fc8:	d90e      	bls.n	8003fe8 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	68ba      	ldr	r2, [r7, #8]
 8003fce:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	68fa      	ldr	r2, [r7, #12]
 8003fd4:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8003fd6:	4b19      	ldr	r3, [pc, #100]	; (800403c <prvSwitchTimerLists+0xc0>)
 8003fd8:	681a      	ldr	r2, [r3, #0]
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	3304      	adds	r3, #4
 8003fde:	4619      	mov	r1, r3
 8003fe0:	4610      	mov	r0, r2
 8003fe2:	f7fd fe46 	bl	8001c72 <vListInsert>
 8003fe6:	e016      	b.n	8004016 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8003fe8:	2300      	movs	r3, #0
 8003fea:	9300      	str	r3, [sp, #0]
 8003fec:	2300      	movs	r3, #0
 8003fee:	693a      	ldr	r2, [r7, #16]
 8003ff0:	2100      	movs	r1, #0
 8003ff2:	68f8      	ldr	r0, [r7, #12]
 8003ff4:	f7ff fd60 	bl	8003ab8 <xTimerGenericCommand>
 8003ff8:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d10a      	bne.n	8004016 <prvSwitchTimerLists+0x9a>
	__asm volatile
 8004000:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004004:	f383 8811 	msr	BASEPRI, r3
 8004008:	f3bf 8f6f 	isb	sy
 800400c:	f3bf 8f4f 	dsb	sy
 8004010:	603b      	str	r3, [r7, #0]
}
 8004012:	bf00      	nop
 8004014:	e7fe      	b.n	8004014 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004016:	4b09      	ldr	r3, [pc, #36]	; (800403c <prvSwitchTimerLists+0xc0>)
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	2b00      	cmp	r3, #0
 800401e:	d1b1      	bne.n	8003f84 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8004020:	4b06      	ldr	r3, [pc, #24]	; (800403c <prvSwitchTimerLists+0xc0>)
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8004026:	4b06      	ldr	r3, [pc, #24]	; (8004040 <prvSwitchTimerLists+0xc4>)
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	4a04      	ldr	r2, [pc, #16]	; (800403c <prvSwitchTimerLists+0xc0>)
 800402c:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800402e:	4a04      	ldr	r2, [pc, #16]	; (8004040 <prvSwitchTimerLists+0xc4>)
 8004030:	697b      	ldr	r3, [r7, #20]
 8004032:	6013      	str	r3, [r2, #0]
}
 8004034:	bf00      	nop
 8004036:	3718      	adds	r7, #24
 8004038:	46bd      	mov	sp, r7
 800403a:	bd80      	pop	{r7, pc}
 800403c:	20000c74 	.word	0x20000c74
 8004040:	20000c78 	.word	0x20000c78

08004044 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8004044:	b580      	push	{r7, lr}
 8004046:	b082      	sub	sp, #8
 8004048:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800404a:	f000 f96b 	bl	8004324 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800404e:	4b15      	ldr	r3, [pc, #84]	; (80040a4 <prvCheckForValidListAndQueue+0x60>)
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	2b00      	cmp	r3, #0
 8004054:	d120      	bne.n	8004098 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8004056:	4814      	ldr	r0, [pc, #80]	; (80040a8 <prvCheckForValidListAndQueue+0x64>)
 8004058:	f7fd fdba 	bl	8001bd0 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800405c:	4813      	ldr	r0, [pc, #76]	; (80040ac <prvCheckForValidListAndQueue+0x68>)
 800405e:	f7fd fdb7 	bl	8001bd0 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8004062:	4b13      	ldr	r3, [pc, #76]	; (80040b0 <prvCheckForValidListAndQueue+0x6c>)
 8004064:	4a10      	ldr	r2, [pc, #64]	; (80040a8 <prvCheckForValidListAndQueue+0x64>)
 8004066:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8004068:	4b12      	ldr	r3, [pc, #72]	; (80040b4 <prvCheckForValidListAndQueue+0x70>)
 800406a:	4a10      	ldr	r2, [pc, #64]	; (80040ac <prvCheckForValidListAndQueue+0x68>)
 800406c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800406e:	2300      	movs	r3, #0
 8004070:	9300      	str	r3, [sp, #0]
 8004072:	4b11      	ldr	r3, [pc, #68]	; (80040b8 <prvCheckForValidListAndQueue+0x74>)
 8004074:	4a11      	ldr	r2, [pc, #68]	; (80040bc <prvCheckForValidListAndQueue+0x78>)
 8004076:	2110      	movs	r1, #16
 8004078:	200a      	movs	r0, #10
 800407a:	f7fd fec5 	bl	8001e08 <xQueueGenericCreateStatic>
 800407e:	4603      	mov	r3, r0
 8004080:	4a08      	ldr	r2, [pc, #32]	; (80040a4 <prvCheckForValidListAndQueue+0x60>)
 8004082:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8004084:	4b07      	ldr	r3, [pc, #28]	; (80040a4 <prvCheckForValidListAndQueue+0x60>)
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	2b00      	cmp	r3, #0
 800408a:	d005      	beq.n	8004098 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800408c:	4b05      	ldr	r3, [pc, #20]	; (80040a4 <prvCheckForValidListAndQueue+0x60>)
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	490b      	ldr	r1, [pc, #44]	; (80040c0 <prvCheckForValidListAndQueue+0x7c>)
 8004092:	4618      	mov	r0, r3
 8004094:	f7fe fc6e 	bl	8002974 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004098:	f000 f974 	bl	8004384 <vPortExitCritical>
}
 800409c:	bf00      	nop
 800409e:	46bd      	mov	sp, r7
 80040a0:	bd80      	pop	{r7, pc}
 80040a2:	bf00      	nop
 80040a4:	20000c7c 	.word	0x20000c7c
 80040a8:	20000c4c 	.word	0x20000c4c
 80040ac:	20000c60 	.word	0x20000c60
 80040b0:	20000c74 	.word	0x20000c74
 80040b4:	20000c78 	.word	0x20000c78
 80040b8:	20000d28 	.word	0x20000d28
 80040bc:	20000c88 	.word	0x20000c88
 80040c0:	080049f0 	.word	0x080049f0

080040c4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80040c4:	b480      	push	{r7}
 80040c6:	b085      	sub	sp, #20
 80040c8:	af00      	add	r7, sp, #0
 80040ca:	60f8      	str	r0, [r7, #12]
 80040cc:	60b9      	str	r1, [r7, #8]
 80040ce:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	3b04      	subs	r3, #4
 80040d4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80040dc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	3b04      	subs	r3, #4
 80040e2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80040e4:	68bb      	ldr	r3, [r7, #8]
 80040e6:	f023 0201 	bic.w	r2, r3, #1
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	3b04      	subs	r3, #4
 80040f2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80040f4:	4a0c      	ldr	r2, [pc, #48]	; (8004128 <pxPortInitialiseStack+0x64>)
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	3b14      	subs	r3, #20
 80040fe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8004100:	687a      	ldr	r2, [r7, #4]
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	3b04      	subs	r3, #4
 800410a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	f06f 0202 	mvn.w	r2, #2
 8004112:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	3b20      	subs	r3, #32
 8004118:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800411a:	68fb      	ldr	r3, [r7, #12]
}
 800411c:	4618      	mov	r0, r3
 800411e:	3714      	adds	r7, #20
 8004120:	46bd      	mov	sp, r7
 8004122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004126:	4770      	bx	lr
 8004128:	0800412d 	.word	0x0800412d

0800412c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800412c:	b480      	push	{r7}
 800412e:	b085      	sub	sp, #20
 8004130:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8004132:	2300      	movs	r3, #0
 8004134:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8004136:	4b12      	ldr	r3, [pc, #72]	; (8004180 <prvTaskExitError+0x54>)
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800413e:	d00a      	beq.n	8004156 <prvTaskExitError+0x2a>
	__asm volatile
 8004140:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004144:	f383 8811 	msr	BASEPRI, r3
 8004148:	f3bf 8f6f 	isb	sy
 800414c:	f3bf 8f4f 	dsb	sy
 8004150:	60fb      	str	r3, [r7, #12]
}
 8004152:	bf00      	nop
 8004154:	e7fe      	b.n	8004154 <prvTaskExitError+0x28>
	__asm volatile
 8004156:	f04f 0350 	mov.w	r3, #80	; 0x50
 800415a:	f383 8811 	msr	BASEPRI, r3
 800415e:	f3bf 8f6f 	isb	sy
 8004162:	f3bf 8f4f 	dsb	sy
 8004166:	60bb      	str	r3, [r7, #8]
}
 8004168:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800416a:	bf00      	nop
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	2b00      	cmp	r3, #0
 8004170:	d0fc      	beq.n	800416c <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8004172:	bf00      	nop
 8004174:	bf00      	nop
 8004176:	3714      	adds	r7, #20
 8004178:	46bd      	mov	sp, r7
 800417a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800417e:	4770      	bx	lr
 8004180:	2000000c 	.word	0x2000000c
	...

08004190 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004190:	4b07      	ldr	r3, [pc, #28]	; (80041b0 <pxCurrentTCBConst2>)
 8004192:	6819      	ldr	r1, [r3, #0]
 8004194:	6808      	ldr	r0, [r1, #0]
 8004196:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800419a:	f380 8809 	msr	PSP, r0
 800419e:	f3bf 8f6f 	isb	sy
 80041a2:	f04f 0000 	mov.w	r0, #0
 80041a6:	f380 8811 	msr	BASEPRI, r0
 80041aa:	4770      	bx	lr
 80041ac:	f3af 8000 	nop.w

080041b0 <pxCurrentTCBConst2>:
 80041b0:	2000074c 	.word	0x2000074c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80041b4:	bf00      	nop
 80041b6:	bf00      	nop

080041b8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80041b8:	4808      	ldr	r0, [pc, #32]	; (80041dc <prvPortStartFirstTask+0x24>)
 80041ba:	6800      	ldr	r0, [r0, #0]
 80041bc:	6800      	ldr	r0, [r0, #0]
 80041be:	f380 8808 	msr	MSP, r0
 80041c2:	f04f 0000 	mov.w	r0, #0
 80041c6:	f380 8814 	msr	CONTROL, r0
 80041ca:	b662      	cpsie	i
 80041cc:	b661      	cpsie	f
 80041ce:	f3bf 8f4f 	dsb	sy
 80041d2:	f3bf 8f6f 	isb	sy
 80041d6:	df00      	svc	0
 80041d8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80041da:	bf00      	nop
 80041dc:	e000ed08 	.word	0xe000ed08

080041e0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80041e0:	b580      	push	{r7, lr}
 80041e2:	b086      	sub	sp, #24
 80041e4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80041e6:	4b46      	ldr	r3, [pc, #280]	; (8004300 <xPortStartScheduler+0x120>)
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	4a46      	ldr	r2, [pc, #280]	; (8004304 <xPortStartScheduler+0x124>)
 80041ec:	4293      	cmp	r3, r2
 80041ee:	d10a      	bne.n	8004206 <xPortStartScheduler+0x26>
	__asm volatile
 80041f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041f4:	f383 8811 	msr	BASEPRI, r3
 80041f8:	f3bf 8f6f 	isb	sy
 80041fc:	f3bf 8f4f 	dsb	sy
 8004200:	613b      	str	r3, [r7, #16]
}
 8004202:	bf00      	nop
 8004204:	e7fe      	b.n	8004204 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8004206:	4b3e      	ldr	r3, [pc, #248]	; (8004300 <xPortStartScheduler+0x120>)
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	4a3f      	ldr	r2, [pc, #252]	; (8004308 <xPortStartScheduler+0x128>)
 800420c:	4293      	cmp	r3, r2
 800420e:	d10a      	bne.n	8004226 <xPortStartScheduler+0x46>
	__asm volatile
 8004210:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004214:	f383 8811 	msr	BASEPRI, r3
 8004218:	f3bf 8f6f 	isb	sy
 800421c:	f3bf 8f4f 	dsb	sy
 8004220:	60fb      	str	r3, [r7, #12]
}
 8004222:	bf00      	nop
 8004224:	e7fe      	b.n	8004224 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8004226:	4b39      	ldr	r3, [pc, #228]	; (800430c <xPortStartScheduler+0x12c>)
 8004228:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800422a:	697b      	ldr	r3, [r7, #20]
 800422c:	781b      	ldrb	r3, [r3, #0]
 800422e:	b2db      	uxtb	r3, r3
 8004230:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004232:	697b      	ldr	r3, [r7, #20]
 8004234:	22ff      	movs	r2, #255	; 0xff
 8004236:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004238:	697b      	ldr	r3, [r7, #20]
 800423a:	781b      	ldrb	r3, [r3, #0]
 800423c:	b2db      	uxtb	r3, r3
 800423e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004240:	78fb      	ldrb	r3, [r7, #3]
 8004242:	b2db      	uxtb	r3, r3
 8004244:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004248:	b2da      	uxtb	r2, r3
 800424a:	4b31      	ldr	r3, [pc, #196]	; (8004310 <xPortStartScheduler+0x130>)
 800424c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800424e:	4b31      	ldr	r3, [pc, #196]	; (8004314 <xPortStartScheduler+0x134>)
 8004250:	2207      	movs	r2, #7
 8004252:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004254:	e009      	b.n	800426a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8004256:	4b2f      	ldr	r3, [pc, #188]	; (8004314 <xPortStartScheduler+0x134>)
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	3b01      	subs	r3, #1
 800425c:	4a2d      	ldr	r2, [pc, #180]	; (8004314 <xPortStartScheduler+0x134>)
 800425e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004260:	78fb      	ldrb	r3, [r7, #3]
 8004262:	b2db      	uxtb	r3, r3
 8004264:	005b      	lsls	r3, r3, #1
 8004266:	b2db      	uxtb	r3, r3
 8004268:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800426a:	78fb      	ldrb	r3, [r7, #3]
 800426c:	b2db      	uxtb	r3, r3
 800426e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004272:	2b80      	cmp	r3, #128	; 0x80
 8004274:	d0ef      	beq.n	8004256 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8004276:	4b27      	ldr	r3, [pc, #156]	; (8004314 <xPortStartScheduler+0x134>)
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	f1c3 0307 	rsb	r3, r3, #7
 800427e:	2b04      	cmp	r3, #4
 8004280:	d00a      	beq.n	8004298 <xPortStartScheduler+0xb8>
	__asm volatile
 8004282:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004286:	f383 8811 	msr	BASEPRI, r3
 800428a:	f3bf 8f6f 	isb	sy
 800428e:	f3bf 8f4f 	dsb	sy
 8004292:	60bb      	str	r3, [r7, #8]
}
 8004294:	bf00      	nop
 8004296:	e7fe      	b.n	8004296 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004298:	4b1e      	ldr	r3, [pc, #120]	; (8004314 <xPortStartScheduler+0x134>)
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	021b      	lsls	r3, r3, #8
 800429e:	4a1d      	ldr	r2, [pc, #116]	; (8004314 <xPortStartScheduler+0x134>)
 80042a0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80042a2:	4b1c      	ldr	r3, [pc, #112]	; (8004314 <xPortStartScheduler+0x134>)
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80042aa:	4a1a      	ldr	r2, [pc, #104]	; (8004314 <xPortStartScheduler+0x134>)
 80042ac:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	b2da      	uxtb	r2, r3
 80042b2:	697b      	ldr	r3, [r7, #20]
 80042b4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80042b6:	4b18      	ldr	r3, [pc, #96]	; (8004318 <xPortStartScheduler+0x138>)
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	4a17      	ldr	r2, [pc, #92]	; (8004318 <xPortStartScheduler+0x138>)
 80042bc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80042c0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80042c2:	4b15      	ldr	r3, [pc, #84]	; (8004318 <xPortStartScheduler+0x138>)
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	4a14      	ldr	r2, [pc, #80]	; (8004318 <xPortStartScheduler+0x138>)
 80042c8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80042cc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80042ce:	f000 f8dd 	bl	800448c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80042d2:	4b12      	ldr	r3, [pc, #72]	; (800431c <xPortStartScheduler+0x13c>)
 80042d4:	2200      	movs	r2, #0
 80042d6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80042d8:	f000 f8fc 	bl	80044d4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80042dc:	4b10      	ldr	r3, [pc, #64]	; (8004320 <xPortStartScheduler+0x140>)
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	4a0f      	ldr	r2, [pc, #60]	; (8004320 <xPortStartScheduler+0x140>)
 80042e2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80042e6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80042e8:	f7ff ff66 	bl	80041b8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80042ec:	f7fe ff52 	bl	8003194 <vTaskSwitchContext>
	prvTaskExitError();
 80042f0:	f7ff ff1c 	bl	800412c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80042f4:	2300      	movs	r3, #0
}
 80042f6:	4618      	mov	r0, r3
 80042f8:	3718      	adds	r7, #24
 80042fa:	46bd      	mov	sp, r7
 80042fc:	bd80      	pop	{r7, pc}
 80042fe:	bf00      	nop
 8004300:	e000ed00 	.word	0xe000ed00
 8004304:	410fc271 	.word	0x410fc271
 8004308:	410fc270 	.word	0x410fc270
 800430c:	e000e400 	.word	0xe000e400
 8004310:	20000d78 	.word	0x20000d78
 8004314:	20000d7c 	.word	0x20000d7c
 8004318:	e000ed20 	.word	0xe000ed20
 800431c:	2000000c 	.word	0x2000000c
 8004320:	e000ef34 	.word	0xe000ef34

08004324 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004324:	b480      	push	{r7}
 8004326:	b083      	sub	sp, #12
 8004328:	af00      	add	r7, sp, #0
	__asm volatile
 800432a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800432e:	f383 8811 	msr	BASEPRI, r3
 8004332:	f3bf 8f6f 	isb	sy
 8004336:	f3bf 8f4f 	dsb	sy
 800433a:	607b      	str	r3, [r7, #4]
}
 800433c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800433e:	4b0f      	ldr	r3, [pc, #60]	; (800437c <vPortEnterCritical+0x58>)
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	3301      	adds	r3, #1
 8004344:	4a0d      	ldr	r2, [pc, #52]	; (800437c <vPortEnterCritical+0x58>)
 8004346:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8004348:	4b0c      	ldr	r3, [pc, #48]	; (800437c <vPortEnterCritical+0x58>)
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	2b01      	cmp	r3, #1
 800434e:	d10f      	bne.n	8004370 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004350:	4b0b      	ldr	r3, [pc, #44]	; (8004380 <vPortEnterCritical+0x5c>)
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	b2db      	uxtb	r3, r3
 8004356:	2b00      	cmp	r3, #0
 8004358:	d00a      	beq.n	8004370 <vPortEnterCritical+0x4c>
	__asm volatile
 800435a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800435e:	f383 8811 	msr	BASEPRI, r3
 8004362:	f3bf 8f6f 	isb	sy
 8004366:	f3bf 8f4f 	dsb	sy
 800436a:	603b      	str	r3, [r7, #0]
}
 800436c:	bf00      	nop
 800436e:	e7fe      	b.n	800436e <vPortEnterCritical+0x4a>
	}
}
 8004370:	bf00      	nop
 8004372:	370c      	adds	r7, #12
 8004374:	46bd      	mov	sp, r7
 8004376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800437a:	4770      	bx	lr
 800437c:	2000000c 	.word	0x2000000c
 8004380:	e000ed04 	.word	0xe000ed04

08004384 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004384:	b480      	push	{r7}
 8004386:	b083      	sub	sp, #12
 8004388:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800438a:	4b12      	ldr	r3, [pc, #72]	; (80043d4 <vPortExitCritical+0x50>)
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	2b00      	cmp	r3, #0
 8004390:	d10a      	bne.n	80043a8 <vPortExitCritical+0x24>
	__asm volatile
 8004392:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004396:	f383 8811 	msr	BASEPRI, r3
 800439a:	f3bf 8f6f 	isb	sy
 800439e:	f3bf 8f4f 	dsb	sy
 80043a2:	607b      	str	r3, [r7, #4]
}
 80043a4:	bf00      	nop
 80043a6:	e7fe      	b.n	80043a6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80043a8:	4b0a      	ldr	r3, [pc, #40]	; (80043d4 <vPortExitCritical+0x50>)
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	3b01      	subs	r3, #1
 80043ae:	4a09      	ldr	r2, [pc, #36]	; (80043d4 <vPortExitCritical+0x50>)
 80043b0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80043b2:	4b08      	ldr	r3, [pc, #32]	; (80043d4 <vPortExitCritical+0x50>)
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d105      	bne.n	80043c6 <vPortExitCritical+0x42>
 80043ba:	2300      	movs	r3, #0
 80043bc:	603b      	str	r3, [r7, #0]
	__asm volatile
 80043be:	683b      	ldr	r3, [r7, #0]
 80043c0:	f383 8811 	msr	BASEPRI, r3
}
 80043c4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80043c6:	bf00      	nop
 80043c8:	370c      	adds	r7, #12
 80043ca:	46bd      	mov	sp, r7
 80043cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043d0:	4770      	bx	lr
 80043d2:	bf00      	nop
 80043d4:	2000000c 	.word	0x2000000c
	...

080043e0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80043e0:	f3ef 8009 	mrs	r0, PSP
 80043e4:	f3bf 8f6f 	isb	sy
 80043e8:	4b15      	ldr	r3, [pc, #84]	; (8004440 <pxCurrentTCBConst>)
 80043ea:	681a      	ldr	r2, [r3, #0]
 80043ec:	f01e 0f10 	tst.w	lr, #16
 80043f0:	bf08      	it	eq
 80043f2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80043f6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80043fa:	6010      	str	r0, [r2, #0]
 80043fc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8004400:	f04f 0050 	mov.w	r0, #80	; 0x50
 8004404:	f380 8811 	msr	BASEPRI, r0
 8004408:	f3bf 8f4f 	dsb	sy
 800440c:	f3bf 8f6f 	isb	sy
 8004410:	f7fe fec0 	bl	8003194 <vTaskSwitchContext>
 8004414:	f04f 0000 	mov.w	r0, #0
 8004418:	f380 8811 	msr	BASEPRI, r0
 800441c:	bc09      	pop	{r0, r3}
 800441e:	6819      	ldr	r1, [r3, #0]
 8004420:	6808      	ldr	r0, [r1, #0]
 8004422:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004426:	f01e 0f10 	tst.w	lr, #16
 800442a:	bf08      	it	eq
 800442c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8004430:	f380 8809 	msr	PSP, r0
 8004434:	f3bf 8f6f 	isb	sy
 8004438:	4770      	bx	lr
 800443a:	bf00      	nop
 800443c:	f3af 8000 	nop.w

08004440 <pxCurrentTCBConst>:
 8004440:	2000074c 	.word	0x2000074c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8004444:	bf00      	nop
 8004446:	bf00      	nop

08004448 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004448:	b580      	push	{r7, lr}
 800444a:	b082      	sub	sp, #8
 800444c:	af00      	add	r7, sp, #0
	__asm volatile
 800444e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004452:	f383 8811 	msr	BASEPRI, r3
 8004456:	f3bf 8f6f 	isb	sy
 800445a:	f3bf 8f4f 	dsb	sy
 800445e:	607b      	str	r3, [r7, #4]
}
 8004460:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8004462:	f7fe fddd 	bl	8003020 <xTaskIncrementTick>
 8004466:	4603      	mov	r3, r0
 8004468:	2b00      	cmp	r3, #0
 800446a:	d003      	beq.n	8004474 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800446c:	4b06      	ldr	r3, [pc, #24]	; (8004488 <xPortSysTickHandler+0x40>)
 800446e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004472:	601a      	str	r2, [r3, #0]
 8004474:	2300      	movs	r3, #0
 8004476:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004478:	683b      	ldr	r3, [r7, #0]
 800447a:	f383 8811 	msr	BASEPRI, r3
}
 800447e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8004480:	bf00      	nop
 8004482:	3708      	adds	r7, #8
 8004484:	46bd      	mov	sp, r7
 8004486:	bd80      	pop	{r7, pc}
 8004488:	e000ed04 	.word	0xe000ed04

0800448c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800448c:	b480      	push	{r7}
 800448e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004490:	4b0b      	ldr	r3, [pc, #44]	; (80044c0 <vPortSetupTimerInterrupt+0x34>)
 8004492:	2200      	movs	r2, #0
 8004494:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004496:	4b0b      	ldr	r3, [pc, #44]	; (80044c4 <vPortSetupTimerInterrupt+0x38>)
 8004498:	2200      	movs	r2, #0
 800449a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800449c:	4b0a      	ldr	r3, [pc, #40]	; (80044c8 <vPortSetupTimerInterrupt+0x3c>)
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	4a0a      	ldr	r2, [pc, #40]	; (80044cc <vPortSetupTimerInterrupt+0x40>)
 80044a2:	fba2 2303 	umull	r2, r3, r2, r3
 80044a6:	099b      	lsrs	r3, r3, #6
 80044a8:	4a09      	ldr	r2, [pc, #36]	; (80044d0 <vPortSetupTimerInterrupt+0x44>)
 80044aa:	3b01      	subs	r3, #1
 80044ac:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80044ae:	4b04      	ldr	r3, [pc, #16]	; (80044c0 <vPortSetupTimerInterrupt+0x34>)
 80044b0:	2207      	movs	r2, #7
 80044b2:	601a      	str	r2, [r3, #0]
}
 80044b4:	bf00      	nop
 80044b6:	46bd      	mov	sp, r7
 80044b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044bc:	4770      	bx	lr
 80044be:	bf00      	nop
 80044c0:	e000e010 	.word	0xe000e010
 80044c4:	e000e018 	.word	0xe000e018
 80044c8:	20000000 	.word	0x20000000
 80044cc:	10624dd3 	.word	0x10624dd3
 80044d0:	e000e014 	.word	0xe000e014

080044d4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80044d4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80044e4 <vPortEnableVFP+0x10>
 80044d8:	6801      	ldr	r1, [r0, #0]
 80044da:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80044de:	6001      	str	r1, [r0, #0]
 80044e0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80044e2:	bf00      	nop
 80044e4:	e000ed88 	.word	0xe000ed88

080044e8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80044e8:	b480      	push	{r7}
 80044ea:	b085      	sub	sp, #20
 80044ec:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80044ee:	f3ef 8305 	mrs	r3, IPSR
 80044f2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	2b0f      	cmp	r3, #15
 80044f8:	d914      	bls.n	8004524 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80044fa:	4a17      	ldr	r2, [pc, #92]	; (8004558 <vPortValidateInterruptPriority+0x70>)
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	4413      	add	r3, r2
 8004500:	781b      	ldrb	r3, [r3, #0]
 8004502:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8004504:	4b15      	ldr	r3, [pc, #84]	; (800455c <vPortValidateInterruptPriority+0x74>)
 8004506:	781b      	ldrb	r3, [r3, #0]
 8004508:	7afa      	ldrb	r2, [r7, #11]
 800450a:	429a      	cmp	r2, r3
 800450c:	d20a      	bcs.n	8004524 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800450e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004512:	f383 8811 	msr	BASEPRI, r3
 8004516:	f3bf 8f6f 	isb	sy
 800451a:	f3bf 8f4f 	dsb	sy
 800451e:	607b      	str	r3, [r7, #4]
}
 8004520:	bf00      	nop
 8004522:	e7fe      	b.n	8004522 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8004524:	4b0e      	ldr	r3, [pc, #56]	; (8004560 <vPortValidateInterruptPriority+0x78>)
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800452c:	4b0d      	ldr	r3, [pc, #52]	; (8004564 <vPortValidateInterruptPriority+0x7c>)
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	429a      	cmp	r2, r3
 8004532:	d90a      	bls.n	800454a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8004534:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004538:	f383 8811 	msr	BASEPRI, r3
 800453c:	f3bf 8f6f 	isb	sy
 8004540:	f3bf 8f4f 	dsb	sy
 8004544:	603b      	str	r3, [r7, #0]
}
 8004546:	bf00      	nop
 8004548:	e7fe      	b.n	8004548 <vPortValidateInterruptPriority+0x60>
	}
 800454a:	bf00      	nop
 800454c:	3714      	adds	r7, #20
 800454e:	46bd      	mov	sp, r7
 8004550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004554:	4770      	bx	lr
 8004556:	bf00      	nop
 8004558:	e000e3f0 	.word	0xe000e3f0
 800455c:	20000d78 	.word	0x20000d78
 8004560:	e000ed0c 	.word	0xe000ed0c
 8004564:	20000d7c 	.word	0x20000d7c

08004568 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8004568:	b580      	push	{r7, lr}
 800456a:	b08a      	sub	sp, #40	; 0x28
 800456c:	af00      	add	r7, sp, #0
 800456e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8004570:	2300      	movs	r3, #0
 8004572:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8004574:	f7fe fc98 	bl	8002ea8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8004578:	4b5b      	ldr	r3, [pc, #364]	; (80046e8 <pvPortMalloc+0x180>)
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	2b00      	cmp	r3, #0
 800457e:	d101      	bne.n	8004584 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8004580:	f000 f920 	bl	80047c4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004584:	4b59      	ldr	r3, [pc, #356]	; (80046ec <pvPortMalloc+0x184>)
 8004586:	681a      	ldr	r2, [r3, #0]
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	4013      	ands	r3, r2
 800458c:	2b00      	cmp	r3, #0
 800458e:	f040 8093 	bne.w	80046b8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	2b00      	cmp	r3, #0
 8004596:	d01d      	beq.n	80045d4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8004598:	2208      	movs	r2, #8
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	4413      	add	r3, r2
 800459e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	f003 0307 	and.w	r3, r3, #7
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d014      	beq.n	80045d4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	f023 0307 	bic.w	r3, r3, #7
 80045b0:	3308      	adds	r3, #8
 80045b2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	f003 0307 	and.w	r3, r3, #7
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d00a      	beq.n	80045d4 <pvPortMalloc+0x6c>
	__asm volatile
 80045be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045c2:	f383 8811 	msr	BASEPRI, r3
 80045c6:	f3bf 8f6f 	isb	sy
 80045ca:	f3bf 8f4f 	dsb	sy
 80045ce:	617b      	str	r3, [r7, #20]
}
 80045d0:	bf00      	nop
 80045d2:	e7fe      	b.n	80045d2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d06e      	beq.n	80046b8 <pvPortMalloc+0x150>
 80045da:	4b45      	ldr	r3, [pc, #276]	; (80046f0 <pvPortMalloc+0x188>)
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	687a      	ldr	r2, [r7, #4]
 80045e0:	429a      	cmp	r2, r3
 80045e2:	d869      	bhi.n	80046b8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80045e4:	4b43      	ldr	r3, [pc, #268]	; (80046f4 <pvPortMalloc+0x18c>)
 80045e6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80045e8:	4b42      	ldr	r3, [pc, #264]	; (80046f4 <pvPortMalloc+0x18c>)
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80045ee:	e004      	b.n	80045fa <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 80045f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045f2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80045f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80045fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045fc:	685b      	ldr	r3, [r3, #4]
 80045fe:	687a      	ldr	r2, [r7, #4]
 8004600:	429a      	cmp	r2, r3
 8004602:	d903      	bls.n	800460c <pvPortMalloc+0xa4>
 8004604:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	2b00      	cmp	r3, #0
 800460a:	d1f1      	bne.n	80045f0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800460c:	4b36      	ldr	r3, [pc, #216]	; (80046e8 <pvPortMalloc+0x180>)
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004612:	429a      	cmp	r2, r3
 8004614:	d050      	beq.n	80046b8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8004616:	6a3b      	ldr	r3, [r7, #32]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	2208      	movs	r2, #8
 800461c:	4413      	add	r3, r2
 800461e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004620:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004622:	681a      	ldr	r2, [r3, #0]
 8004624:	6a3b      	ldr	r3, [r7, #32]
 8004626:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8004628:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800462a:	685a      	ldr	r2, [r3, #4]
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	1ad2      	subs	r2, r2, r3
 8004630:	2308      	movs	r3, #8
 8004632:	005b      	lsls	r3, r3, #1
 8004634:	429a      	cmp	r2, r3
 8004636:	d91f      	bls.n	8004678 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8004638:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	4413      	add	r3, r2
 800463e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004640:	69bb      	ldr	r3, [r7, #24]
 8004642:	f003 0307 	and.w	r3, r3, #7
 8004646:	2b00      	cmp	r3, #0
 8004648:	d00a      	beq.n	8004660 <pvPortMalloc+0xf8>
	__asm volatile
 800464a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800464e:	f383 8811 	msr	BASEPRI, r3
 8004652:	f3bf 8f6f 	isb	sy
 8004656:	f3bf 8f4f 	dsb	sy
 800465a:	613b      	str	r3, [r7, #16]
}
 800465c:	bf00      	nop
 800465e:	e7fe      	b.n	800465e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004660:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004662:	685a      	ldr	r2, [r3, #4]
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	1ad2      	subs	r2, r2, r3
 8004668:	69bb      	ldr	r3, [r7, #24]
 800466a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800466c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800466e:	687a      	ldr	r2, [r7, #4]
 8004670:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8004672:	69b8      	ldr	r0, [r7, #24]
 8004674:	f000 f908 	bl	8004888 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004678:	4b1d      	ldr	r3, [pc, #116]	; (80046f0 <pvPortMalloc+0x188>)
 800467a:	681a      	ldr	r2, [r3, #0]
 800467c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800467e:	685b      	ldr	r3, [r3, #4]
 8004680:	1ad3      	subs	r3, r2, r3
 8004682:	4a1b      	ldr	r2, [pc, #108]	; (80046f0 <pvPortMalloc+0x188>)
 8004684:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004686:	4b1a      	ldr	r3, [pc, #104]	; (80046f0 <pvPortMalloc+0x188>)
 8004688:	681a      	ldr	r2, [r3, #0]
 800468a:	4b1b      	ldr	r3, [pc, #108]	; (80046f8 <pvPortMalloc+0x190>)
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	429a      	cmp	r2, r3
 8004690:	d203      	bcs.n	800469a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8004692:	4b17      	ldr	r3, [pc, #92]	; (80046f0 <pvPortMalloc+0x188>)
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	4a18      	ldr	r2, [pc, #96]	; (80046f8 <pvPortMalloc+0x190>)
 8004698:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800469a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800469c:	685a      	ldr	r2, [r3, #4]
 800469e:	4b13      	ldr	r3, [pc, #76]	; (80046ec <pvPortMalloc+0x184>)
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	431a      	orrs	r2, r3
 80046a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046a6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80046a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046aa:	2200      	movs	r2, #0
 80046ac:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80046ae:	4b13      	ldr	r3, [pc, #76]	; (80046fc <pvPortMalloc+0x194>)
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	3301      	adds	r3, #1
 80046b4:	4a11      	ldr	r2, [pc, #68]	; (80046fc <pvPortMalloc+0x194>)
 80046b6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80046b8:	f7fe fc04 	bl	8002ec4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80046bc:	69fb      	ldr	r3, [r7, #28]
 80046be:	f003 0307 	and.w	r3, r3, #7
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d00a      	beq.n	80046dc <pvPortMalloc+0x174>
	__asm volatile
 80046c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046ca:	f383 8811 	msr	BASEPRI, r3
 80046ce:	f3bf 8f6f 	isb	sy
 80046d2:	f3bf 8f4f 	dsb	sy
 80046d6:	60fb      	str	r3, [r7, #12]
}
 80046d8:	bf00      	nop
 80046da:	e7fe      	b.n	80046da <pvPortMalloc+0x172>
	return pvReturn;
 80046dc:	69fb      	ldr	r3, [r7, #28]
}
 80046de:	4618      	mov	r0, r3
 80046e0:	3728      	adds	r7, #40	; 0x28
 80046e2:	46bd      	mov	sp, r7
 80046e4:	bd80      	pop	{r7, pc}
 80046e6:	bf00      	nop
 80046e8:	20004988 	.word	0x20004988
 80046ec:	2000499c 	.word	0x2000499c
 80046f0:	2000498c 	.word	0x2000498c
 80046f4:	20004980 	.word	0x20004980
 80046f8:	20004990 	.word	0x20004990
 80046fc:	20004994 	.word	0x20004994

08004700 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8004700:	b580      	push	{r7, lr}
 8004702:	b086      	sub	sp, #24
 8004704:	af00      	add	r7, sp, #0
 8004706:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	2b00      	cmp	r3, #0
 8004710:	d04d      	beq.n	80047ae <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8004712:	2308      	movs	r3, #8
 8004714:	425b      	negs	r3, r3
 8004716:	697a      	ldr	r2, [r7, #20]
 8004718:	4413      	add	r3, r2
 800471a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800471c:	697b      	ldr	r3, [r7, #20]
 800471e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8004720:	693b      	ldr	r3, [r7, #16]
 8004722:	685a      	ldr	r2, [r3, #4]
 8004724:	4b24      	ldr	r3, [pc, #144]	; (80047b8 <vPortFree+0xb8>)
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	4013      	ands	r3, r2
 800472a:	2b00      	cmp	r3, #0
 800472c:	d10a      	bne.n	8004744 <vPortFree+0x44>
	__asm volatile
 800472e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004732:	f383 8811 	msr	BASEPRI, r3
 8004736:	f3bf 8f6f 	isb	sy
 800473a:	f3bf 8f4f 	dsb	sy
 800473e:	60fb      	str	r3, [r7, #12]
}
 8004740:	bf00      	nop
 8004742:	e7fe      	b.n	8004742 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8004744:	693b      	ldr	r3, [r7, #16]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	2b00      	cmp	r3, #0
 800474a:	d00a      	beq.n	8004762 <vPortFree+0x62>
	__asm volatile
 800474c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004750:	f383 8811 	msr	BASEPRI, r3
 8004754:	f3bf 8f6f 	isb	sy
 8004758:	f3bf 8f4f 	dsb	sy
 800475c:	60bb      	str	r3, [r7, #8]
}
 800475e:	bf00      	nop
 8004760:	e7fe      	b.n	8004760 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8004762:	693b      	ldr	r3, [r7, #16]
 8004764:	685a      	ldr	r2, [r3, #4]
 8004766:	4b14      	ldr	r3, [pc, #80]	; (80047b8 <vPortFree+0xb8>)
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	4013      	ands	r3, r2
 800476c:	2b00      	cmp	r3, #0
 800476e:	d01e      	beq.n	80047ae <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8004770:	693b      	ldr	r3, [r7, #16]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	2b00      	cmp	r3, #0
 8004776:	d11a      	bne.n	80047ae <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8004778:	693b      	ldr	r3, [r7, #16]
 800477a:	685a      	ldr	r2, [r3, #4]
 800477c:	4b0e      	ldr	r3, [pc, #56]	; (80047b8 <vPortFree+0xb8>)
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	43db      	mvns	r3, r3
 8004782:	401a      	ands	r2, r3
 8004784:	693b      	ldr	r3, [r7, #16]
 8004786:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8004788:	f7fe fb8e 	bl	8002ea8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800478c:	693b      	ldr	r3, [r7, #16]
 800478e:	685a      	ldr	r2, [r3, #4]
 8004790:	4b0a      	ldr	r3, [pc, #40]	; (80047bc <vPortFree+0xbc>)
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	4413      	add	r3, r2
 8004796:	4a09      	ldr	r2, [pc, #36]	; (80047bc <vPortFree+0xbc>)
 8004798:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800479a:	6938      	ldr	r0, [r7, #16]
 800479c:	f000 f874 	bl	8004888 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80047a0:	4b07      	ldr	r3, [pc, #28]	; (80047c0 <vPortFree+0xc0>)
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	3301      	adds	r3, #1
 80047a6:	4a06      	ldr	r2, [pc, #24]	; (80047c0 <vPortFree+0xc0>)
 80047a8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80047aa:	f7fe fb8b 	bl	8002ec4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80047ae:	bf00      	nop
 80047b0:	3718      	adds	r7, #24
 80047b2:	46bd      	mov	sp, r7
 80047b4:	bd80      	pop	{r7, pc}
 80047b6:	bf00      	nop
 80047b8:	2000499c 	.word	0x2000499c
 80047bc:	2000498c 	.word	0x2000498c
 80047c0:	20004998 	.word	0x20004998

080047c4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80047c4:	b480      	push	{r7}
 80047c6:	b085      	sub	sp, #20
 80047c8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80047ca:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80047ce:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80047d0:	4b27      	ldr	r3, [pc, #156]	; (8004870 <prvHeapInit+0xac>)
 80047d2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	f003 0307 	and.w	r3, r3, #7
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d00c      	beq.n	80047f8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	3307      	adds	r3, #7
 80047e2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	f023 0307 	bic.w	r3, r3, #7
 80047ea:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80047ec:	68ba      	ldr	r2, [r7, #8]
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	1ad3      	subs	r3, r2, r3
 80047f2:	4a1f      	ldr	r2, [pc, #124]	; (8004870 <prvHeapInit+0xac>)
 80047f4:	4413      	add	r3, r2
 80047f6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80047fc:	4a1d      	ldr	r2, [pc, #116]	; (8004874 <prvHeapInit+0xb0>)
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8004802:	4b1c      	ldr	r3, [pc, #112]	; (8004874 <prvHeapInit+0xb0>)
 8004804:	2200      	movs	r2, #0
 8004806:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	68ba      	ldr	r2, [r7, #8]
 800480c:	4413      	add	r3, r2
 800480e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8004810:	2208      	movs	r2, #8
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	1a9b      	subs	r3, r3, r2
 8004816:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	f023 0307 	bic.w	r3, r3, #7
 800481e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	4a15      	ldr	r2, [pc, #84]	; (8004878 <prvHeapInit+0xb4>)
 8004824:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8004826:	4b14      	ldr	r3, [pc, #80]	; (8004878 <prvHeapInit+0xb4>)
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	2200      	movs	r2, #0
 800482c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800482e:	4b12      	ldr	r3, [pc, #72]	; (8004878 <prvHeapInit+0xb4>)
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	2200      	movs	r2, #0
 8004834:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800483a:	683b      	ldr	r3, [r7, #0]
 800483c:	68fa      	ldr	r2, [r7, #12]
 800483e:	1ad2      	subs	r2, r2, r3
 8004840:	683b      	ldr	r3, [r7, #0]
 8004842:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004844:	4b0c      	ldr	r3, [pc, #48]	; (8004878 <prvHeapInit+0xb4>)
 8004846:	681a      	ldr	r2, [r3, #0]
 8004848:	683b      	ldr	r3, [r7, #0]
 800484a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800484c:	683b      	ldr	r3, [r7, #0]
 800484e:	685b      	ldr	r3, [r3, #4]
 8004850:	4a0a      	ldr	r2, [pc, #40]	; (800487c <prvHeapInit+0xb8>)
 8004852:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004854:	683b      	ldr	r3, [r7, #0]
 8004856:	685b      	ldr	r3, [r3, #4]
 8004858:	4a09      	ldr	r2, [pc, #36]	; (8004880 <prvHeapInit+0xbc>)
 800485a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800485c:	4b09      	ldr	r3, [pc, #36]	; (8004884 <prvHeapInit+0xc0>)
 800485e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8004862:	601a      	str	r2, [r3, #0]
}
 8004864:	bf00      	nop
 8004866:	3714      	adds	r7, #20
 8004868:	46bd      	mov	sp, r7
 800486a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800486e:	4770      	bx	lr
 8004870:	20000d80 	.word	0x20000d80
 8004874:	20004980 	.word	0x20004980
 8004878:	20004988 	.word	0x20004988
 800487c:	20004990 	.word	0x20004990
 8004880:	2000498c 	.word	0x2000498c
 8004884:	2000499c 	.word	0x2000499c

08004888 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8004888:	b480      	push	{r7}
 800488a:	b085      	sub	sp, #20
 800488c:	af00      	add	r7, sp, #0
 800488e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004890:	4b28      	ldr	r3, [pc, #160]	; (8004934 <prvInsertBlockIntoFreeList+0xac>)
 8004892:	60fb      	str	r3, [r7, #12]
 8004894:	e002      	b.n	800489c <prvInsertBlockIntoFreeList+0x14>
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	60fb      	str	r3, [r7, #12]
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	687a      	ldr	r2, [r7, #4]
 80048a2:	429a      	cmp	r2, r3
 80048a4:	d8f7      	bhi.n	8004896 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	685b      	ldr	r3, [r3, #4]
 80048ae:	68ba      	ldr	r2, [r7, #8]
 80048b0:	4413      	add	r3, r2
 80048b2:	687a      	ldr	r2, [r7, #4]
 80048b4:	429a      	cmp	r2, r3
 80048b6:	d108      	bne.n	80048ca <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	685a      	ldr	r2, [r3, #4]
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	685b      	ldr	r3, [r3, #4]
 80048c0:	441a      	add	r2, r3
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	685b      	ldr	r3, [r3, #4]
 80048d2:	68ba      	ldr	r2, [r7, #8]
 80048d4:	441a      	add	r2, r3
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	429a      	cmp	r2, r3
 80048dc:	d118      	bne.n	8004910 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	681a      	ldr	r2, [r3, #0]
 80048e2:	4b15      	ldr	r3, [pc, #84]	; (8004938 <prvInsertBlockIntoFreeList+0xb0>)
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	429a      	cmp	r2, r3
 80048e8:	d00d      	beq.n	8004906 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	685a      	ldr	r2, [r3, #4]
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	685b      	ldr	r3, [r3, #4]
 80048f4:	441a      	add	r2, r3
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	681a      	ldr	r2, [r3, #0]
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	601a      	str	r2, [r3, #0]
 8004904:	e008      	b.n	8004918 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8004906:	4b0c      	ldr	r3, [pc, #48]	; (8004938 <prvInsertBlockIntoFreeList+0xb0>)
 8004908:	681a      	ldr	r2, [r3, #0]
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	601a      	str	r2, [r3, #0]
 800490e:	e003      	b.n	8004918 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	681a      	ldr	r2, [r3, #0]
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8004918:	68fa      	ldr	r2, [r7, #12]
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	429a      	cmp	r2, r3
 800491e:	d002      	beq.n	8004926 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	687a      	ldr	r2, [r7, #4]
 8004924:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004926:	bf00      	nop
 8004928:	3714      	adds	r7, #20
 800492a:	46bd      	mov	sp, r7
 800492c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004930:	4770      	bx	lr
 8004932:	bf00      	nop
 8004934:	20004980 	.word	0x20004980
 8004938:	20004988 	.word	0x20004988

0800493c <__libc_init_array>:
 800493c:	b570      	push	{r4, r5, r6, lr}
 800493e:	4d0d      	ldr	r5, [pc, #52]	; (8004974 <__libc_init_array+0x38>)
 8004940:	4c0d      	ldr	r4, [pc, #52]	; (8004978 <__libc_init_array+0x3c>)
 8004942:	1b64      	subs	r4, r4, r5
 8004944:	10a4      	asrs	r4, r4, #2
 8004946:	2600      	movs	r6, #0
 8004948:	42a6      	cmp	r6, r4
 800494a:	d109      	bne.n	8004960 <__libc_init_array+0x24>
 800494c:	4d0b      	ldr	r5, [pc, #44]	; (800497c <__libc_init_array+0x40>)
 800494e:	4c0c      	ldr	r4, [pc, #48]	; (8004980 <__libc_init_array+0x44>)
 8004950:	f000 f82e 	bl	80049b0 <_init>
 8004954:	1b64      	subs	r4, r4, r5
 8004956:	10a4      	asrs	r4, r4, #2
 8004958:	2600      	movs	r6, #0
 800495a:	42a6      	cmp	r6, r4
 800495c:	d105      	bne.n	800496a <__libc_init_array+0x2e>
 800495e:	bd70      	pop	{r4, r5, r6, pc}
 8004960:	f855 3b04 	ldr.w	r3, [r5], #4
 8004964:	4798      	blx	r3
 8004966:	3601      	adds	r6, #1
 8004968:	e7ee      	b.n	8004948 <__libc_init_array+0xc>
 800496a:	f855 3b04 	ldr.w	r3, [r5], #4
 800496e:	4798      	blx	r3
 8004970:	3601      	adds	r6, #1
 8004972:	e7f2      	b.n	800495a <__libc_init_array+0x1e>
 8004974:	08004a7c 	.word	0x08004a7c
 8004978:	08004a7c 	.word	0x08004a7c
 800497c:	08004a7c 	.word	0x08004a7c
 8004980:	08004a80 	.word	0x08004a80

08004984 <memcpy>:
 8004984:	440a      	add	r2, r1
 8004986:	4291      	cmp	r1, r2
 8004988:	f100 33ff 	add.w	r3, r0, #4294967295
 800498c:	d100      	bne.n	8004990 <memcpy+0xc>
 800498e:	4770      	bx	lr
 8004990:	b510      	push	{r4, lr}
 8004992:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004996:	f803 4f01 	strb.w	r4, [r3, #1]!
 800499a:	4291      	cmp	r1, r2
 800499c:	d1f9      	bne.n	8004992 <memcpy+0xe>
 800499e:	bd10      	pop	{r4, pc}

080049a0 <memset>:
 80049a0:	4402      	add	r2, r0
 80049a2:	4603      	mov	r3, r0
 80049a4:	4293      	cmp	r3, r2
 80049a6:	d100      	bne.n	80049aa <memset+0xa>
 80049a8:	4770      	bx	lr
 80049aa:	f803 1b01 	strb.w	r1, [r3], #1
 80049ae:	e7f9      	b.n	80049a4 <memset+0x4>

080049b0 <_init>:
 80049b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80049b2:	bf00      	nop
 80049b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80049b6:	bc08      	pop	{r3}
 80049b8:	469e      	mov	lr, r3
 80049ba:	4770      	bx	lr

080049bc <_fini>:
 80049bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80049be:	bf00      	nop
 80049c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80049c2:	bc08      	pop	{r3}
 80049c4:	469e      	mov	lr, r3
 80049c6:	4770      	bx	lr
