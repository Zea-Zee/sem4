
project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000052a4  080001b0  080001b0  000101b0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001e8  08005458  08005458  00015458  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005640  08005640  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  08005640  08005640  00015640  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005648  08005648  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005648  08005648  00015648  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800564c  0800564c  0001564c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08005650  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020010  2**0
                  CONTENTS
 10 .bss          00000c94  20000010  20000010  00020010  2**3
                  ALLOC
 11 ._user_heap_stack 00000604  20000ca4  20000ca4  00020010  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000bdfb  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001c64  00000000  00000000  0002be3b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000b78  00000000  00000000  0002daa0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000aa0  00000000  00000000  0002e618  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00023b07  00000000  00000000  0002f0b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000cbe9  00000000  00000000  00052bbf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e0370  00000000  00000000  0005f7a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0013fb18  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003384  00000000  00000000  0013fb68  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000010 	.word	0x20000010
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0800543c 	.word	0x0800543c

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000014 	.word	0x20000014
 80001ec:	0800543c 	.word	0x0800543c

080001f0 <__aeabi_drsub>:
 80001f0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001f4:	e002      	b.n	80001fc <__adddf3>
 80001f6:	bf00      	nop

080001f8 <__aeabi_dsub>:
 80001f8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001fc <__adddf3>:
 80001fc:	b530      	push	{r4, r5, lr}
 80001fe:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000202:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000206:	ea94 0f05 	teq	r4, r5
 800020a:	bf08      	it	eq
 800020c:	ea90 0f02 	teqeq	r0, r2
 8000210:	bf1f      	itttt	ne
 8000212:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000216:	ea55 0c02 	orrsne.w	ip, r5, r2
 800021a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800021e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000222:	f000 80e2 	beq.w	80003ea <__adddf3+0x1ee>
 8000226:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800022a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800022e:	bfb8      	it	lt
 8000230:	426d      	neglt	r5, r5
 8000232:	dd0c      	ble.n	800024e <__adddf3+0x52>
 8000234:	442c      	add	r4, r5
 8000236:	ea80 0202 	eor.w	r2, r0, r2
 800023a:	ea81 0303 	eor.w	r3, r1, r3
 800023e:	ea82 0000 	eor.w	r0, r2, r0
 8000242:	ea83 0101 	eor.w	r1, r3, r1
 8000246:	ea80 0202 	eor.w	r2, r0, r2
 800024a:	ea81 0303 	eor.w	r3, r1, r3
 800024e:	2d36      	cmp	r5, #54	; 0x36
 8000250:	bf88      	it	hi
 8000252:	bd30      	pophi	{r4, r5, pc}
 8000254:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000258:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800025c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000260:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000264:	d002      	beq.n	800026c <__adddf3+0x70>
 8000266:	4240      	negs	r0, r0
 8000268:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800026c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000270:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000274:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000278:	d002      	beq.n	8000280 <__adddf3+0x84>
 800027a:	4252      	negs	r2, r2
 800027c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000280:	ea94 0f05 	teq	r4, r5
 8000284:	f000 80a7 	beq.w	80003d6 <__adddf3+0x1da>
 8000288:	f1a4 0401 	sub.w	r4, r4, #1
 800028c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000290:	db0d      	blt.n	80002ae <__adddf3+0xb2>
 8000292:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000296:	fa22 f205 	lsr.w	r2, r2, r5
 800029a:	1880      	adds	r0, r0, r2
 800029c:	f141 0100 	adc.w	r1, r1, #0
 80002a0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002a4:	1880      	adds	r0, r0, r2
 80002a6:	fa43 f305 	asr.w	r3, r3, r5
 80002aa:	4159      	adcs	r1, r3
 80002ac:	e00e      	b.n	80002cc <__adddf3+0xd0>
 80002ae:	f1a5 0520 	sub.w	r5, r5, #32
 80002b2:	f10e 0e20 	add.w	lr, lr, #32
 80002b6:	2a01      	cmp	r2, #1
 80002b8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002bc:	bf28      	it	cs
 80002be:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002c2:	fa43 f305 	asr.w	r3, r3, r5
 80002c6:	18c0      	adds	r0, r0, r3
 80002c8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002cc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002d0:	d507      	bpl.n	80002e2 <__adddf3+0xe6>
 80002d2:	f04f 0e00 	mov.w	lr, #0
 80002d6:	f1dc 0c00 	rsbs	ip, ip, #0
 80002da:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002de:	eb6e 0101 	sbc.w	r1, lr, r1
 80002e2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002e6:	d31b      	bcc.n	8000320 <__adddf3+0x124>
 80002e8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002ec:	d30c      	bcc.n	8000308 <__adddf3+0x10c>
 80002ee:	0849      	lsrs	r1, r1, #1
 80002f0:	ea5f 0030 	movs.w	r0, r0, rrx
 80002f4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002f8:	f104 0401 	add.w	r4, r4, #1
 80002fc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000300:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000304:	f080 809a 	bcs.w	800043c <__adddf3+0x240>
 8000308:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800030c:	bf08      	it	eq
 800030e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000312:	f150 0000 	adcs.w	r0, r0, #0
 8000316:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800031a:	ea41 0105 	orr.w	r1, r1, r5
 800031e:	bd30      	pop	{r4, r5, pc}
 8000320:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000324:	4140      	adcs	r0, r0
 8000326:	eb41 0101 	adc.w	r1, r1, r1
 800032a:	3c01      	subs	r4, #1
 800032c:	bf28      	it	cs
 800032e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000332:	d2e9      	bcs.n	8000308 <__adddf3+0x10c>
 8000334:	f091 0f00 	teq	r1, #0
 8000338:	bf04      	itt	eq
 800033a:	4601      	moveq	r1, r0
 800033c:	2000      	moveq	r0, #0
 800033e:	fab1 f381 	clz	r3, r1
 8000342:	bf08      	it	eq
 8000344:	3320      	addeq	r3, #32
 8000346:	f1a3 030b 	sub.w	r3, r3, #11
 800034a:	f1b3 0220 	subs.w	r2, r3, #32
 800034e:	da0c      	bge.n	800036a <__adddf3+0x16e>
 8000350:	320c      	adds	r2, #12
 8000352:	dd08      	ble.n	8000366 <__adddf3+0x16a>
 8000354:	f102 0c14 	add.w	ip, r2, #20
 8000358:	f1c2 020c 	rsb	r2, r2, #12
 800035c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000360:	fa21 f102 	lsr.w	r1, r1, r2
 8000364:	e00c      	b.n	8000380 <__adddf3+0x184>
 8000366:	f102 0214 	add.w	r2, r2, #20
 800036a:	bfd8      	it	le
 800036c:	f1c2 0c20 	rsble	ip, r2, #32
 8000370:	fa01 f102 	lsl.w	r1, r1, r2
 8000374:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000378:	bfdc      	itt	le
 800037a:	ea41 010c 	orrle.w	r1, r1, ip
 800037e:	4090      	lslle	r0, r2
 8000380:	1ae4      	subs	r4, r4, r3
 8000382:	bfa2      	ittt	ge
 8000384:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000388:	4329      	orrge	r1, r5
 800038a:	bd30      	popge	{r4, r5, pc}
 800038c:	ea6f 0404 	mvn.w	r4, r4
 8000390:	3c1f      	subs	r4, #31
 8000392:	da1c      	bge.n	80003ce <__adddf3+0x1d2>
 8000394:	340c      	adds	r4, #12
 8000396:	dc0e      	bgt.n	80003b6 <__adddf3+0x1ba>
 8000398:	f104 0414 	add.w	r4, r4, #20
 800039c:	f1c4 0220 	rsb	r2, r4, #32
 80003a0:	fa20 f004 	lsr.w	r0, r0, r4
 80003a4:	fa01 f302 	lsl.w	r3, r1, r2
 80003a8:	ea40 0003 	orr.w	r0, r0, r3
 80003ac:	fa21 f304 	lsr.w	r3, r1, r4
 80003b0:	ea45 0103 	orr.w	r1, r5, r3
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	f1c4 040c 	rsb	r4, r4, #12
 80003ba:	f1c4 0220 	rsb	r2, r4, #32
 80003be:	fa20 f002 	lsr.w	r0, r0, r2
 80003c2:	fa01 f304 	lsl.w	r3, r1, r4
 80003c6:	ea40 0003 	orr.w	r0, r0, r3
 80003ca:	4629      	mov	r1, r5
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	fa21 f004 	lsr.w	r0, r1, r4
 80003d2:	4629      	mov	r1, r5
 80003d4:	bd30      	pop	{r4, r5, pc}
 80003d6:	f094 0f00 	teq	r4, #0
 80003da:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003de:	bf06      	itte	eq
 80003e0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003e4:	3401      	addeq	r4, #1
 80003e6:	3d01      	subne	r5, #1
 80003e8:	e74e      	b.n	8000288 <__adddf3+0x8c>
 80003ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ee:	bf18      	it	ne
 80003f0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003f4:	d029      	beq.n	800044a <__adddf3+0x24e>
 80003f6:	ea94 0f05 	teq	r4, r5
 80003fa:	bf08      	it	eq
 80003fc:	ea90 0f02 	teqeq	r0, r2
 8000400:	d005      	beq.n	800040e <__adddf3+0x212>
 8000402:	ea54 0c00 	orrs.w	ip, r4, r0
 8000406:	bf04      	itt	eq
 8000408:	4619      	moveq	r1, r3
 800040a:	4610      	moveq	r0, r2
 800040c:	bd30      	pop	{r4, r5, pc}
 800040e:	ea91 0f03 	teq	r1, r3
 8000412:	bf1e      	ittt	ne
 8000414:	2100      	movne	r1, #0
 8000416:	2000      	movne	r0, #0
 8000418:	bd30      	popne	{r4, r5, pc}
 800041a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800041e:	d105      	bne.n	800042c <__adddf3+0x230>
 8000420:	0040      	lsls	r0, r0, #1
 8000422:	4149      	adcs	r1, r1
 8000424:	bf28      	it	cs
 8000426:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800042a:	bd30      	pop	{r4, r5, pc}
 800042c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000430:	bf3c      	itt	cc
 8000432:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000436:	bd30      	popcc	{r4, r5, pc}
 8000438:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800043c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000440:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000444:	f04f 0000 	mov.w	r0, #0
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800044e:	bf1a      	itte	ne
 8000450:	4619      	movne	r1, r3
 8000452:	4610      	movne	r0, r2
 8000454:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000458:	bf1c      	itt	ne
 800045a:	460b      	movne	r3, r1
 800045c:	4602      	movne	r2, r0
 800045e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000462:	bf06      	itte	eq
 8000464:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000468:	ea91 0f03 	teqeq	r1, r3
 800046c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	bf00      	nop

08000474 <__aeabi_ui2d>:
 8000474:	f090 0f00 	teq	r0, #0
 8000478:	bf04      	itt	eq
 800047a:	2100      	moveq	r1, #0
 800047c:	4770      	bxeq	lr
 800047e:	b530      	push	{r4, r5, lr}
 8000480:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000484:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000488:	f04f 0500 	mov.w	r5, #0
 800048c:	f04f 0100 	mov.w	r1, #0
 8000490:	e750      	b.n	8000334 <__adddf3+0x138>
 8000492:	bf00      	nop

08000494 <__aeabi_i2d>:
 8000494:	f090 0f00 	teq	r0, #0
 8000498:	bf04      	itt	eq
 800049a:	2100      	moveq	r1, #0
 800049c:	4770      	bxeq	lr
 800049e:	b530      	push	{r4, r5, lr}
 80004a0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004a4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004a8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004ac:	bf48      	it	mi
 80004ae:	4240      	negmi	r0, r0
 80004b0:	f04f 0100 	mov.w	r1, #0
 80004b4:	e73e      	b.n	8000334 <__adddf3+0x138>
 80004b6:	bf00      	nop

080004b8 <__aeabi_f2d>:
 80004b8:	0042      	lsls	r2, r0, #1
 80004ba:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004be:	ea4f 0131 	mov.w	r1, r1, rrx
 80004c2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004c6:	bf1f      	itttt	ne
 80004c8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004cc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004d0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004d4:	4770      	bxne	lr
 80004d6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004da:	bf08      	it	eq
 80004dc:	4770      	bxeq	lr
 80004de:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004e2:	bf04      	itt	eq
 80004e4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004e8:	4770      	bxeq	lr
 80004ea:	b530      	push	{r4, r5, lr}
 80004ec:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004f0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004f4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004f8:	e71c      	b.n	8000334 <__adddf3+0x138>
 80004fa:	bf00      	nop

080004fc <__aeabi_ul2d>:
 80004fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000500:	bf08      	it	eq
 8000502:	4770      	bxeq	lr
 8000504:	b530      	push	{r4, r5, lr}
 8000506:	f04f 0500 	mov.w	r5, #0
 800050a:	e00a      	b.n	8000522 <__aeabi_l2d+0x16>

0800050c <__aeabi_l2d>:
 800050c:	ea50 0201 	orrs.w	r2, r0, r1
 8000510:	bf08      	it	eq
 8000512:	4770      	bxeq	lr
 8000514:	b530      	push	{r4, r5, lr}
 8000516:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800051a:	d502      	bpl.n	8000522 <__aeabi_l2d+0x16>
 800051c:	4240      	negs	r0, r0
 800051e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000522:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000526:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800052a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800052e:	f43f aed8 	beq.w	80002e2 <__adddf3+0xe6>
 8000532:	f04f 0203 	mov.w	r2, #3
 8000536:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800053a:	bf18      	it	ne
 800053c:	3203      	addne	r2, #3
 800053e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000542:	bf18      	it	ne
 8000544:	3203      	addne	r2, #3
 8000546:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800054a:	f1c2 0320 	rsb	r3, r2, #32
 800054e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000552:	fa20 f002 	lsr.w	r0, r0, r2
 8000556:	fa01 fe03 	lsl.w	lr, r1, r3
 800055a:	ea40 000e 	orr.w	r0, r0, lr
 800055e:	fa21 f102 	lsr.w	r1, r1, r2
 8000562:	4414      	add	r4, r2
 8000564:	e6bd      	b.n	80002e2 <__adddf3+0xe6>
 8000566:	bf00      	nop

08000568 <__aeabi_dmul>:
 8000568:	b570      	push	{r4, r5, r6, lr}
 800056a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800056e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000572:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000576:	bf1d      	ittte	ne
 8000578:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800057c:	ea94 0f0c 	teqne	r4, ip
 8000580:	ea95 0f0c 	teqne	r5, ip
 8000584:	f000 f8de 	bleq	8000744 <__aeabi_dmul+0x1dc>
 8000588:	442c      	add	r4, r5
 800058a:	ea81 0603 	eor.w	r6, r1, r3
 800058e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000592:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000596:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800059a:	bf18      	it	ne
 800059c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005a0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005a4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005a8:	d038      	beq.n	800061c <__aeabi_dmul+0xb4>
 80005aa:	fba0 ce02 	umull	ip, lr, r0, r2
 80005ae:	f04f 0500 	mov.w	r5, #0
 80005b2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005b6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005ba:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005be:	f04f 0600 	mov.w	r6, #0
 80005c2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005c6:	f09c 0f00 	teq	ip, #0
 80005ca:	bf18      	it	ne
 80005cc:	f04e 0e01 	orrne.w	lr, lr, #1
 80005d0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005d4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005d8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005dc:	d204      	bcs.n	80005e8 <__aeabi_dmul+0x80>
 80005de:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005e2:	416d      	adcs	r5, r5
 80005e4:	eb46 0606 	adc.w	r6, r6, r6
 80005e8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005ec:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005f0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005f4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005f8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005fc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000600:	bf88      	it	hi
 8000602:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000606:	d81e      	bhi.n	8000646 <__aeabi_dmul+0xde>
 8000608:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800060c:	bf08      	it	eq
 800060e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000612:	f150 0000 	adcs.w	r0, r0, #0
 8000616:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800061a:	bd70      	pop	{r4, r5, r6, pc}
 800061c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000620:	ea46 0101 	orr.w	r1, r6, r1
 8000624:	ea40 0002 	orr.w	r0, r0, r2
 8000628:	ea81 0103 	eor.w	r1, r1, r3
 800062c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000630:	bfc2      	ittt	gt
 8000632:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000636:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800063a:	bd70      	popgt	{r4, r5, r6, pc}
 800063c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000640:	f04f 0e00 	mov.w	lr, #0
 8000644:	3c01      	subs	r4, #1
 8000646:	f300 80ab 	bgt.w	80007a0 <__aeabi_dmul+0x238>
 800064a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800064e:	bfde      	ittt	le
 8000650:	2000      	movle	r0, #0
 8000652:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000656:	bd70      	pople	{r4, r5, r6, pc}
 8000658:	f1c4 0400 	rsb	r4, r4, #0
 800065c:	3c20      	subs	r4, #32
 800065e:	da35      	bge.n	80006cc <__aeabi_dmul+0x164>
 8000660:	340c      	adds	r4, #12
 8000662:	dc1b      	bgt.n	800069c <__aeabi_dmul+0x134>
 8000664:	f104 0414 	add.w	r4, r4, #20
 8000668:	f1c4 0520 	rsb	r5, r4, #32
 800066c:	fa00 f305 	lsl.w	r3, r0, r5
 8000670:	fa20 f004 	lsr.w	r0, r0, r4
 8000674:	fa01 f205 	lsl.w	r2, r1, r5
 8000678:	ea40 0002 	orr.w	r0, r0, r2
 800067c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000680:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000684:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000688:	fa21 f604 	lsr.w	r6, r1, r4
 800068c:	eb42 0106 	adc.w	r1, r2, r6
 8000690:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000694:	bf08      	it	eq
 8000696:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f1c4 040c 	rsb	r4, r4, #12
 80006a0:	f1c4 0520 	rsb	r5, r4, #32
 80006a4:	fa00 f304 	lsl.w	r3, r0, r4
 80006a8:	fa20 f005 	lsr.w	r0, r0, r5
 80006ac:	fa01 f204 	lsl.w	r2, r1, r4
 80006b0:	ea40 0002 	orr.w	r0, r0, r2
 80006b4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006b8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006bc:	f141 0100 	adc.w	r1, r1, #0
 80006c0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006c4:	bf08      	it	eq
 80006c6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f1c4 0520 	rsb	r5, r4, #32
 80006d0:	fa00 f205 	lsl.w	r2, r0, r5
 80006d4:	ea4e 0e02 	orr.w	lr, lr, r2
 80006d8:	fa20 f304 	lsr.w	r3, r0, r4
 80006dc:	fa01 f205 	lsl.w	r2, r1, r5
 80006e0:	ea43 0302 	orr.w	r3, r3, r2
 80006e4:	fa21 f004 	lsr.w	r0, r1, r4
 80006e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006ec:	fa21 f204 	lsr.w	r2, r1, r4
 80006f0:	ea20 0002 	bic.w	r0, r0, r2
 80006f4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006f8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006fc:	bf08      	it	eq
 80006fe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000702:	bd70      	pop	{r4, r5, r6, pc}
 8000704:	f094 0f00 	teq	r4, #0
 8000708:	d10f      	bne.n	800072a <__aeabi_dmul+0x1c2>
 800070a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800070e:	0040      	lsls	r0, r0, #1
 8000710:	eb41 0101 	adc.w	r1, r1, r1
 8000714:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000718:	bf08      	it	eq
 800071a:	3c01      	subeq	r4, #1
 800071c:	d0f7      	beq.n	800070e <__aeabi_dmul+0x1a6>
 800071e:	ea41 0106 	orr.w	r1, r1, r6
 8000722:	f095 0f00 	teq	r5, #0
 8000726:	bf18      	it	ne
 8000728:	4770      	bxne	lr
 800072a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800072e:	0052      	lsls	r2, r2, #1
 8000730:	eb43 0303 	adc.w	r3, r3, r3
 8000734:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000738:	bf08      	it	eq
 800073a:	3d01      	subeq	r5, #1
 800073c:	d0f7      	beq.n	800072e <__aeabi_dmul+0x1c6>
 800073e:	ea43 0306 	orr.w	r3, r3, r6
 8000742:	4770      	bx	lr
 8000744:	ea94 0f0c 	teq	r4, ip
 8000748:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800074c:	bf18      	it	ne
 800074e:	ea95 0f0c 	teqne	r5, ip
 8000752:	d00c      	beq.n	800076e <__aeabi_dmul+0x206>
 8000754:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000758:	bf18      	it	ne
 800075a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800075e:	d1d1      	bne.n	8000704 <__aeabi_dmul+0x19c>
 8000760:	ea81 0103 	eor.w	r1, r1, r3
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	f04f 0000 	mov.w	r0, #0
 800076c:	bd70      	pop	{r4, r5, r6, pc}
 800076e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000772:	bf06      	itte	eq
 8000774:	4610      	moveq	r0, r2
 8000776:	4619      	moveq	r1, r3
 8000778:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800077c:	d019      	beq.n	80007b2 <__aeabi_dmul+0x24a>
 800077e:	ea94 0f0c 	teq	r4, ip
 8000782:	d102      	bne.n	800078a <__aeabi_dmul+0x222>
 8000784:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000788:	d113      	bne.n	80007b2 <__aeabi_dmul+0x24a>
 800078a:	ea95 0f0c 	teq	r5, ip
 800078e:	d105      	bne.n	800079c <__aeabi_dmul+0x234>
 8000790:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000794:	bf1c      	itt	ne
 8000796:	4610      	movne	r0, r2
 8000798:	4619      	movne	r1, r3
 800079a:	d10a      	bne.n	80007b2 <__aeabi_dmul+0x24a>
 800079c:	ea81 0103 	eor.w	r1, r1, r3
 80007a0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007a4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007a8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007ac:	f04f 0000 	mov.w	r0, #0
 80007b0:	bd70      	pop	{r4, r5, r6, pc}
 80007b2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007b6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007ba:	bd70      	pop	{r4, r5, r6, pc}

080007bc <__aeabi_ddiv>:
 80007bc:	b570      	push	{r4, r5, r6, lr}
 80007be:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007c2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007c6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007ca:	bf1d      	ittte	ne
 80007cc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007d0:	ea94 0f0c 	teqne	r4, ip
 80007d4:	ea95 0f0c 	teqne	r5, ip
 80007d8:	f000 f8a7 	bleq	800092a <__aeabi_ddiv+0x16e>
 80007dc:	eba4 0405 	sub.w	r4, r4, r5
 80007e0:	ea81 0e03 	eor.w	lr, r1, r3
 80007e4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007ec:	f000 8088 	beq.w	8000900 <__aeabi_ddiv+0x144>
 80007f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007f4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007f8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007fc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000800:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000804:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000808:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800080c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000810:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000814:	429d      	cmp	r5, r3
 8000816:	bf08      	it	eq
 8000818:	4296      	cmpeq	r6, r2
 800081a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800081e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000822:	d202      	bcs.n	800082a <__aeabi_ddiv+0x6e>
 8000824:	085b      	lsrs	r3, r3, #1
 8000826:	ea4f 0232 	mov.w	r2, r2, rrx
 800082a:	1ab6      	subs	r6, r6, r2
 800082c:	eb65 0503 	sbc.w	r5, r5, r3
 8000830:	085b      	lsrs	r3, r3, #1
 8000832:	ea4f 0232 	mov.w	r2, r2, rrx
 8000836:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800083a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000880:	085b      	lsrs	r3, r3, #1
 8000882:	ea4f 0232 	mov.w	r2, r2, rrx
 8000886:	ebb6 0e02 	subs.w	lr, r6, r2
 800088a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088e:	bf22      	ittt	cs
 8000890:	1ab6      	subcs	r6, r6, r2
 8000892:	4675      	movcs	r5, lr
 8000894:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000898:	ea55 0e06 	orrs.w	lr, r5, r6
 800089c:	d018      	beq.n	80008d0 <__aeabi_ddiv+0x114>
 800089e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008a2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008a6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008aa:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008ae:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008b2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008b6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008ba:	d1c0      	bne.n	800083e <__aeabi_ddiv+0x82>
 80008bc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008c0:	d10b      	bne.n	80008da <__aeabi_ddiv+0x11e>
 80008c2:	ea41 0100 	orr.w	r1, r1, r0
 80008c6:	f04f 0000 	mov.w	r0, #0
 80008ca:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008ce:	e7b6      	b.n	800083e <__aeabi_ddiv+0x82>
 80008d0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008d4:	bf04      	itt	eq
 80008d6:	4301      	orreq	r1, r0
 80008d8:	2000      	moveq	r0, #0
 80008da:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008de:	bf88      	it	hi
 80008e0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008e4:	f63f aeaf 	bhi.w	8000646 <__aeabi_dmul+0xde>
 80008e8:	ebb5 0c03 	subs.w	ip, r5, r3
 80008ec:	bf04      	itt	eq
 80008ee:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008f2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008f6:	f150 0000 	adcs.w	r0, r0, #0
 80008fa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	pop	{r4, r5, r6, pc}
 8000900:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000904:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000908:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800090c:	bfc2      	ittt	gt
 800090e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000912:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000916:	bd70      	popgt	{r4, r5, r6, pc}
 8000918:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800091c:	f04f 0e00 	mov.w	lr, #0
 8000920:	3c01      	subs	r4, #1
 8000922:	e690      	b.n	8000646 <__aeabi_dmul+0xde>
 8000924:	ea45 0e06 	orr.w	lr, r5, r6
 8000928:	e68d      	b.n	8000646 <__aeabi_dmul+0xde>
 800092a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800092e:	ea94 0f0c 	teq	r4, ip
 8000932:	bf08      	it	eq
 8000934:	ea95 0f0c 	teqeq	r5, ip
 8000938:	f43f af3b 	beq.w	80007b2 <__aeabi_dmul+0x24a>
 800093c:	ea94 0f0c 	teq	r4, ip
 8000940:	d10a      	bne.n	8000958 <__aeabi_ddiv+0x19c>
 8000942:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000946:	f47f af34 	bne.w	80007b2 <__aeabi_dmul+0x24a>
 800094a:	ea95 0f0c 	teq	r5, ip
 800094e:	f47f af25 	bne.w	800079c <__aeabi_dmul+0x234>
 8000952:	4610      	mov	r0, r2
 8000954:	4619      	mov	r1, r3
 8000956:	e72c      	b.n	80007b2 <__aeabi_dmul+0x24a>
 8000958:	ea95 0f0c 	teq	r5, ip
 800095c:	d106      	bne.n	800096c <__aeabi_ddiv+0x1b0>
 800095e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000962:	f43f aefd 	beq.w	8000760 <__aeabi_dmul+0x1f8>
 8000966:	4610      	mov	r0, r2
 8000968:	4619      	mov	r1, r3
 800096a:	e722      	b.n	80007b2 <__aeabi_dmul+0x24a>
 800096c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000970:	bf18      	it	ne
 8000972:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000976:	f47f aec5 	bne.w	8000704 <__aeabi_dmul+0x19c>
 800097a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800097e:	f47f af0d 	bne.w	800079c <__aeabi_dmul+0x234>
 8000982:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000986:	f47f aeeb 	bne.w	8000760 <__aeabi_dmul+0x1f8>
 800098a:	e712      	b.n	80007b2 <__aeabi_dmul+0x24a>

0800098c <__gedf2>:
 800098c:	f04f 3cff 	mov.w	ip, #4294967295
 8000990:	e006      	b.n	80009a0 <__cmpdf2+0x4>
 8000992:	bf00      	nop

08000994 <__ledf2>:
 8000994:	f04f 0c01 	mov.w	ip, #1
 8000998:	e002      	b.n	80009a0 <__cmpdf2+0x4>
 800099a:	bf00      	nop

0800099c <__cmpdf2>:
 800099c:	f04f 0c01 	mov.w	ip, #1
 80009a0:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009a4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009a8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009ac:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009b0:	bf18      	it	ne
 80009b2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009b6:	d01b      	beq.n	80009f0 <__cmpdf2+0x54>
 80009b8:	b001      	add	sp, #4
 80009ba:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009be:	bf0c      	ite	eq
 80009c0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009c4:	ea91 0f03 	teqne	r1, r3
 80009c8:	bf02      	ittt	eq
 80009ca:	ea90 0f02 	teqeq	r0, r2
 80009ce:	2000      	moveq	r0, #0
 80009d0:	4770      	bxeq	lr
 80009d2:	f110 0f00 	cmn.w	r0, #0
 80009d6:	ea91 0f03 	teq	r1, r3
 80009da:	bf58      	it	pl
 80009dc:	4299      	cmppl	r1, r3
 80009de:	bf08      	it	eq
 80009e0:	4290      	cmpeq	r0, r2
 80009e2:	bf2c      	ite	cs
 80009e4:	17d8      	asrcs	r0, r3, #31
 80009e6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009ea:	f040 0001 	orr.w	r0, r0, #1
 80009ee:	4770      	bx	lr
 80009f0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009f4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f8:	d102      	bne.n	8000a00 <__cmpdf2+0x64>
 80009fa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009fe:	d107      	bne.n	8000a10 <__cmpdf2+0x74>
 8000a00:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a04:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a08:	d1d6      	bne.n	80009b8 <__cmpdf2+0x1c>
 8000a0a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a0e:	d0d3      	beq.n	80009b8 <__cmpdf2+0x1c>
 8000a10:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a14:	4770      	bx	lr
 8000a16:	bf00      	nop

08000a18 <__aeabi_cdrcmple>:
 8000a18:	4684      	mov	ip, r0
 8000a1a:	4610      	mov	r0, r2
 8000a1c:	4662      	mov	r2, ip
 8000a1e:	468c      	mov	ip, r1
 8000a20:	4619      	mov	r1, r3
 8000a22:	4663      	mov	r3, ip
 8000a24:	e000      	b.n	8000a28 <__aeabi_cdcmpeq>
 8000a26:	bf00      	nop

08000a28 <__aeabi_cdcmpeq>:
 8000a28:	b501      	push	{r0, lr}
 8000a2a:	f7ff ffb7 	bl	800099c <__cmpdf2>
 8000a2e:	2800      	cmp	r0, #0
 8000a30:	bf48      	it	mi
 8000a32:	f110 0f00 	cmnmi.w	r0, #0
 8000a36:	bd01      	pop	{r0, pc}

08000a38 <__aeabi_dcmpeq>:
 8000a38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a3c:	f7ff fff4 	bl	8000a28 <__aeabi_cdcmpeq>
 8000a40:	bf0c      	ite	eq
 8000a42:	2001      	moveq	r0, #1
 8000a44:	2000      	movne	r0, #0
 8000a46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a4a:	bf00      	nop

08000a4c <__aeabi_dcmplt>:
 8000a4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a50:	f7ff ffea 	bl	8000a28 <__aeabi_cdcmpeq>
 8000a54:	bf34      	ite	cc
 8000a56:	2001      	movcc	r0, #1
 8000a58:	2000      	movcs	r0, #0
 8000a5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5e:	bf00      	nop

08000a60 <__aeabi_dcmple>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff ffe0 	bl	8000a28 <__aeabi_cdcmpeq>
 8000a68:	bf94      	ite	ls
 8000a6a:	2001      	movls	r0, #1
 8000a6c:	2000      	movhi	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_dcmpge>:
 8000a74:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a78:	f7ff ffce 	bl	8000a18 <__aeabi_cdrcmple>
 8000a7c:	bf94      	ite	ls
 8000a7e:	2001      	movls	r0, #1
 8000a80:	2000      	movhi	r0, #0
 8000a82:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a86:	bf00      	nop

08000a88 <__aeabi_dcmpgt>:
 8000a88:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a8c:	f7ff ffc4 	bl	8000a18 <__aeabi_cdrcmple>
 8000a90:	bf34      	ite	cc
 8000a92:	2001      	movcc	r0, #1
 8000a94:	2000      	movcs	r0, #0
 8000a96:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9a:	bf00      	nop

08000a9c <__aeabi_d2iz>:
 8000a9c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000aa0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000aa4:	d215      	bcs.n	8000ad2 <__aeabi_d2iz+0x36>
 8000aa6:	d511      	bpl.n	8000acc <__aeabi_d2iz+0x30>
 8000aa8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000aac:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ab0:	d912      	bls.n	8000ad8 <__aeabi_d2iz+0x3c>
 8000ab2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ab6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aba:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000abe:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000ac2:	fa23 f002 	lsr.w	r0, r3, r2
 8000ac6:	bf18      	it	ne
 8000ac8:	4240      	negne	r0, r0
 8000aca:	4770      	bx	lr
 8000acc:	f04f 0000 	mov.w	r0, #0
 8000ad0:	4770      	bx	lr
 8000ad2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ad6:	d105      	bne.n	8000ae4 <__aeabi_d2iz+0x48>
 8000ad8:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000adc:	bf08      	it	eq
 8000ade:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000ae2:	4770      	bx	lr
 8000ae4:	f04f 0000 	mov.w	r0, #0
 8000ae8:	4770      	bx	lr
 8000aea:	bf00      	nop

08000aec <__aeabi_d2uiz>:
 8000aec:	004a      	lsls	r2, r1, #1
 8000aee:	d211      	bcs.n	8000b14 <__aeabi_d2uiz+0x28>
 8000af0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000af4:	d211      	bcs.n	8000b1a <__aeabi_d2uiz+0x2e>
 8000af6:	d50d      	bpl.n	8000b14 <__aeabi_d2uiz+0x28>
 8000af8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000afc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b00:	d40e      	bmi.n	8000b20 <__aeabi_d2uiz+0x34>
 8000b02:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b06:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b0a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b0e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b12:	4770      	bx	lr
 8000b14:	f04f 0000 	mov.w	r0, #0
 8000b18:	4770      	bx	lr
 8000b1a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b1e:	d102      	bne.n	8000b26 <__aeabi_d2uiz+0x3a>
 8000b20:	f04f 30ff 	mov.w	r0, #4294967295
 8000b24:	4770      	bx	lr
 8000b26:	f04f 0000 	mov.w	r0, #0
 8000b2a:	4770      	bx	lr

08000b2c <__aeabi_uldivmod>:
 8000b2c:	b953      	cbnz	r3, 8000b44 <__aeabi_uldivmod+0x18>
 8000b2e:	b94a      	cbnz	r2, 8000b44 <__aeabi_uldivmod+0x18>
 8000b30:	2900      	cmp	r1, #0
 8000b32:	bf08      	it	eq
 8000b34:	2800      	cmpeq	r0, #0
 8000b36:	bf1c      	itt	ne
 8000b38:	f04f 31ff 	movne.w	r1, #4294967295
 8000b3c:	f04f 30ff 	movne.w	r0, #4294967295
 8000b40:	f000 b974 	b.w	8000e2c <__aeabi_idiv0>
 8000b44:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b48:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b4c:	f000 f806 	bl	8000b5c <__udivmoddi4>
 8000b50:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b54:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b58:	b004      	add	sp, #16
 8000b5a:	4770      	bx	lr

08000b5c <__udivmoddi4>:
 8000b5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b60:	9d08      	ldr	r5, [sp, #32]
 8000b62:	4604      	mov	r4, r0
 8000b64:	468e      	mov	lr, r1
 8000b66:	2b00      	cmp	r3, #0
 8000b68:	d14d      	bne.n	8000c06 <__udivmoddi4+0xaa>
 8000b6a:	428a      	cmp	r2, r1
 8000b6c:	4694      	mov	ip, r2
 8000b6e:	d969      	bls.n	8000c44 <__udivmoddi4+0xe8>
 8000b70:	fab2 f282 	clz	r2, r2
 8000b74:	b152      	cbz	r2, 8000b8c <__udivmoddi4+0x30>
 8000b76:	fa01 f302 	lsl.w	r3, r1, r2
 8000b7a:	f1c2 0120 	rsb	r1, r2, #32
 8000b7e:	fa20 f101 	lsr.w	r1, r0, r1
 8000b82:	fa0c fc02 	lsl.w	ip, ip, r2
 8000b86:	ea41 0e03 	orr.w	lr, r1, r3
 8000b8a:	4094      	lsls	r4, r2
 8000b8c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000b90:	0c21      	lsrs	r1, r4, #16
 8000b92:	fbbe f6f8 	udiv	r6, lr, r8
 8000b96:	fa1f f78c 	uxth.w	r7, ip
 8000b9a:	fb08 e316 	mls	r3, r8, r6, lr
 8000b9e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000ba2:	fb06 f107 	mul.w	r1, r6, r7
 8000ba6:	4299      	cmp	r1, r3
 8000ba8:	d90a      	bls.n	8000bc0 <__udivmoddi4+0x64>
 8000baa:	eb1c 0303 	adds.w	r3, ip, r3
 8000bae:	f106 30ff 	add.w	r0, r6, #4294967295
 8000bb2:	f080 811f 	bcs.w	8000df4 <__udivmoddi4+0x298>
 8000bb6:	4299      	cmp	r1, r3
 8000bb8:	f240 811c 	bls.w	8000df4 <__udivmoddi4+0x298>
 8000bbc:	3e02      	subs	r6, #2
 8000bbe:	4463      	add	r3, ip
 8000bc0:	1a5b      	subs	r3, r3, r1
 8000bc2:	b2a4      	uxth	r4, r4
 8000bc4:	fbb3 f0f8 	udiv	r0, r3, r8
 8000bc8:	fb08 3310 	mls	r3, r8, r0, r3
 8000bcc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000bd0:	fb00 f707 	mul.w	r7, r0, r7
 8000bd4:	42a7      	cmp	r7, r4
 8000bd6:	d90a      	bls.n	8000bee <__udivmoddi4+0x92>
 8000bd8:	eb1c 0404 	adds.w	r4, ip, r4
 8000bdc:	f100 33ff 	add.w	r3, r0, #4294967295
 8000be0:	f080 810a 	bcs.w	8000df8 <__udivmoddi4+0x29c>
 8000be4:	42a7      	cmp	r7, r4
 8000be6:	f240 8107 	bls.w	8000df8 <__udivmoddi4+0x29c>
 8000bea:	4464      	add	r4, ip
 8000bec:	3802      	subs	r0, #2
 8000bee:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000bf2:	1be4      	subs	r4, r4, r7
 8000bf4:	2600      	movs	r6, #0
 8000bf6:	b11d      	cbz	r5, 8000c00 <__udivmoddi4+0xa4>
 8000bf8:	40d4      	lsrs	r4, r2
 8000bfa:	2300      	movs	r3, #0
 8000bfc:	e9c5 4300 	strd	r4, r3, [r5]
 8000c00:	4631      	mov	r1, r6
 8000c02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c06:	428b      	cmp	r3, r1
 8000c08:	d909      	bls.n	8000c1e <__udivmoddi4+0xc2>
 8000c0a:	2d00      	cmp	r5, #0
 8000c0c:	f000 80ef 	beq.w	8000dee <__udivmoddi4+0x292>
 8000c10:	2600      	movs	r6, #0
 8000c12:	e9c5 0100 	strd	r0, r1, [r5]
 8000c16:	4630      	mov	r0, r6
 8000c18:	4631      	mov	r1, r6
 8000c1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c1e:	fab3 f683 	clz	r6, r3
 8000c22:	2e00      	cmp	r6, #0
 8000c24:	d14a      	bne.n	8000cbc <__udivmoddi4+0x160>
 8000c26:	428b      	cmp	r3, r1
 8000c28:	d302      	bcc.n	8000c30 <__udivmoddi4+0xd4>
 8000c2a:	4282      	cmp	r2, r0
 8000c2c:	f200 80f9 	bhi.w	8000e22 <__udivmoddi4+0x2c6>
 8000c30:	1a84      	subs	r4, r0, r2
 8000c32:	eb61 0303 	sbc.w	r3, r1, r3
 8000c36:	2001      	movs	r0, #1
 8000c38:	469e      	mov	lr, r3
 8000c3a:	2d00      	cmp	r5, #0
 8000c3c:	d0e0      	beq.n	8000c00 <__udivmoddi4+0xa4>
 8000c3e:	e9c5 4e00 	strd	r4, lr, [r5]
 8000c42:	e7dd      	b.n	8000c00 <__udivmoddi4+0xa4>
 8000c44:	b902      	cbnz	r2, 8000c48 <__udivmoddi4+0xec>
 8000c46:	deff      	udf	#255	; 0xff
 8000c48:	fab2 f282 	clz	r2, r2
 8000c4c:	2a00      	cmp	r2, #0
 8000c4e:	f040 8092 	bne.w	8000d76 <__udivmoddi4+0x21a>
 8000c52:	eba1 010c 	sub.w	r1, r1, ip
 8000c56:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c5a:	fa1f fe8c 	uxth.w	lr, ip
 8000c5e:	2601      	movs	r6, #1
 8000c60:	0c20      	lsrs	r0, r4, #16
 8000c62:	fbb1 f3f7 	udiv	r3, r1, r7
 8000c66:	fb07 1113 	mls	r1, r7, r3, r1
 8000c6a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000c6e:	fb0e f003 	mul.w	r0, lr, r3
 8000c72:	4288      	cmp	r0, r1
 8000c74:	d908      	bls.n	8000c88 <__udivmoddi4+0x12c>
 8000c76:	eb1c 0101 	adds.w	r1, ip, r1
 8000c7a:	f103 38ff 	add.w	r8, r3, #4294967295
 8000c7e:	d202      	bcs.n	8000c86 <__udivmoddi4+0x12a>
 8000c80:	4288      	cmp	r0, r1
 8000c82:	f200 80cb 	bhi.w	8000e1c <__udivmoddi4+0x2c0>
 8000c86:	4643      	mov	r3, r8
 8000c88:	1a09      	subs	r1, r1, r0
 8000c8a:	b2a4      	uxth	r4, r4
 8000c8c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c90:	fb07 1110 	mls	r1, r7, r0, r1
 8000c94:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000c98:	fb0e fe00 	mul.w	lr, lr, r0
 8000c9c:	45a6      	cmp	lr, r4
 8000c9e:	d908      	bls.n	8000cb2 <__udivmoddi4+0x156>
 8000ca0:	eb1c 0404 	adds.w	r4, ip, r4
 8000ca4:	f100 31ff 	add.w	r1, r0, #4294967295
 8000ca8:	d202      	bcs.n	8000cb0 <__udivmoddi4+0x154>
 8000caa:	45a6      	cmp	lr, r4
 8000cac:	f200 80bb 	bhi.w	8000e26 <__udivmoddi4+0x2ca>
 8000cb0:	4608      	mov	r0, r1
 8000cb2:	eba4 040e 	sub.w	r4, r4, lr
 8000cb6:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000cba:	e79c      	b.n	8000bf6 <__udivmoddi4+0x9a>
 8000cbc:	f1c6 0720 	rsb	r7, r6, #32
 8000cc0:	40b3      	lsls	r3, r6
 8000cc2:	fa22 fc07 	lsr.w	ip, r2, r7
 8000cc6:	ea4c 0c03 	orr.w	ip, ip, r3
 8000cca:	fa20 f407 	lsr.w	r4, r0, r7
 8000cce:	fa01 f306 	lsl.w	r3, r1, r6
 8000cd2:	431c      	orrs	r4, r3
 8000cd4:	40f9      	lsrs	r1, r7
 8000cd6:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000cda:	fa00 f306 	lsl.w	r3, r0, r6
 8000cde:	fbb1 f8f9 	udiv	r8, r1, r9
 8000ce2:	0c20      	lsrs	r0, r4, #16
 8000ce4:	fa1f fe8c 	uxth.w	lr, ip
 8000ce8:	fb09 1118 	mls	r1, r9, r8, r1
 8000cec:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000cf0:	fb08 f00e 	mul.w	r0, r8, lr
 8000cf4:	4288      	cmp	r0, r1
 8000cf6:	fa02 f206 	lsl.w	r2, r2, r6
 8000cfa:	d90b      	bls.n	8000d14 <__udivmoddi4+0x1b8>
 8000cfc:	eb1c 0101 	adds.w	r1, ip, r1
 8000d00:	f108 3aff 	add.w	sl, r8, #4294967295
 8000d04:	f080 8088 	bcs.w	8000e18 <__udivmoddi4+0x2bc>
 8000d08:	4288      	cmp	r0, r1
 8000d0a:	f240 8085 	bls.w	8000e18 <__udivmoddi4+0x2bc>
 8000d0e:	f1a8 0802 	sub.w	r8, r8, #2
 8000d12:	4461      	add	r1, ip
 8000d14:	1a09      	subs	r1, r1, r0
 8000d16:	b2a4      	uxth	r4, r4
 8000d18:	fbb1 f0f9 	udiv	r0, r1, r9
 8000d1c:	fb09 1110 	mls	r1, r9, r0, r1
 8000d20:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000d24:	fb00 fe0e 	mul.w	lr, r0, lr
 8000d28:	458e      	cmp	lr, r1
 8000d2a:	d908      	bls.n	8000d3e <__udivmoddi4+0x1e2>
 8000d2c:	eb1c 0101 	adds.w	r1, ip, r1
 8000d30:	f100 34ff 	add.w	r4, r0, #4294967295
 8000d34:	d26c      	bcs.n	8000e10 <__udivmoddi4+0x2b4>
 8000d36:	458e      	cmp	lr, r1
 8000d38:	d96a      	bls.n	8000e10 <__udivmoddi4+0x2b4>
 8000d3a:	3802      	subs	r0, #2
 8000d3c:	4461      	add	r1, ip
 8000d3e:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000d42:	fba0 9402 	umull	r9, r4, r0, r2
 8000d46:	eba1 010e 	sub.w	r1, r1, lr
 8000d4a:	42a1      	cmp	r1, r4
 8000d4c:	46c8      	mov	r8, r9
 8000d4e:	46a6      	mov	lr, r4
 8000d50:	d356      	bcc.n	8000e00 <__udivmoddi4+0x2a4>
 8000d52:	d053      	beq.n	8000dfc <__udivmoddi4+0x2a0>
 8000d54:	b15d      	cbz	r5, 8000d6e <__udivmoddi4+0x212>
 8000d56:	ebb3 0208 	subs.w	r2, r3, r8
 8000d5a:	eb61 010e 	sbc.w	r1, r1, lr
 8000d5e:	fa01 f707 	lsl.w	r7, r1, r7
 8000d62:	fa22 f306 	lsr.w	r3, r2, r6
 8000d66:	40f1      	lsrs	r1, r6
 8000d68:	431f      	orrs	r7, r3
 8000d6a:	e9c5 7100 	strd	r7, r1, [r5]
 8000d6e:	2600      	movs	r6, #0
 8000d70:	4631      	mov	r1, r6
 8000d72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d76:	f1c2 0320 	rsb	r3, r2, #32
 8000d7a:	40d8      	lsrs	r0, r3
 8000d7c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d80:	fa21 f303 	lsr.w	r3, r1, r3
 8000d84:	4091      	lsls	r1, r2
 8000d86:	4301      	orrs	r1, r0
 8000d88:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d8c:	fa1f fe8c 	uxth.w	lr, ip
 8000d90:	fbb3 f0f7 	udiv	r0, r3, r7
 8000d94:	fb07 3610 	mls	r6, r7, r0, r3
 8000d98:	0c0b      	lsrs	r3, r1, #16
 8000d9a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000d9e:	fb00 f60e 	mul.w	r6, r0, lr
 8000da2:	429e      	cmp	r6, r3
 8000da4:	fa04 f402 	lsl.w	r4, r4, r2
 8000da8:	d908      	bls.n	8000dbc <__udivmoddi4+0x260>
 8000daa:	eb1c 0303 	adds.w	r3, ip, r3
 8000dae:	f100 38ff 	add.w	r8, r0, #4294967295
 8000db2:	d22f      	bcs.n	8000e14 <__udivmoddi4+0x2b8>
 8000db4:	429e      	cmp	r6, r3
 8000db6:	d92d      	bls.n	8000e14 <__udivmoddi4+0x2b8>
 8000db8:	3802      	subs	r0, #2
 8000dba:	4463      	add	r3, ip
 8000dbc:	1b9b      	subs	r3, r3, r6
 8000dbe:	b289      	uxth	r1, r1
 8000dc0:	fbb3 f6f7 	udiv	r6, r3, r7
 8000dc4:	fb07 3316 	mls	r3, r7, r6, r3
 8000dc8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000dcc:	fb06 f30e 	mul.w	r3, r6, lr
 8000dd0:	428b      	cmp	r3, r1
 8000dd2:	d908      	bls.n	8000de6 <__udivmoddi4+0x28a>
 8000dd4:	eb1c 0101 	adds.w	r1, ip, r1
 8000dd8:	f106 38ff 	add.w	r8, r6, #4294967295
 8000ddc:	d216      	bcs.n	8000e0c <__udivmoddi4+0x2b0>
 8000dde:	428b      	cmp	r3, r1
 8000de0:	d914      	bls.n	8000e0c <__udivmoddi4+0x2b0>
 8000de2:	3e02      	subs	r6, #2
 8000de4:	4461      	add	r1, ip
 8000de6:	1ac9      	subs	r1, r1, r3
 8000de8:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000dec:	e738      	b.n	8000c60 <__udivmoddi4+0x104>
 8000dee:	462e      	mov	r6, r5
 8000df0:	4628      	mov	r0, r5
 8000df2:	e705      	b.n	8000c00 <__udivmoddi4+0xa4>
 8000df4:	4606      	mov	r6, r0
 8000df6:	e6e3      	b.n	8000bc0 <__udivmoddi4+0x64>
 8000df8:	4618      	mov	r0, r3
 8000dfa:	e6f8      	b.n	8000bee <__udivmoddi4+0x92>
 8000dfc:	454b      	cmp	r3, r9
 8000dfe:	d2a9      	bcs.n	8000d54 <__udivmoddi4+0x1f8>
 8000e00:	ebb9 0802 	subs.w	r8, r9, r2
 8000e04:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000e08:	3801      	subs	r0, #1
 8000e0a:	e7a3      	b.n	8000d54 <__udivmoddi4+0x1f8>
 8000e0c:	4646      	mov	r6, r8
 8000e0e:	e7ea      	b.n	8000de6 <__udivmoddi4+0x28a>
 8000e10:	4620      	mov	r0, r4
 8000e12:	e794      	b.n	8000d3e <__udivmoddi4+0x1e2>
 8000e14:	4640      	mov	r0, r8
 8000e16:	e7d1      	b.n	8000dbc <__udivmoddi4+0x260>
 8000e18:	46d0      	mov	r8, sl
 8000e1a:	e77b      	b.n	8000d14 <__udivmoddi4+0x1b8>
 8000e1c:	3b02      	subs	r3, #2
 8000e1e:	4461      	add	r1, ip
 8000e20:	e732      	b.n	8000c88 <__udivmoddi4+0x12c>
 8000e22:	4630      	mov	r0, r6
 8000e24:	e709      	b.n	8000c3a <__udivmoddi4+0xde>
 8000e26:	4464      	add	r4, ip
 8000e28:	3802      	subs	r0, #2
 8000e2a:	e742      	b.n	8000cb2 <__udivmoddi4+0x156>

08000e2c <__aeabi_idiv0>:
 8000e2c:	4770      	bx	lr
 8000e2e:	bf00      	nop

08000e30 <HAL_ADC_ConvCpltCallback>:
int adcConvCpltFlag = 0;
float adcData[ADC_CHANNELS_NUM];
float adcVoltage[ADC_CHANNELS_NUM];

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8000e30:	b580      	push	{r7, lr}
 8000e32:	b082      	sub	sp, #8
 8000e34:	af00      	add	r7, sp, #0
 8000e36:	6078      	str	r0, [r7, #4]
  if (hadc->Instance == ADC1){
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	4a20      	ldr	r2, [pc, #128]	; (8000ec0 <HAL_ADC_ConvCpltCallback+0x90>)
 8000e3e:	4293      	cmp	r3, r2
 8000e40:	d11a      	bne.n	8000e78 <HAL_ADC_ConvCpltCallback+0x48>
    adcData[0] = HAL_ADC_GetValue(&hadc1);
 8000e42:	4820      	ldr	r0, [pc, #128]	; (8000ec4 <HAL_ADC_ConvCpltCallback+0x94>)
 8000e44:	f001 f8c2 	bl	8001fcc <HAL_ADC_GetValue>
 8000e48:	ee07 0a90 	vmov	s15, r0
 8000e4c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000e50:	4b1d      	ldr	r3, [pc, #116]	; (8000ec8 <HAL_ADC_ConvCpltCallback+0x98>)
 8000e52:	edc3 7a00 	vstr	s15, [r3]
    adcVoltage[0] = (float) adcData[0] * Vref / 4096.0;
 8000e56:	4b1c      	ldr	r3, [pc, #112]	; (8000ec8 <HAL_ADC_ConvCpltCallback+0x98>)
 8000e58:	edd3 7a00 	vldr	s15, [r3]
 8000e5c:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 8000e60:	ee27 7a87 	vmul.f32	s14, s15, s14
 8000e64:	eddf 6a19 	vldr	s13, [pc, #100]	; 8000ecc <HAL_ADC_ConvCpltCallback+0x9c>
 8000e68:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000e6c:	4b18      	ldr	r3, [pc, #96]	; (8000ed0 <HAL_ADC_ConvCpltCallback+0xa0>)
 8000e6e:	edc3 7a00 	vstr	s15, [r3]
    adcConvCpltFlag = 1;  // Установить флаг завершения преобразования
 8000e72:	4b18      	ldr	r3, [pc, #96]	; (8000ed4 <HAL_ADC_ConvCpltCallback+0xa4>)
 8000e74:	2201      	movs	r2, #1
 8000e76:	601a      	str	r2, [r3, #0]
  }
  if (hadc->Instance == ADC2){
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	681b      	ldr	r3, [r3, #0]
 8000e7c:	4a16      	ldr	r2, [pc, #88]	; (8000ed8 <HAL_ADC_ConvCpltCallback+0xa8>)
 8000e7e:	4293      	cmp	r3, r2
 8000e80:	d11a      	bne.n	8000eb8 <HAL_ADC_ConvCpltCallback+0x88>
      adcData[1] = HAL_ADC_GetValue(&hadc2);
 8000e82:	4816      	ldr	r0, [pc, #88]	; (8000edc <HAL_ADC_ConvCpltCallback+0xac>)
 8000e84:	f001 f8a2 	bl	8001fcc <HAL_ADC_GetValue>
 8000e88:	ee07 0a90 	vmov	s15, r0
 8000e8c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000e90:	4b0d      	ldr	r3, [pc, #52]	; (8000ec8 <HAL_ADC_ConvCpltCallback+0x98>)
 8000e92:	edc3 7a01 	vstr	s15, [r3, #4]
      adcVoltage[1] = (float) adcData[1] * Vref / 4095.0;
 8000e96:	4b0c      	ldr	r3, [pc, #48]	; (8000ec8 <HAL_ADC_ConvCpltCallback+0x98>)
 8000e98:	edd3 7a01 	vldr	s15, [r3, #4]
 8000e9c:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 8000ea0:	ee27 7a87 	vmul.f32	s14, s15, s14
 8000ea4:	eddf 6a0e 	vldr	s13, [pc, #56]	; 8000ee0 <HAL_ADC_ConvCpltCallback+0xb0>
 8000ea8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000eac:	4b08      	ldr	r3, [pc, #32]	; (8000ed0 <HAL_ADC_ConvCpltCallback+0xa0>)
 8000eae:	edc3 7a01 	vstr	s15, [r3, #4]
      adcConvCpltFlag = 1;  // Установить флаг завершения преобразования
 8000eb2:	4b08      	ldr	r3, [pc, #32]	; (8000ed4 <HAL_ADC_ConvCpltCallback+0xa4>)
 8000eb4:	2201      	movs	r2, #1
 8000eb6:	601a      	str	r2, [r3, #0]
    }
}
 8000eb8:	bf00      	nop
 8000eba:	3708      	adds	r7, #8
 8000ebc:	46bd      	mov	sp, r7
 8000ebe:	bd80      	pop	{r7, pc}
 8000ec0:	40012000 	.word	0x40012000
 8000ec4:	2000002c 	.word	0x2000002c
 8000ec8:	20000150 	.word	0x20000150
 8000ecc:	45800000 	.word	0x45800000
 8000ed0:	20000158 	.word	0x20000158
 8000ed4:	2000014c 	.word	0x2000014c
 8000ed8:	40012100 	.word	0x40012100
 8000edc:	20000074 	.word	0x20000074
 8000ee0:	457ff000 	.word	0x457ff000

08000ee4 <init_tan_table>:
#define M_PI 3.14f
#define TAN_TABLE_SIZE 360
double tan_table[TAN_TABLE_SIZE];

void init_tan_table()
{
 8000ee4:	b5b0      	push	{r4, r5, r7, lr}
 8000ee6:	b084      	sub	sp, #16
 8000ee8:	af00      	add	r7, sp, #0
  for (int i = 0; i < TAN_TABLE_SIZE; i++)
 8000eea:	2300      	movs	r3, #0
 8000eec:	60fb      	str	r3, [r7, #12]
 8000eee:	e066      	b.n	8000fbe <init_tan_table+0xda>
  {
    double angle = (i * M_PI) / 180;
 8000ef0:	68fb      	ldr	r3, [r7, #12]
 8000ef2:	ee07 3a90 	vmov	s15, r3
 8000ef6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000efa:	ed9f 7a35 	vldr	s14, [pc, #212]	; 8000fd0 <init_tan_table+0xec>
 8000efe:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000f02:	ed9f 7a34 	vldr	s14, [pc, #208]	; 8000fd4 <init_tan_table+0xf0>
 8000f06:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8000f0a:	ee16 0a90 	vmov	r0, s13
 8000f0e:	f7ff fad3 	bl	80004b8 <__aeabi_f2d>
 8000f12:	4602      	mov	r2, r0
 8000f14:	460b      	mov	r3, r1
 8000f16:	e9c7 2300 	strd	r2, r3, [r7]
    tan_table[i] = tan(angle) / 5;
 8000f1a:	ed97 0b00 	vldr	d0, [r7]
 8000f1e:	f003 f9e3 	bl	80042e8 <tan>
 8000f22:	ec51 0b10 	vmov	r0, r1, d0
 8000f26:	f04f 0200 	mov.w	r2, #0
 8000f2a:	4b2b      	ldr	r3, [pc, #172]	; (8000fd8 <init_tan_table+0xf4>)
 8000f2c:	f7ff fc46 	bl	80007bc <__aeabi_ddiv>
 8000f30:	4602      	mov	r2, r0
 8000f32:	460b      	mov	r3, r1
 8000f34:	4829      	ldr	r0, [pc, #164]	; (8000fdc <init_tan_table+0xf8>)
 8000f36:	68f9      	ldr	r1, [r7, #12]
 8000f38:	00c9      	lsls	r1, r1, #3
 8000f3a:	4401      	add	r1, r0
 8000f3c:	e9c1 2300 	strd	r2, r3, [r1]
    if (fabs(tan_table[i]) >= TIM4->ARR)
 8000f40:	4a26      	ldr	r2, [pc, #152]	; (8000fdc <init_tan_table+0xf8>)
 8000f42:	68fb      	ldr	r3, [r7, #12]
 8000f44:	00db      	lsls	r3, r3, #3
 8000f46:	4413      	add	r3, r2
 8000f48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f4c:	4614      	mov	r4, r2
 8000f4e:	f023 4500 	bic.w	r5, r3, #2147483648	; 0x80000000
 8000f52:	4b23      	ldr	r3, [pc, #140]	; (8000fe0 <init_tan_table+0xfc>)
 8000f54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f56:	4618      	mov	r0, r3
 8000f58:	f7ff fa8c 	bl	8000474 <__aeabi_ui2d>
 8000f5c:	4602      	mov	r2, r0
 8000f5e:	460b      	mov	r3, r1
 8000f60:	4620      	mov	r0, r4
 8000f62:	4629      	mov	r1, r5
 8000f64:	f7ff fd86 	bl	8000a74 <__aeabi_dcmpge>
 8000f68:	4603      	mov	r3, r0
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	d024      	beq.n	8000fb8 <init_tan_table+0xd4>
    {
      tan_table[i] = tan_table[i] > 0 ? TIM4->ARR : -TIM4->ARR;
 8000f6e:	4a1b      	ldr	r2, [pc, #108]	; (8000fdc <init_tan_table+0xf8>)
 8000f70:	68fb      	ldr	r3, [r7, #12]
 8000f72:	00db      	lsls	r3, r3, #3
 8000f74:	4413      	add	r3, r2
 8000f76:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000f7a:	f04f 0200 	mov.w	r2, #0
 8000f7e:	f04f 0300 	mov.w	r3, #0
 8000f82:	f7ff fd81 	bl	8000a88 <__aeabi_dcmpgt>
 8000f86:	4603      	mov	r3, r0
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	d007      	beq.n	8000f9c <init_tan_table+0xb8>
 8000f8c:	4b14      	ldr	r3, [pc, #80]	; (8000fe0 <init_tan_table+0xfc>)
 8000f8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f90:	4618      	mov	r0, r3
 8000f92:	f7ff fa6f 	bl	8000474 <__aeabi_ui2d>
 8000f96:	4602      	mov	r2, r0
 8000f98:	460b      	mov	r3, r1
 8000f9a:	e007      	b.n	8000fac <init_tan_table+0xc8>
 8000f9c:	4b10      	ldr	r3, [pc, #64]	; (8000fe0 <init_tan_table+0xfc>)
 8000f9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000fa0:	425b      	negs	r3, r3
 8000fa2:	4618      	mov	r0, r3
 8000fa4:	f7ff fa66 	bl	8000474 <__aeabi_ui2d>
 8000fa8:	4602      	mov	r2, r0
 8000faa:	460b      	mov	r3, r1
 8000fac:	480b      	ldr	r0, [pc, #44]	; (8000fdc <init_tan_table+0xf8>)
 8000fae:	68f9      	ldr	r1, [r7, #12]
 8000fb0:	00c9      	lsls	r1, r1, #3
 8000fb2:	4401      	add	r1, r0
 8000fb4:	e9c1 2300 	strd	r2, r3, [r1]
  for (int i = 0; i < TAN_TABLE_SIZE; i++)
 8000fb8:	68fb      	ldr	r3, [r7, #12]
 8000fba:	3301      	adds	r3, #1
 8000fbc:	60fb      	str	r3, [r7, #12]
 8000fbe:	68fb      	ldr	r3, [r7, #12]
 8000fc0:	f5b3 7fb4 	cmp.w	r3, #360	; 0x168
 8000fc4:	db94      	blt.n	8000ef0 <init_tan_table+0xc>
    }
  }
}
 8000fc6:	bf00      	nop
 8000fc8:	bf00      	nop
 8000fca:	3710      	adds	r7, #16
 8000fcc:	46bd      	mov	sp, r7
 8000fce:	bdb0      	pop	{r4, r5, r7, pc}
 8000fd0:	4048f5c3 	.word	0x4048f5c3
 8000fd4:	43340000 	.word	0x43340000
 8000fd8:	40140000 	.word	0x40140000
 8000fdc:	20000160 	.word	0x20000160
 8000fe0:	40000800 	.word	0x40000800
 8000fe4:	00000000 	.word	0x00000000

08000fe8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000fe8:	b5b0      	push	{r4, r5, r7, lr}
 8000fea:	b08a      	sub	sp, #40	; 0x28
 8000fec:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000fee:	f000 fd25 	bl	8001a3c <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ff2:	f000 f92f 	bl	8001254 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ff6:	f000 fb39 	bl	800166c <MX_GPIO_Init>
  MX_TIM2_Init();
 8000ffa:	f000 fa43 	bl	8001484 <MX_TIM2_Init>
  MX_ADC1_Init();
 8000ffe:	f000 f99b 	bl	8001338 <MX_ADC1_Init>
  MX_TIM4_Init();
 8001002:	f000 fab3 	bl	800156c <MX_TIM4_Init>
  MX_ADC2_Init();
 8001006:	f000 f9eb 	bl	80013e0 <MX_ADC2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 800100a:	2100      	movs	r1, #0
 800100c:	4880      	ldr	r0, [pc, #512]	; (8001210 <main+0x228>)
 800100e:	f002 fa11 	bl	8003434 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 8001012:	2100      	movs	r1, #0
 8001014:	487f      	ldr	r0, [pc, #508]	; (8001214 <main+0x22c>)
 8001016:	f002 fa0d 	bl	8003434 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4);
 800101a:	210c      	movs	r1, #12
 800101c:	487d      	ldr	r0, [pc, #500]	; (8001214 <main+0x22c>)
 800101e:	f002 fa09 	bl	8003434 <HAL_TIM_PWM_Start>

  double temp;
  int sin_index = 0;
 8001022:	2300      	movs	r3, #0
 8001024:	627b      	str	r3, [r7, #36]	; 0x24
  init_tan_table();
 8001026:	f7ff ff5d 	bl	8000ee4 <init_tan_table>

  int max_tim = 0;
 800102a:	2300      	movs	r3, #0
 800102c:	617b      	str	r3, [r7, #20]
  double max_adc = 0;
 800102e:	f04f 0200 	mov.w	r2, #0
 8001032:	f04f 0300 	mov.w	r3, #0
 8001036:	e9c7 2306 	strd	r2, r3, [r7, #24]

  HAL_ADC_Start_IT(&hadc1); // Запуск АЦП с прерываниями
 800103a:	4877      	ldr	r0, [pc, #476]	; (8001218 <main+0x230>)
 800103c:	f000 fdd8 	bl	8001bf0 <HAL_ADC_Start_IT>
  HAL_ADC_Start_IT(&hadc2); // Запуск АЦП с прерываниями
 8001040:	4876      	ldr	r0, [pc, #472]	; (800121c <main+0x234>)
 8001042:	f000 fdd5 	bl	8001bf0 <HAL_ADC_Start_IT>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    if (adcConvCpltFlag)  // Проверить флаг завершения преобразования
 8001046:	4b76      	ldr	r3, [pc, #472]	; (8001220 <main+0x238>)
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	2b00      	cmp	r3, #0
 800104c:	f000 80d4 	beq.w	80011f8 <main+0x210>
    {
      adcConvCpltFlag = 0;  // Сбросить флаг
 8001050:	4b73      	ldr	r3, [pc, #460]	; (8001220 <main+0x238>)
 8001052:	2200      	movs	r2, #0
 8001054:	601a      	str	r2, [r3, #0]

      temp = (double)(adcVoltage[0] - tV_25) / tSlope + 25;
 8001056:	4b73      	ldr	r3, [pc, #460]	; (8001224 <main+0x23c>)
 8001058:	edd3 7a00 	vldr	s15, [r3]
 800105c:	ed9f 7a72 	vldr	s14, [pc, #456]	; 8001228 <main+0x240>
 8001060:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001064:	ee17 0a90 	vmov	r0, s15
 8001068:	f7ff fa26 	bl	80004b8 <__aeabi_f2d>
 800106c:	a364      	add	r3, pc, #400	; (adr r3, 8001200 <main+0x218>)
 800106e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001072:	f7ff fba3 	bl	80007bc <__aeabi_ddiv>
 8001076:	4602      	mov	r2, r0
 8001078:	460b      	mov	r3, r1
 800107a:	4610      	mov	r0, r2
 800107c:	4619      	mov	r1, r3
 800107e:	f04f 0200 	mov.w	r2, #0
 8001082:	4b6a      	ldr	r3, [pc, #424]	; (800122c <main+0x244>)
 8001084:	f7ff f8ba 	bl	80001fc <__adddf3>
 8001088:	4602      	mov	r2, r0
 800108a:	460b      	mov	r3, r1
 800108c:	e9c7 2302 	strd	r2, r3, [r7, #8]

      if (temp > 36)
 8001090:	f04f 0200 	mov.w	r2, #0
 8001094:	4b66      	ldr	r3, [pc, #408]	; (8001230 <main+0x248>)
 8001096:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800109a:	f7ff fcf5 	bl	8000a88 <__aeabi_dcmpgt>
 800109e:	4603      	mov	r3, r0
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	d004      	beq.n	80010ae <main+0xc6>
        TIM2->CCR1 = 0;
 80010a4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80010a8:	2200      	movs	r2, #0
 80010aa:	635a      	str	r2, [r3, #52]	; 0x34
 80010ac:	e02b      	b.n	8001106 <main+0x11e>
      else if (temp > 41)
 80010ae:	f04f 0200 	mov.w	r2, #0
 80010b2:	4b60      	ldr	r3, [pc, #384]	; (8001234 <main+0x24c>)
 80010b4:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80010b8:	f7ff fce6 	bl	8000a88 <__aeabi_dcmpgt>
 80010bc:	4603      	mov	r3, r0
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d007      	beq.n	80010d2 <main+0xea>
        TIM2->CCR1 = TIM2->ARR - 1;
 80010c2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80010c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80010c8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80010cc:	3b01      	subs	r3, #1
 80010ce:	6353      	str	r3, [r2, #52]	; 0x34
 80010d0:	e019      	b.n	8001106 <main+0x11e>
      else
        TIM2->CCR1 = temp / 41 * 255;
 80010d2:	f04f 0200 	mov.w	r2, #0
 80010d6:	4b57      	ldr	r3, [pc, #348]	; (8001234 <main+0x24c>)
 80010d8:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80010dc:	f7ff fb6e 	bl	80007bc <__aeabi_ddiv>
 80010e0:	4602      	mov	r2, r0
 80010e2:	460b      	mov	r3, r1
 80010e4:	4610      	mov	r0, r2
 80010e6:	4619      	mov	r1, r3
 80010e8:	a347      	add	r3, pc, #284	; (adr r3, 8001208 <main+0x220>)
 80010ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010ee:	f7ff fa3b 	bl	8000568 <__aeabi_dmul>
 80010f2:	4602      	mov	r2, r0
 80010f4:	460b      	mov	r3, r1
 80010f6:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
 80010fa:	4610      	mov	r0, r2
 80010fc:	4619      	mov	r1, r3
 80010fe:	f7ff fcf5 	bl	8000aec <__aeabi_d2uiz>
 8001102:	4603      	mov	r3, r0
 8001104:	6363      	str	r3, [r4, #52]	; 0x34

      TIM4->CCR1 = (tan_table[sin_index] + 1) * 0.5 * TIM4->ARR;
 8001106:	4a4c      	ldr	r2, [pc, #304]	; (8001238 <main+0x250>)
 8001108:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800110a:	00db      	lsls	r3, r3, #3
 800110c:	4413      	add	r3, r2
 800110e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001112:	f04f 0200 	mov.w	r2, #0
 8001116:	4b49      	ldr	r3, [pc, #292]	; (800123c <main+0x254>)
 8001118:	f7ff f870 	bl	80001fc <__adddf3>
 800111c:	4602      	mov	r2, r0
 800111e:	460b      	mov	r3, r1
 8001120:	4610      	mov	r0, r2
 8001122:	4619      	mov	r1, r3
 8001124:	f04f 0200 	mov.w	r2, #0
 8001128:	4b45      	ldr	r3, [pc, #276]	; (8001240 <main+0x258>)
 800112a:	f7ff fa1d 	bl	8000568 <__aeabi_dmul>
 800112e:	4602      	mov	r2, r0
 8001130:	460b      	mov	r3, r1
 8001132:	4614      	mov	r4, r2
 8001134:	461d      	mov	r5, r3
 8001136:	4b43      	ldr	r3, [pc, #268]	; (8001244 <main+0x25c>)
 8001138:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800113a:	4618      	mov	r0, r3
 800113c:	f7ff f99a 	bl	8000474 <__aeabi_ui2d>
 8001140:	4602      	mov	r2, r0
 8001142:	460b      	mov	r3, r1
 8001144:	4620      	mov	r0, r4
 8001146:	4629      	mov	r1, r5
 8001148:	f7ff fa0e 	bl	8000568 <__aeabi_dmul>
 800114c:	4602      	mov	r2, r0
 800114e:	460b      	mov	r3, r1
 8001150:	4c3c      	ldr	r4, [pc, #240]	; (8001244 <main+0x25c>)
 8001152:	4610      	mov	r0, r2
 8001154:	4619      	mov	r1, r3
 8001156:	f7ff fcc9 	bl	8000aec <__aeabi_d2uiz>
 800115a:	4603      	mov	r3, r0
 800115c:	6363      	str	r3, [r4, #52]	; 0x34
      sin_index = (sin_index + 1) % TAN_TABLE_SIZE;
 800115e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001160:	3301      	adds	r3, #1
 8001162:	4a39      	ldr	r2, [pc, #228]	; (8001248 <main+0x260>)
 8001164:	fb82 1203 	smull	r1, r2, r2, r3
 8001168:	441a      	add	r2, r3
 800116a:	1211      	asrs	r1, r2, #8
 800116c:	17da      	asrs	r2, r3, #31
 800116e:	1a8a      	subs	r2, r1, r2
 8001170:	f44f 71b4 	mov.w	r1, #360	; 0x168
 8001174:	fb01 f202 	mul.w	r2, r1, r2
 8001178:	1a9b      	subs	r3, r3, r2
 800117a:	627b      	str	r3, [r7, #36]	; 0x24

      if (adcVoltage[1] > max_adc)
 800117c:	4b29      	ldr	r3, [pc, #164]	; (8001224 <main+0x23c>)
 800117e:	685b      	ldr	r3, [r3, #4]
 8001180:	4618      	mov	r0, r3
 8001182:	f7ff f999 	bl	80004b8 <__aeabi_f2d>
 8001186:	4602      	mov	r2, r0
 8001188:	460b      	mov	r3, r1
 800118a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800118e:	f7ff fc5d 	bl	8000a4c <__aeabi_dcmplt>
 8001192:	4603      	mov	r3, r0
 8001194:	2b00      	cmp	r3, #0
 8001196:	d008      	beq.n	80011aa <main+0x1c2>
        max_adc = adcVoltage[1];
 8001198:	4b22      	ldr	r3, [pc, #136]	; (8001224 <main+0x23c>)
 800119a:	685b      	ldr	r3, [r3, #4]
 800119c:	4618      	mov	r0, r3
 800119e:	f7ff f98b 	bl	80004b8 <__aeabi_f2d>
 80011a2:	4602      	mov	r2, r0
 80011a4:	460b      	mov	r3, r1
 80011a6:	e9c7 2306 	strd	r2, r3, [r7, #24]

      float coefficient = TIM4->ARR / 3;
 80011aa:	4b26      	ldr	r3, [pc, #152]	; (8001244 <main+0x25c>)
 80011ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80011ae:	4a27      	ldr	r2, [pc, #156]	; (800124c <main+0x264>)
 80011b0:	fba2 2303 	umull	r2, r3, r2, r3
 80011b4:	085b      	lsrs	r3, r3, #1
 80011b6:	ee07 3a90 	vmov	s15, r3
 80011ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80011be:	edc7 7a01 	vstr	s15, [r7, #4]
      t31 = (int) adcVoltage[1] * coefficient;
 80011c2:	4b18      	ldr	r3, [pc, #96]	; (8001224 <main+0x23c>)
 80011c4:	edd3 7a01 	vldr	s15, [r3, #4]
 80011c8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80011cc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80011d0:	edd7 7a01 	vldr	s15, [r7, #4]
 80011d4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80011d8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80011dc:	ee17 2a90 	vmov	r2, s15
 80011e0:	4b1b      	ldr	r3, [pc, #108]	; (8001250 <main+0x268>)
 80011e2:	601a      	str	r2, [r3, #0]
      TIM4->CCR4 = (int) t31;
 80011e4:	4b1a      	ldr	r3, [pc, #104]	; (8001250 <main+0x268>)
 80011e6:	681a      	ldr	r2, [r3, #0]
 80011e8:	4b16      	ldr	r3, [pc, #88]	; (8001244 <main+0x25c>)
 80011ea:	641a      	str	r2, [r3, #64]	; 0x40

      HAL_ADC_Start_IT(&hadc1);  // Перезапуск АЦП с прерываниями
 80011ec:	480a      	ldr	r0, [pc, #40]	; (8001218 <main+0x230>)
 80011ee:	f000 fcff 	bl	8001bf0 <HAL_ADC_Start_IT>
      HAL_ADC_Start_IT(&hadc2); // Запуск АЦП с прерываниями
 80011f2:	480a      	ldr	r0, [pc, #40]	; (800121c <main+0x234>)
 80011f4:	f000 fcfc 	bl	8001bf0 <HAL_ADC_Start_IT>
    }

    HAL_Delay(10);
 80011f8:	200a      	movs	r0, #10
 80011fa:	f000 fc91 	bl	8001b20 <HAL_Delay>
    if (adcConvCpltFlag)  // Проверить флаг завершения преобразования
 80011fe:	e722      	b.n	8001046 <main+0x5e>
 8001200:	40000000 	.word	0x40000000
 8001204:	3f647ae1 	.word	0x3f647ae1
 8001208:	00000000 	.word	0x00000000
 800120c:	406fe000 	.word	0x406fe000
 8001210:	200000bc 	.word	0x200000bc
 8001214:	20000104 	.word	0x20000104
 8001218:	2000002c 	.word	0x2000002c
 800121c:	20000074 	.word	0x20000074
 8001220:	2000014c 	.word	0x2000014c
 8001224:	20000158 	.word	0x20000158
 8001228:	3f428f5c 	.word	0x3f428f5c
 800122c:	40390000 	.word	0x40390000
 8001230:	40420000 	.word	0x40420000
 8001234:	40448000 	.word	0x40448000
 8001238:	20000160 	.word	0x20000160
 800123c:	3ff00000 	.word	0x3ff00000
 8001240:	3fe00000 	.word	0x3fe00000
 8001244:	40000800 	.word	0x40000800
 8001248:	b60b60b7 	.word	0xb60b60b7
 800124c:	aaaaaaab 	.word	0xaaaaaaab
 8001250:	20000000 	.word	0x20000000

08001254 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001254:	b580      	push	{r7, lr}
 8001256:	b094      	sub	sp, #80	; 0x50
 8001258:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800125a:	f107 0320 	add.w	r3, r7, #32
 800125e:	2230      	movs	r2, #48	; 0x30
 8001260:	2100      	movs	r1, #0
 8001262:	4618      	mov	r0, r3
 8001264:	f003 f836 	bl	80042d4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001268:	f107 030c 	add.w	r3, r7, #12
 800126c:	2200      	movs	r2, #0
 800126e:	601a      	str	r2, [r3, #0]
 8001270:	605a      	str	r2, [r3, #4]
 8001272:	609a      	str	r2, [r3, #8]
 8001274:	60da      	str	r2, [r3, #12]
 8001276:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001278:	2300      	movs	r3, #0
 800127a:	60bb      	str	r3, [r7, #8]
 800127c:	4b2c      	ldr	r3, [pc, #176]	; (8001330 <SystemClock_Config+0xdc>)
 800127e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001280:	4a2b      	ldr	r2, [pc, #172]	; (8001330 <SystemClock_Config+0xdc>)
 8001282:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001286:	6413      	str	r3, [r2, #64]	; 0x40
 8001288:	4b29      	ldr	r3, [pc, #164]	; (8001330 <SystemClock_Config+0xdc>)
 800128a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800128c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001290:	60bb      	str	r3, [r7, #8]
 8001292:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001294:	2300      	movs	r3, #0
 8001296:	607b      	str	r3, [r7, #4]
 8001298:	4b26      	ldr	r3, [pc, #152]	; (8001334 <SystemClock_Config+0xe0>)
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80012a0:	4a24      	ldr	r2, [pc, #144]	; (8001334 <SystemClock_Config+0xe0>)
 80012a2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80012a6:	6013      	str	r3, [r2, #0]
 80012a8:	4b22      	ldr	r3, [pc, #136]	; (8001334 <SystemClock_Config+0xe0>)
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80012b0:	607b      	str	r3, [r7, #4]
 80012b2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80012b4:	2302      	movs	r3, #2
 80012b6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80012b8:	2301      	movs	r3, #1
 80012ba:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80012bc:	2310      	movs	r3, #16
 80012be:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80012c0:	2302      	movs	r3, #2
 80012c2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80012c4:	2300      	movs	r3, #0
 80012c6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80012c8:	2308      	movs	r3, #8
 80012ca:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 90;
 80012cc:	235a      	movs	r3, #90	; 0x5a
 80012ce:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80012d0:	2302      	movs	r3, #2
 80012d2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80012d4:	2304      	movs	r3, #4
 80012d6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80012d8:	f107 0320 	add.w	r3, r7, #32
 80012dc:	4618      	mov	r0, r3
 80012de:	f001 fbdd 	bl	8002a9c <HAL_RCC_OscConfig>
 80012e2:	4603      	mov	r3, r0
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d001      	beq.n	80012ec <SystemClock_Config+0x98>
  {
    Error_Handler();
 80012e8:	f000 f9f6 	bl	80016d8 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80012ec:	f001 fb86 	bl	80029fc <HAL_PWREx_EnableOverDrive>
 80012f0:	4603      	mov	r3, r0
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d001      	beq.n	80012fa <SystemClock_Config+0xa6>
  {
    Error_Handler();
 80012f6:	f000 f9ef 	bl	80016d8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80012fa:	230f      	movs	r3, #15
 80012fc:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80012fe:	2302      	movs	r3, #2
 8001300:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001302:	2300      	movs	r3, #0
 8001304:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001306:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800130a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800130c:	2300      	movs	r3, #0
 800130e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001310:	f107 030c 	add.w	r3, r7, #12
 8001314:	2102      	movs	r1, #2
 8001316:	4618      	mov	r0, r3
 8001318:	f001 fe38 	bl	8002f8c <HAL_RCC_ClockConfig>
 800131c:	4603      	mov	r3, r0
 800131e:	2b00      	cmp	r3, #0
 8001320:	d001      	beq.n	8001326 <SystemClock_Config+0xd2>
  {
    Error_Handler();
 8001322:	f000 f9d9 	bl	80016d8 <Error_Handler>
  }
}
 8001326:	bf00      	nop
 8001328:	3750      	adds	r7, #80	; 0x50
 800132a:	46bd      	mov	sp, r7
 800132c:	bd80      	pop	{r7, pc}
 800132e:	bf00      	nop
 8001330:	40023800 	.word	0x40023800
 8001334:	40007000 	.word	0x40007000

08001338 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001338:	b580      	push	{r7, lr}
 800133a:	b084      	sub	sp, #16
 800133c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800133e:	463b      	mov	r3, r7
 8001340:	2200      	movs	r2, #0
 8001342:	601a      	str	r2, [r3, #0]
 8001344:	605a      	str	r2, [r3, #4]
 8001346:	609a      	str	r2, [r3, #8]
 8001348:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800134a:	4b21      	ldr	r3, [pc, #132]	; (80013d0 <MX_ADC1_Init+0x98>)
 800134c:	4a21      	ldr	r2, [pc, #132]	; (80013d4 <MX_ADC1_Init+0x9c>)
 800134e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001350:	4b1f      	ldr	r3, [pc, #124]	; (80013d0 <MX_ADC1_Init+0x98>)
 8001352:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001356:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001358:	4b1d      	ldr	r3, [pc, #116]	; (80013d0 <MX_ADC1_Init+0x98>)
 800135a:	2200      	movs	r2, #0
 800135c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 800135e:	4b1c      	ldr	r3, [pc, #112]	; (80013d0 <MX_ADC1_Init+0x98>)
 8001360:	2201      	movs	r2, #1
 8001362:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001364:	4b1a      	ldr	r3, [pc, #104]	; (80013d0 <MX_ADC1_Init+0x98>)
 8001366:	2200      	movs	r2, #0
 8001368:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800136a:	4b19      	ldr	r3, [pc, #100]	; (80013d0 <MX_ADC1_Init+0x98>)
 800136c:	2200      	movs	r2, #0
 800136e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001372:	4b17      	ldr	r3, [pc, #92]	; (80013d0 <MX_ADC1_Init+0x98>)
 8001374:	2200      	movs	r2, #0
 8001376:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001378:	4b15      	ldr	r3, [pc, #84]	; (80013d0 <MX_ADC1_Init+0x98>)
 800137a:	4a17      	ldr	r2, [pc, #92]	; (80013d8 <MX_ADC1_Init+0xa0>)
 800137c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800137e:	4b14      	ldr	r3, [pc, #80]	; (80013d0 <MX_ADC1_Init+0x98>)
 8001380:	2200      	movs	r2, #0
 8001382:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001384:	4b12      	ldr	r3, [pc, #72]	; (80013d0 <MX_ADC1_Init+0x98>)
 8001386:	2201      	movs	r2, #1
 8001388:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800138a:	4b11      	ldr	r3, [pc, #68]	; (80013d0 <MX_ADC1_Init+0x98>)
 800138c:	2200      	movs	r2, #0
 800138e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001392:	4b0f      	ldr	r3, [pc, #60]	; (80013d0 <MX_ADC1_Init+0x98>)
 8001394:	2201      	movs	r2, #1
 8001396:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001398:	480d      	ldr	r0, [pc, #52]	; (80013d0 <MX_ADC1_Init+0x98>)
 800139a:	f000 fbe5 	bl	8001b68 <HAL_ADC_Init>
 800139e:	4603      	mov	r3, r0
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d001      	beq.n	80013a8 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80013a4:	f000 f998 	bl	80016d8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 80013a8:	4b0c      	ldr	r3, [pc, #48]	; (80013dc <MX_ADC1_Init+0xa4>)
 80013aa:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80013ac:	2301      	movs	r3, #1
 80013ae:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
 80013b0:	2301      	movs	r3, #1
 80013b2:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80013b4:	463b      	mov	r3, r7
 80013b6:	4619      	mov	r1, r3
 80013b8:	4805      	ldr	r0, [pc, #20]	; (80013d0 <MX_ADC1_Init+0x98>)
 80013ba:	f000 fe29 	bl	8002010 <HAL_ADC_ConfigChannel>
 80013be:	4603      	mov	r3, r0
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d001      	beq.n	80013c8 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80013c4:	f000 f988 	bl	80016d8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80013c8:	bf00      	nop
 80013ca:	3710      	adds	r7, #16
 80013cc:	46bd      	mov	sp, r7
 80013ce:	bd80      	pop	{r7, pc}
 80013d0:	2000002c 	.word	0x2000002c
 80013d4:	40012000 	.word	0x40012000
 80013d8:	0f000001 	.word	0x0f000001
 80013dc:	10000012 	.word	0x10000012

080013e0 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 80013e0:	b580      	push	{r7, lr}
 80013e2:	b084      	sub	sp, #16
 80013e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80013e6:	463b      	mov	r3, r7
 80013e8:	2200      	movs	r2, #0
 80013ea:	601a      	str	r2, [r3, #0]
 80013ec:	605a      	str	r2, [r3, #4]
 80013ee:	609a      	str	r2, [r3, #8]
 80013f0:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC2_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 80013f2:	4b21      	ldr	r3, [pc, #132]	; (8001478 <MX_ADC2_Init+0x98>)
 80013f4:	4a21      	ldr	r2, [pc, #132]	; (800147c <MX_ADC2_Init+0x9c>)
 80013f6:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80013f8:	4b1f      	ldr	r3, [pc, #124]	; (8001478 <MX_ADC2_Init+0x98>)
 80013fa:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80013fe:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8001400:	4b1d      	ldr	r3, [pc, #116]	; (8001478 <MX_ADC2_Init+0x98>)
 8001402:	2200      	movs	r2, #0
 8001404:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = DISABLE;
 8001406:	4b1c      	ldr	r3, [pc, #112]	; (8001478 <MX_ADC2_Init+0x98>)
 8001408:	2200      	movs	r2, #0
 800140a:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 800140c:	4b1a      	ldr	r3, [pc, #104]	; (8001478 <MX_ADC2_Init+0x98>)
 800140e:	2200      	movs	r2, #0
 8001410:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8001412:	4b19      	ldr	r3, [pc, #100]	; (8001478 <MX_ADC2_Init+0x98>)
 8001414:	2200      	movs	r2, #0
 8001416:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800141a:	4b17      	ldr	r3, [pc, #92]	; (8001478 <MX_ADC2_Init+0x98>)
 800141c:	2200      	movs	r2, #0
 800141e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001420:	4b15      	ldr	r3, [pc, #84]	; (8001478 <MX_ADC2_Init+0x98>)
 8001422:	4a17      	ldr	r2, [pc, #92]	; (8001480 <MX_ADC2_Init+0xa0>)
 8001424:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001426:	4b14      	ldr	r3, [pc, #80]	; (8001478 <MX_ADC2_Init+0x98>)
 8001428:	2200      	movs	r2, #0
 800142a:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 800142c:	4b12      	ldr	r3, [pc, #72]	; (8001478 <MX_ADC2_Init+0x98>)
 800142e:	2201      	movs	r2, #1
 8001430:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8001432:	4b11      	ldr	r3, [pc, #68]	; (8001478 <MX_ADC2_Init+0x98>)
 8001434:	2200      	movs	r2, #0
 8001436:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800143a:	4b0f      	ldr	r3, [pc, #60]	; (8001478 <MX_ADC2_Init+0x98>)
 800143c:	2201      	movs	r2, #1
 800143e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8001440:	480d      	ldr	r0, [pc, #52]	; (8001478 <MX_ADC2_Init+0x98>)
 8001442:	f000 fb91 	bl	8001b68 <HAL_ADC_Init>
 8001446:	4603      	mov	r3, r0
 8001448:	2b00      	cmp	r3, #0
 800144a:	d001      	beq.n	8001450 <MX_ADC2_Init+0x70>
  {
    Error_Handler();
 800144c:	f000 f944 	bl	80016d8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8001450:	2304      	movs	r3, #4
 8001452:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001454:	2301      	movs	r3, #1
 8001456:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_144CYCLES;
 8001458:	2306      	movs	r3, #6
 800145a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800145c:	463b      	mov	r3, r7
 800145e:	4619      	mov	r1, r3
 8001460:	4805      	ldr	r0, [pc, #20]	; (8001478 <MX_ADC2_Init+0x98>)
 8001462:	f000 fdd5 	bl	8002010 <HAL_ADC_ConfigChannel>
 8001466:	4603      	mov	r3, r0
 8001468:	2b00      	cmp	r3, #0
 800146a:	d001      	beq.n	8001470 <MX_ADC2_Init+0x90>
  {
    Error_Handler();
 800146c:	f000 f934 	bl	80016d8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8001470:	bf00      	nop
 8001472:	3710      	adds	r7, #16
 8001474:	46bd      	mov	sp, r7
 8001476:	bd80      	pop	{r7, pc}
 8001478:	20000074 	.word	0x20000074
 800147c:	40012100 	.word	0x40012100
 8001480:	0f000001 	.word	0x0f000001

08001484 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001484:	b580      	push	{r7, lr}
 8001486:	b08e      	sub	sp, #56	; 0x38
 8001488:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800148a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800148e:	2200      	movs	r2, #0
 8001490:	601a      	str	r2, [r3, #0]
 8001492:	605a      	str	r2, [r3, #4]
 8001494:	609a      	str	r2, [r3, #8]
 8001496:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001498:	f107 0320 	add.w	r3, r7, #32
 800149c:	2200      	movs	r2, #0
 800149e:	601a      	str	r2, [r3, #0]
 80014a0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80014a2:	1d3b      	adds	r3, r7, #4
 80014a4:	2200      	movs	r2, #0
 80014a6:	601a      	str	r2, [r3, #0]
 80014a8:	605a      	str	r2, [r3, #4]
 80014aa:	609a      	str	r2, [r3, #8]
 80014ac:	60da      	str	r2, [r3, #12]
 80014ae:	611a      	str	r2, [r3, #16]
 80014b0:	615a      	str	r2, [r3, #20]
 80014b2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80014b4:	4b2c      	ldr	r3, [pc, #176]	; (8001568 <MX_TIM2_Init+0xe4>)
 80014b6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80014ba:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 49;
 80014bc:	4b2a      	ldr	r3, [pc, #168]	; (8001568 <MX_TIM2_Init+0xe4>)
 80014be:	2231      	movs	r2, #49	; 0x31
 80014c0:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014c2:	4b29      	ldr	r3, [pc, #164]	; (8001568 <MX_TIM2_Init+0xe4>)
 80014c4:	2200      	movs	r2, #0
 80014c6:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 255;
 80014c8:	4b27      	ldr	r3, [pc, #156]	; (8001568 <MX_TIM2_Init+0xe4>)
 80014ca:	22ff      	movs	r2, #255	; 0xff
 80014cc:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80014ce:	4b26      	ldr	r3, [pc, #152]	; (8001568 <MX_TIM2_Init+0xe4>)
 80014d0:	2200      	movs	r2, #0
 80014d2:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80014d4:	4b24      	ldr	r3, [pc, #144]	; (8001568 <MX_TIM2_Init+0xe4>)
 80014d6:	2280      	movs	r2, #128	; 0x80
 80014d8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80014da:	4823      	ldr	r0, [pc, #140]	; (8001568 <MX_TIM2_Init+0xe4>)
 80014dc:	f001 ff02 	bl	80032e4 <HAL_TIM_Base_Init>
 80014e0:	4603      	mov	r3, r0
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d001      	beq.n	80014ea <MX_TIM2_Init+0x66>
  {
    Error_Handler();
 80014e6:	f000 f8f7 	bl	80016d8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80014ea:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80014ee:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80014f0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80014f4:	4619      	mov	r1, r3
 80014f6:	481c      	ldr	r0, [pc, #112]	; (8001568 <MX_TIM2_Init+0xe4>)
 80014f8:	f002 fa2e 	bl	8003958 <HAL_TIM_ConfigClockSource>
 80014fc:	4603      	mov	r3, r0
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d001      	beq.n	8001506 <MX_TIM2_Init+0x82>
  {
    Error_Handler();
 8001502:	f000 f8e9 	bl	80016d8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001506:	4818      	ldr	r0, [pc, #96]	; (8001568 <MX_TIM2_Init+0xe4>)
 8001508:	f001 ff3b 	bl	8003382 <HAL_TIM_PWM_Init>
 800150c:	4603      	mov	r3, r0
 800150e:	2b00      	cmp	r3, #0
 8001510:	d001      	beq.n	8001516 <MX_TIM2_Init+0x92>
  {
    Error_Handler();
 8001512:	f000 f8e1 	bl	80016d8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001516:	2300      	movs	r3, #0
 8001518:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800151a:	2300      	movs	r3, #0
 800151c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800151e:	f107 0320 	add.w	r3, r7, #32
 8001522:	4619      	mov	r1, r3
 8001524:	4810      	ldr	r0, [pc, #64]	; (8001568 <MX_TIM2_Init+0xe4>)
 8001526:	f002 fe21 	bl	800416c <HAL_TIMEx_MasterConfigSynchronization>
 800152a:	4603      	mov	r3, r0
 800152c:	2b00      	cmp	r3, #0
 800152e:	d001      	beq.n	8001534 <MX_TIM2_Init+0xb0>
  {
    Error_Handler();
 8001530:	f000 f8d2 	bl	80016d8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001534:	2360      	movs	r3, #96	; 0x60
 8001536:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001538:	2300      	movs	r3, #0
 800153a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800153c:	2300      	movs	r3, #0
 800153e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001540:	2300      	movs	r3, #0
 8001542:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001544:	1d3b      	adds	r3, r7, #4
 8001546:	2200      	movs	r2, #0
 8001548:	4619      	mov	r1, r3
 800154a:	4807      	ldr	r0, [pc, #28]	; (8001568 <MX_TIM2_Init+0xe4>)
 800154c:	f002 f942 	bl	80037d4 <HAL_TIM_PWM_ConfigChannel>
 8001550:	4603      	mov	r3, r0
 8001552:	2b00      	cmp	r3, #0
 8001554:	d001      	beq.n	800155a <MX_TIM2_Init+0xd6>
  {
    Error_Handler();
 8001556:	f000 f8bf 	bl	80016d8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800155a:	4803      	ldr	r0, [pc, #12]	; (8001568 <MX_TIM2_Init+0xe4>)
 800155c:	f000 f990 	bl	8001880 <HAL_TIM_MspPostInit>

}
 8001560:	bf00      	nop
 8001562:	3738      	adds	r7, #56	; 0x38
 8001564:	46bd      	mov	sp, r7
 8001566:	bd80      	pop	{r7, pc}
 8001568:	200000bc 	.word	0x200000bc

0800156c <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 800156c:	b580      	push	{r7, lr}
 800156e:	b08e      	sub	sp, #56	; 0x38
 8001570:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001572:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001576:	2200      	movs	r2, #0
 8001578:	601a      	str	r2, [r3, #0]
 800157a:	605a      	str	r2, [r3, #4]
 800157c:	609a      	str	r2, [r3, #8]
 800157e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001580:	f107 0320 	add.w	r3, r7, #32
 8001584:	2200      	movs	r2, #0
 8001586:	601a      	str	r2, [r3, #0]
 8001588:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800158a:	1d3b      	adds	r3, r7, #4
 800158c:	2200      	movs	r2, #0
 800158e:	601a      	str	r2, [r3, #0]
 8001590:	605a      	str	r2, [r3, #4]
 8001592:	609a      	str	r2, [r3, #8]
 8001594:	60da      	str	r2, [r3, #12]
 8001596:	611a      	str	r2, [r3, #16]
 8001598:	615a      	str	r2, [r3, #20]
 800159a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800159c:	4b31      	ldr	r3, [pc, #196]	; (8001664 <MX_TIM4_Init+0xf8>)
 800159e:	4a32      	ldr	r2, [pc, #200]	; (8001668 <MX_TIM4_Init+0xfc>)
 80015a0:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 80015a2:	4b30      	ldr	r3, [pc, #192]	; (8001664 <MX_TIM4_Init+0xf8>)
 80015a4:	2200      	movs	r2, #0
 80015a6:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015a8:	4b2e      	ldr	r3, [pc, #184]	; (8001664 <MX_TIM4_Init+0xf8>)
 80015aa:	2200      	movs	r2, #0
 80015ac:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 63;
 80015ae:	4b2d      	ldr	r3, [pc, #180]	; (8001664 <MX_TIM4_Init+0xf8>)
 80015b0:	223f      	movs	r2, #63	; 0x3f
 80015b2:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80015b4:	4b2b      	ldr	r3, [pc, #172]	; (8001664 <MX_TIM4_Init+0xf8>)
 80015b6:	2200      	movs	r2, #0
 80015b8:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80015ba:	4b2a      	ldr	r3, [pc, #168]	; (8001664 <MX_TIM4_Init+0xf8>)
 80015bc:	2200      	movs	r2, #0
 80015be:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80015c0:	4828      	ldr	r0, [pc, #160]	; (8001664 <MX_TIM4_Init+0xf8>)
 80015c2:	f001 fe8f 	bl	80032e4 <HAL_TIM_Base_Init>
 80015c6:	4603      	mov	r3, r0
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d001      	beq.n	80015d0 <MX_TIM4_Init+0x64>
  {
    Error_Handler();
 80015cc:	f000 f884 	bl	80016d8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80015d0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80015d4:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80015d6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80015da:	4619      	mov	r1, r3
 80015dc:	4821      	ldr	r0, [pc, #132]	; (8001664 <MX_TIM4_Init+0xf8>)
 80015de:	f002 f9bb 	bl	8003958 <HAL_TIM_ConfigClockSource>
 80015e2:	4603      	mov	r3, r0
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d001      	beq.n	80015ec <MX_TIM4_Init+0x80>
  {
    Error_Handler();
 80015e8:	f000 f876 	bl	80016d8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 80015ec:	481d      	ldr	r0, [pc, #116]	; (8001664 <MX_TIM4_Init+0xf8>)
 80015ee:	f001 fec8 	bl	8003382 <HAL_TIM_PWM_Init>
 80015f2:	4603      	mov	r3, r0
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d001      	beq.n	80015fc <MX_TIM4_Init+0x90>
  {
    Error_Handler();
 80015f8:	f000 f86e 	bl	80016d8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80015fc:	2300      	movs	r3, #0
 80015fe:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001600:	2300      	movs	r3, #0
 8001602:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001604:	f107 0320 	add.w	r3, r7, #32
 8001608:	4619      	mov	r1, r3
 800160a:	4816      	ldr	r0, [pc, #88]	; (8001664 <MX_TIM4_Init+0xf8>)
 800160c:	f002 fdae 	bl	800416c <HAL_TIMEx_MasterConfigSynchronization>
 8001610:	4603      	mov	r3, r0
 8001612:	2b00      	cmp	r3, #0
 8001614:	d001      	beq.n	800161a <MX_TIM4_Init+0xae>
  {
    Error_Handler();
 8001616:	f000 f85f 	bl	80016d8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800161a:	2360      	movs	r3, #96	; 0x60
 800161c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800161e:	2300      	movs	r3, #0
 8001620:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001622:	2300      	movs	r3, #0
 8001624:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001626:	2300      	movs	r3, #0
 8001628:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800162a:	1d3b      	adds	r3, r7, #4
 800162c:	2200      	movs	r2, #0
 800162e:	4619      	mov	r1, r3
 8001630:	480c      	ldr	r0, [pc, #48]	; (8001664 <MX_TIM4_Init+0xf8>)
 8001632:	f002 f8cf 	bl	80037d4 <HAL_TIM_PWM_ConfigChannel>
 8001636:	4603      	mov	r3, r0
 8001638:	2b00      	cmp	r3, #0
 800163a:	d001      	beq.n	8001640 <MX_TIM4_Init+0xd4>
  {
    Error_Handler();
 800163c:	f000 f84c 	bl	80016d8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001640:	1d3b      	adds	r3, r7, #4
 8001642:	220c      	movs	r2, #12
 8001644:	4619      	mov	r1, r3
 8001646:	4807      	ldr	r0, [pc, #28]	; (8001664 <MX_TIM4_Init+0xf8>)
 8001648:	f002 f8c4 	bl	80037d4 <HAL_TIM_PWM_ConfigChannel>
 800164c:	4603      	mov	r3, r0
 800164e:	2b00      	cmp	r3, #0
 8001650:	d001      	beq.n	8001656 <MX_TIM4_Init+0xea>
  {
    Error_Handler();
 8001652:	f000 f841 	bl	80016d8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8001656:	4803      	ldr	r0, [pc, #12]	; (8001664 <MX_TIM4_Init+0xf8>)
 8001658:	f000 f912 	bl	8001880 <HAL_TIM_MspPostInit>

}
 800165c:	bf00      	nop
 800165e:	3738      	adds	r7, #56	; 0x38
 8001660:	46bd      	mov	sp, r7
 8001662:	bd80      	pop	{r7, pc}
 8001664:	20000104 	.word	0x20000104
 8001668:	40000800 	.word	0x40000800

0800166c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800166c:	b480      	push	{r7}
 800166e:	b085      	sub	sp, #20
 8001670:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001672:	2300      	movs	r3, #0
 8001674:	60fb      	str	r3, [r7, #12]
 8001676:	4b17      	ldr	r3, [pc, #92]	; (80016d4 <MX_GPIO_Init+0x68>)
 8001678:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800167a:	4a16      	ldr	r2, [pc, #88]	; (80016d4 <MX_GPIO_Init+0x68>)
 800167c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001680:	6313      	str	r3, [r2, #48]	; 0x30
 8001682:	4b14      	ldr	r3, [pc, #80]	; (80016d4 <MX_GPIO_Init+0x68>)
 8001684:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001686:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800168a:	60fb      	str	r3, [r7, #12]
 800168c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800168e:	2300      	movs	r3, #0
 8001690:	60bb      	str	r3, [r7, #8]
 8001692:	4b10      	ldr	r3, [pc, #64]	; (80016d4 <MX_GPIO_Init+0x68>)
 8001694:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001696:	4a0f      	ldr	r2, [pc, #60]	; (80016d4 <MX_GPIO_Init+0x68>)
 8001698:	f043 0301 	orr.w	r3, r3, #1
 800169c:	6313      	str	r3, [r2, #48]	; 0x30
 800169e:	4b0d      	ldr	r3, [pc, #52]	; (80016d4 <MX_GPIO_Init+0x68>)
 80016a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016a2:	f003 0301 	and.w	r3, r3, #1
 80016a6:	60bb      	str	r3, [r7, #8]
 80016a8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80016aa:	2300      	movs	r3, #0
 80016ac:	607b      	str	r3, [r7, #4]
 80016ae:	4b09      	ldr	r3, [pc, #36]	; (80016d4 <MX_GPIO_Init+0x68>)
 80016b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016b2:	4a08      	ldr	r2, [pc, #32]	; (80016d4 <MX_GPIO_Init+0x68>)
 80016b4:	f043 0308 	orr.w	r3, r3, #8
 80016b8:	6313      	str	r3, [r2, #48]	; 0x30
 80016ba:	4b06      	ldr	r3, [pc, #24]	; (80016d4 <MX_GPIO_Init+0x68>)
 80016bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016be:	f003 0308 	and.w	r3, r3, #8
 80016c2:	607b      	str	r3, [r7, #4]
 80016c4:	687b      	ldr	r3, [r7, #4]

}
 80016c6:	bf00      	nop
 80016c8:	3714      	adds	r7, #20
 80016ca:	46bd      	mov	sp, r7
 80016cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d0:	4770      	bx	lr
 80016d2:	bf00      	nop
 80016d4:	40023800 	.word	0x40023800

080016d8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80016d8:	b480      	push	{r7}
 80016da:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80016dc:	b672      	cpsid	i
}
 80016de:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80016e0:	e7fe      	b.n	80016e0 <Error_Handler+0x8>
	...

080016e4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80016e4:	b480      	push	{r7}
 80016e6:	b083      	sub	sp, #12
 80016e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80016ea:	2300      	movs	r3, #0
 80016ec:	607b      	str	r3, [r7, #4]
 80016ee:	4b10      	ldr	r3, [pc, #64]	; (8001730 <HAL_MspInit+0x4c>)
 80016f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016f2:	4a0f      	ldr	r2, [pc, #60]	; (8001730 <HAL_MspInit+0x4c>)
 80016f4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80016f8:	6453      	str	r3, [r2, #68]	; 0x44
 80016fa:	4b0d      	ldr	r3, [pc, #52]	; (8001730 <HAL_MspInit+0x4c>)
 80016fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016fe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001702:	607b      	str	r3, [r7, #4]
 8001704:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001706:	2300      	movs	r3, #0
 8001708:	603b      	str	r3, [r7, #0]
 800170a:	4b09      	ldr	r3, [pc, #36]	; (8001730 <HAL_MspInit+0x4c>)
 800170c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800170e:	4a08      	ldr	r2, [pc, #32]	; (8001730 <HAL_MspInit+0x4c>)
 8001710:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001714:	6413      	str	r3, [r2, #64]	; 0x40
 8001716:	4b06      	ldr	r3, [pc, #24]	; (8001730 <HAL_MspInit+0x4c>)
 8001718:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800171a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800171e:	603b      	str	r3, [r7, #0]
 8001720:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001722:	bf00      	nop
 8001724:	370c      	adds	r7, #12
 8001726:	46bd      	mov	sp, r7
 8001728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800172c:	4770      	bx	lr
 800172e:	bf00      	nop
 8001730:	40023800 	.word	0x40023800

08001734 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001734:	b580      	push	{r7, lr}
 8001736:	b08a      	sub	sp, #40	; 0x28
 8001738:	af00      	add	r7, sp, #0
 800173a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800173c:	f107 0314 	add.w	r3, r7, #20
 8001740:	2200      	movs	r2, #0
 8001742:	601a      	str	r2, [r3, #0]
 8001744:	605a      	str	r2, [r3, #4]
 8001746:	609a      	str	r2, [r3, #8]
 8001748:	60da      	str	r2, [r3, #12]
 800174a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	4a29      	ldr	r2, [pc, #164]	; (80017f8 <HAL_ADC_MspInit+0xc4>)
 8001752:	4293      	cmp	r3, r2
 8001754:	d116      	bne.n	8001784 <HAL_ADC_MspInit+0x50>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001756:	2300      	movs	r3, #0
 8001758:	613b      	str	r3, [r7, #16]
 800175a:	4b28      	ldr	r3, [pc, #160]	; (80017fc <HAL_ADC_MspInit+0xc8>)
 800175c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800175e:	4a27      	ldr	r2, [pc, #156]	; (80017fc <HAL_ADC_MspInit+0xc8>)
 8001760:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001764:	6453      	str	r3, [r2, #68]	; 0x44
 8001766:	4b25      	ldr	r3, [pc, #148]	; (80017fc <HAL_ADC_MspInit+0xc8>)
 8001768:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800176a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800176e:	613b      	str	r3, [r7, #16]
 8001770:	693b      	ldr	r3, [r7, #16]
    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8001772:	2200      	movs	r2, #0
 8001774:	2100      	movs	r1, #0
 8001776:	2012      	movs	r0, #18
 8001778:	f000 ff5d 	bl	8002636 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 800177c:	2012      	movs	r0, #18
 800177e:	f000 ff76 	bl	800266e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8001782:	e034      	b.n	80017ee <HAL_ADC_MspInit+0xba>
  else if(hadc->Instance==ADC2)
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	4a1d      	ldr	r2, [pc, #116]	; (8001800 <HAL_ADC_MspInit+0xcc>)
 800178a:	4293      	cmp	r3, r2
 800178c:	d12f      	bne.n	80017ee <HAL_ADC_MspInit+0xba>
    __HAL_RCC_ADC2_CLK_ENABLE();
 800178e:	2300      	movs	r3, #0
 8001790:	60fb      	str	r3, [r7, #12]
 8001792:	4b1a      	ldr	r3, [pc, #104]	; (80017fc <HAL_ADC_MspInit+0xc8>)
 8001794:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001796:	4a19      	ldr	r2, [pc, #100]	; (80017fc <HAL_ADC_MspInit+0xc8>)
 8001798:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800179c:	6453      	str	r3, [r2, #68]	; 0x44
 800179e:	4b17      	ldr	r3, [pc, #92]	; (80017fc <HAL_ADC_MspInit+0xc8>)
 80017a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017a2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80017a6:	60fb      	str	r3, [r7, #12]
 80017a8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017aa:	2300      	movs	r3, #0
 80017ac:	60bb      	str	r3, [r7, #8]
 80017ae:	4b13      	ldr	r3, [pc, #76]	; (80017fc <HAL_ADC_MspInit+0xc8>)
 80017b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017b2:	4a12      	ldr	r2, [pc, #72]	; (80017fc <HAL_ADC_MspInit+0xc8>)
 80017b4:	f043 0301 	orr.w	r3, r3, #1
 80017b8:	6313      	str	r3, [r2, #48]	; 0x30
 80017ba:	4b10      	ldr	r3, [pc, #64]	; (80017fc <HAL_ADC_MspInit+0xc8>)
 80017bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017be:	f003 0301 	and.w	r3, r3, #1
 80017c2:	60bb      	str	r3, [r7, #8]
 80017c4:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80017c6:	2310      	movs	r3, #16
 80017c8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80017ca:	2303      	movs	r3, #3
 80017cc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017ce:	2300      	movs	r3, #0
 80017d0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017d2:	f107 0314 	add.w	r3, r7, #20
 80017d6:	4619      	mov	r1, r3
 80017d8:	480a      	ldr	r0, [pc, #40]	; (8001804 <HAL_ADC_MspInit+0xd0>)
 80017da:	f000 ff63 	bl	80026a4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 80017de:	2200      	movs	r2, #0
 80017e0:	2100      	movs	r1, #0
 80017e2:	2012      	movs	r0, #18
 80017e4:	f000 ff27 	bl	8002636 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 80017e8:	2012      	movs	r0, #18
 80017ea:	f000 ff40 	bl	800266e <HAL_NVIC_EnableIRQ>
}
 80017ee:	bf00      	nop
 80017f0:	3728      	adds	r7, #40	; 0x28
 80017f2:	46bd      	mov	sp, r7
 80017f4:	bd80      	pop	{r7, pc}
 80017f6:	bf00      	nop
 80017f8:	40012000 	.word	0x40012000
 80017fc:	40023800 	.word	0x40023800
 8001800:	40012100 	.word	0x40012100
 8001804:	40020000 	.word	0x40020000

08001808 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001808:	b580      	push	{r7, lr}
 800180a:	b084      	sub	sp, #16
 800180c:	af00      	add	r7, sp, #0
 800180e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001818:	d10e      	bne.n	8001838 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800181a:	2300      	movs	r3, #0
 800181c:	60fb      	str	r3, [r7, #12]
 800181e:	4b16      	ldr	r3, [pc, #88]	; (8001878 <HAL_TIM_Base_MspInit+0x70>)
 8001820:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001822:	4a15      	ldr	r2, [pc, #84]	; (8001878 <HAL_TIM_Base_MspInit+0x70>)
 8001824:	f043 0301 	orr.w	r3, r3, #1
 8001828:	6413      	str	r3, [r2, #64]	; 0x40
 800182a:	4b13      	ldr	r3, [pc, #76]	; (8001878 <HAL_TIM_Base_MspInit+0x70>)
 800182c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800182e:	f003 0301 	and.w	r3, r3, #1
 8001832:	60fb      	str	r3, [r7, #12]
 8001834:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8001836:	e01a      	b.n	800186e <HAL_TIM_Base_MspInit+0x66>
  else if(htim_base->Instance==TIM4)
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	4a0f      	ldr	r2, [pc, #60]	; (800187c <HAL_TIM_Base_MspInit+0x74>)
 800183e:	4293      	cmp	r3, r2
 8001840:	d115      	bne.n	800186e <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001842:	2300      	movs	r3, #0
 8001844:	60bb      	str	r3, [r7, #8]
 8001846:	4b0c      	ldr	r3, [pc, #48]	; (8001878 <HAL_TIM_Base_MspInit+0x70>)
 8001848:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800184a:	4a0b      	ldr	r2, [pc, #44]	; (8001878 <HAL_TIM_Base_MspInit+0x70>)
 800184c:	f043 0304 	orr.w	r3, r3, #4
 8001850:	6413      	str	r3, [r2, #64]	; 0x40
 8001852:	4b09      	ldr	r3, [pc, #36]	; (8001878 <HAL_TIM_Base_MspInit+0x70>)
 8001854:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001856:	f003 0304 	and.w	r3, r3, #4
 800185a:	60bb      	str	r3, [r7, #8]
 800185c:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 800185e:	2200      	movs	r2, #0
 8001860:	2100      	movs	r1, #0
 8001862:	201e      	movs	r0, #30
 8001864:	f000 fee7 	bl	8002636 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8001868:	201e      	movs	r0, #30
 800186a:	f000 ff00 	bl	800266e <HAL_NVIC_EnableIRQ>
}
 800186e:	bf00      	nop
 8001870:	3710      	adds	r7, #16
 8001872:	46bd      	mov	sp, r7
 8001874:	bd80      	pop	{r7, pc}
 8001876:	bf00      	nop
 8001878:	40023800 	.word	0x40023800
 800187c:	40000800 	.word	0x40000800

08001880 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001880:	b580      	push	{r7, lr}
 8001882:	b08a      	sub	sp, #40	; 0x28
 8001884:	af00      	add	r7, sp, #0
 8001886:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001888:	f107 0314 	add.w	r3, r7, #20
 800188c:	2200      	movs	r2, #0
 800188e:	601a      	str	r2, [r3, #0]
 8001890:	605a      	str	r2, [r3, #4]
 8001892:	609a      	str	r2, [r3, #8]
 8001894:	60da      	str	r2, [r3, #12]
 8001896:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80018a0:	d11e      	bne.n	80018e0 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018a2:	2300      	movs	r3, #0
 80018a4:	613b      	str	r3, [r7, #16]
 80018a6:	4b22      	ldr	r3, [pc, #136]	; (8001930 <HAL_TIM_MspPostInit+0xb0>)
 80018a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018aa:	4a21      	ldr	r2, [pc, #132]	; (8001930 <HAL_TIM_MspPostInit+0xb0>)
 80018ac:	f043 0301 	orr.w	r3, r3, #1
 80018b0:	6313      	str	r3, [r2, #48]	; 0x30
 80018b2:	4b1f      	ldr	r3, [pc, #124]	; (8001930 <HAL_TIM_MspPostInit+0xb0>)
 80018b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018b6:	f003 0301 	and.w	r3, r3, #1
 80018ba:	613b      	str	r3, [r7, #16]
 80018bc:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA5     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 80018be:	2320      	movs	r3, #32
 80018c0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018c2:	2302      	movs	r3, #2
 80018c4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018c6:	2300      	movs	r3, #0
 80018c8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018ca:	2300      	movs	r3, #0
 80018cc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80018ce:	2301      	movs	r3, #1
 80018d0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018d2:	f107 0314 	add.w	r3, r7, #20
 80018d6:	4619      	mov	r1, r3
 80018d8:	4816      	ldr	r0, [pc, #88]	; (8001934 <HAL_TIM_MspPostInit+0xb4>)
 80018da:	f000 fee3 	bl	80026a4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 80018de:	e023      	b.n	8001928 <HAL_TIM_MspPostInit+0xa8>
  else if(htim->Instance==TIM4)
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	4a14      	ldr	r2, [pc, #80]	; (8001938 <HAL_TIM_MspPostInit+0xb8>)
 80018e6:	4293      	cmp	r3, r2
 80018e8:	d11e      	bne.n	8001928 <HAL_TIM_MspPostInit+0xa8>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80018ea:	2300      	movs	r3, #0
 80018ec:	60fb      	str	r3, [r7, #12]
 80018ee:	4b10      	ldr	r3, [pc, #64]	; (8001930 <HAL_TIM_MspPostInit+0xb0>)
 80018f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018f2:	4a0f      	ldr	r2, [pc, #60]	; (8001930 <HAL_TIM_MspPostInit+0xb0>)
 80018f4:	f043 0308 	orr.w	r3, r3, #8
 80018f8:	6313      	str	r3, [r2, #48]	; 0x30
 80018fa:	4b0d      	ldr	r3, [pc, #52]	; (8001930 <HAL_TIM_MspPostInit+0xb0>)
 80018fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018fe:	f003 0308 	and.w	r3, r3, #8
 8001902:	60fb      	str	r3, [r7, #12]
 8001904:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_15;
 8001906:	f44f 4310 	mov.w	r3, #36864	; 0x9000
 800190a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800190c:	2302      	movs	r3, #2
 800190e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001910:	2300      	movs	r3, #0
 8001912:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001914:	2300      	movs	r3, #0
 8001916:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001918:	2302      	movs	r3, #2
 800191a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800191c:	f107 0314 	add.w	r3, r7, #20
 8001920:	4619      	mov	r1, r3
 8001922:	4806      	ldr	r0, [pc, #24]	; (800193c <HAL_TIM_MspPostInit+0xbc>)
 8001924:	f000 febe 	bl	80026a4 <HAL_GPIO_Init>
}
 8001928:	bf00      	nop
 800192a:	3728      	adds	r7, #40	; 0x28
 800192c:	46bd      	mov	sp, r7
 800192e:	bd80      	pop	{r7, pc}
 8001930:	40023800 	.word	0x40023800
 8001934:	40020000 	.word	0x40020000
 8001938:	40000800 	.word	0x40000800
 800193c:	40020c00 	.word	0x40020c00

08001940 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001940:	b480      	push	{r7}
 8001942:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001944:	e7fe      	b.n	8001944 <NMI_Handler+0x4>

08001946 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001946:	b480      	push	{r7}
 8001948:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800194a:	e7fe      	b.n	800194a <HardFault_Handler+0x4>

0800194c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800194c:	b480      	push	{r7}
 800194e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001950:	e7fe      	b.n	8001950 <MemManage_Handler+0x4>

08001952 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001952:	b480      	push	{r7}
 8001954:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001956:	e7fe      	b.n	8001956 <BusFault_Handler+0x4>

08001958 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001958:	b480      	push	{r7}
 800195a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800195c:	e7fe      	b.n	800195c <UsageFault_Handler+0x4>

0800195e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800195e:	b480      	push	{r7}
 8001960:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001962:	bf00      	nop
 8001964:	46bd      	mov	sp, r7
 8001966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800196a:	4770      	bx	lr

0800196c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800196c:	b480      	push	{r7}
 800196e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001970:	bf00      	nop
 8001972:	46bd      	mov	sp, r7
 8001974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001978:	4770      	bx	lr

0800197a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800197a:	b480      	push	{r7}
 800197c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800197e:	bf00      	nop
 8001980:	46bd      	mov	sp, r7
 8001982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001986:	4770      	bx	lr

08001988 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001988:	b580      	push	{r7, lr}
 800198a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800198c:	f000 f8a8 	bl	8001ae0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001990:	bf00      	nop
 8001992:	bd80      	pop	{r7, pc}

08001994 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 global interrupts.
  */
void ADC_IRQHandler(void)
{
 8001994:	b580      	push	{r7, lr}
 8001996:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001998:	4803      	ldr	r0, [pc, #12]	; (80019a8 <ADC_IRQHandler+0x14>)
 800199a:	f000 fa07 	bl	8001dac <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc2);
 800199e:	4803      	ldr	r0, [pc, #12]	; (80019ac <ADC_IRQHandler+0x18>)
 80019a0:	f000 fa04 	bl	8001dac <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 80019a4:	bf00      	nop
 80019a6:	bd80      	pop	{r7, pc}
 80019a8:	2000002c 	.word	0x2000002c
 80019ac:	20000074 	.word	0x20000074

080019b0 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80019b0:	b580      	push	{r7, lr}
 80019b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80019b4:	4802      	ldr	r0, [pc, #8]	; (80019c0 <TIM4_IRQHandler+0x10>)
 80019b6:	f001 fe05 	bl	80035c4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80019ba:	bf00      	nop
 80019bc:	bd80      	pop	{r7, pc}
 80019be:	bf00      	nop
 80019c0:	20000104 	.word	0x20000104

080019c4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80019c4:	b480      	push	{r7}
 80019c6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80019c8:	4b06      	ldr	r3, [pc, #24]	; (80019e4 <SystemInit+0x20>)
 80019ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80019ce:	4a05      	ldr	r2, [pc, #20]	; (80019e4 <SystemInit+0x20>)
 80019d0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80019d4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80019d8:	bf00      	nop
 80019da:	46bd      	mov	sp, r7
 80019dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e0:	4770      	bx	lr
 80019e2:	bf00      	nop
 80019e4:	e000ed00 	.word	0xe000ed00

080019e8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 80019e8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001a20 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80019ec:	480d      	ldr	r0, [pc, #52]	; (8001a24 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80019ee:	490e      	ldr	r1, [pc, #56]	; (8001a28 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80019f0:	4a0e      	ldr	r2, [pc, #56]	; (8001a2c <LoopFillZerobss+0x1e>)
  movs r3, #0
 80019f2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80019f4:	e002      	b.n	80019fc <LoopCopyDataInit>

080019f6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80019f6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80019f8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80019fa:	3304      	adds	r3, #4

080019fc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80019fc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80019fe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001a00:	d3f9      	bcc.n	80019f6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001a02:	4a0b      	ldr	r2, [pc, #44]	; (8001a30 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001a04:	4c0b      	ldr	r4, [pc, #44]	; (8001a34 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001a06:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001a08:	e001      	b.n	8001a0e <LoopFillZerobss>

08001a0a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001a0a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001a0c:	3204      	adds	r2, #4

08001a0e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001a0e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001a10:	d3fb      	bcc.n	8001a0a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001a12:	f7ff ffd7 	bl	80019c4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001a16:	f002 fc39 	bl	800428c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001a1a:	f7ff fae5 	bl	8000fe8 <main>
  bx  lr    
 8001a1e:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8001a20:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8001a24:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001a28:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8001a2c:	08005650 	.word	0x08005650
  ldr r2, =_sbss
 8001a30:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8001a34:	20000ca4 	.word	0x20000ca4

08001a38 <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001a38:	e7fe      	b.n	8001a38 <CAN1_RX0_IRQHandler>
	...

08001a3c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001a3c:	b580      	push	{r7, lr}
 8001a3e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001a40:	4b0e      	ldr	r3, [pc, #56]	; (8001a7c <HAL_Init+0x40>)
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	4a0d      	ldr	r2, [pc, #52]	; (8001a7c <HAL_Init+0x40>)
 8001a46:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001a4a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001a4c:	4b0b      	ldr	r3, [pc, #44]	; (8001a7c <HAL_Init+0x40>)
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	4a0a      	ldr	r2, [pc, #40]	; (8001a7c <HAL_Init+0x40>)
 8001a52:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001a56:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001a58:	4b08      	ldr	r3, [pc, #32]	; (8001a7c <HAL_Init+0x40>)
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	4a07      	ldr	r2, [pc, #28]	; (8001a7c <HAL_Init+0x40>)
 8001a5e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a62:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001a64:	2003      	movs	r0, #3
 8001a66:	f000 fddb 	bl	8002620 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001a6a:	200f      	movs	r0, #15
 8001a6c:	f000 f808 	bl	8001a80 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001a70:	f7ff fe38 	bl	80016e4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001a74:	2300      	movs	r3, #0
}
 8001a76:	4618      	mov	r0, r3
 8001a78:	bd80      	pop	{r7, pc}
 8001a7a:	bf00      	nop
 8001a7c:	40023c00 	.word	0x40023c00

08001a80 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001a80:	b580      	push	{r7, lr}
 8001a82:	b082      	sub	sp, #8
 8001a84:	af00      	add	r7, sp, #0
 8001a86:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001a88:	4b12      	ldr	r3, [pc, #72]	; (8001ad4 <HAL_InitTick+0x54>)
 8001a8a:	681a      	ldr	r2, [r3, #0]
 8001a8c:	4b12      	ldr	r3, [pc, #72]	; (8001ad8 <HAL_InitTick+0x58>)
 8001a8e:	781b      	ldrb	r3, [r3, #0]
 8001a90:	4619      	mov	r1, r3
 8001a92:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001a96:	fbb3 f3f1 	udiv	r3, r3, r1
 8001a9a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a9e:	4618      	mov	r0, r3
 8001aa0:	f000 fdf3 	bl	800268a <HAL_SYSTICK_Config>
 8001aa4:	4603      	mov	r3, r0
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d001      	beq.n	8001aae <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001aaa:	2301      	movs	r3, #1
 8001aac:	e00e      	b.n	8001acc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	2b0f      	cmp	r3, #15
 8001ab2:	d80a      	bhi.n	8001aca <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001ab4:	2200      	movs	r2, #0
 8001ab6:	6879      	ldr	r1, [r7, #4]
 8001ab8:	f04f 30ff 	mov.w	r0, #4294967295
 8001abc:	f000 fdbb 	bl	8002636 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001ac0:	4a06      	ldr	r2, [pc, #24]	; (8001adc <HAL_InitTick+0x5c>)
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001ac6:	2300      	movs	r3, #0
 8001ac8:	e000      	b.n	8001acc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001aca:	2301      	movs	r3, #1
}
 8001acc:	4618      	mov	r0, r3
 8001ace:	3708      	adds	r7, #8
 8001ad0:	46bd      	mov	sp, r7
 8001ad2:	bd80      	pop	{r7, pc}
 8001ad4:	20000004 	.word	0x20000004
 8001ad8:	2000000c 	.word	0x2000000c
 8001adc:	20000008 	.word	0x20000008

08001ae0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001ae0:	b480      	push	{r7}
 8001ae2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001ae4:	4b06      	ldr	r3, [pc, #24]	; (8001b00 <HAL_IncTick+0x20>)
 8001ae6:	781b      	ldrb	r3, [r3, #0]
 8001ae8:	461a      	mov	r2, r3
 8001aea:	4b06      	ldr	r3, [pc, #24]	; (8001b04 <HAL_IncTick+0x24>)
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	4413      	add	r3, r2
 8001af0:	4a04      	ldr	r2, [pc, #16]	; (8001b04 <HAL_IncTick+0x24>)
 8001af2:	6013      	str	r3, [r2, #0]
}
 8001af4:	bf00      	nop
 8001af6:	46bd      	mov	sp, r7
 8001af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001afc:	4770      	bx	lr
 8001afe:	bf00      	nop
 8001b00:	2000000c 	.word	0x2000000c
 8001b04:	20000ca0 	.word	0x20000ca0

08001b08 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001b08:	b480      	push	{r7}
 8001b0a:	af00      	add	r7, sp, #0
  return uwTick;
 8001b0c:	4b03      	ldr	r3, [pc, #12]	; (8001b1c <HAL_GetTick+0x14>)
 8001b0e:	681b      	ldr	r3, [r3, #0]
}
 8001b10:	4618      	mov	r0, r3
 8001b12:	46bd      	mov	sp, r7
 8001b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b18:	4770      	bx	lr
 8001b1a:	bf00      	nop
 8001b1c:	20000ca0 	.word	0x20000ca0

08001b20 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001b20:	b580      	push	{r7, lr}
 8001b22:	b084      	sub	sp, #16
 8001b24:	af00      	add	r7, sp, #0
 8001b26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001b28:	f7ff ffee 	bl	8001b08 <HAL_GetTick>
 8001b2c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001b32:	68fb      	ldr	r3, [r7, #12]
 8001b34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b38:	d005      	beq.n	8001b46 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001b3a:	4b0a      	ldr	r3, [pc, #40]	; (8001b64 <HAL_Delay+0x44>)
 8001b3c:	781b      	ldrb	r3, [r3, #0]
 8001b3e:	461a      	mov	r2, r3
 8001b40:	68fb      	ldr	r3, [r7, #12]
 8001b42:	4413      	add	r3, r2
 8001b44:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001b46:	bf00      	nop
 8001b48:	f7ff ffde 	bl	8001b08 <HAL_GetTick>
 8001b4c:	4602      	mov	r2, r0
 8001b4e:	68bb      	ldr	r3, [r7, #8]
 8001b50:	1ad3      	subs	r3, r2, r3
 8001b52:	68fa      	ldr	r2, [r7, #12]
 8001b54:	429a      	cmp	r2, r3
 8001b56:	d8f7      	bhi.n	8001b48 <HAL_Delay+0x28>
  {
  }
}
 8001b58:	bf00      	nop
 8001b5a:	bf00      	nop
 8001b5c:	3710      	adds	r7, #16
 8001b5e:	46bd      	mov	sp, r7
 8001b60:	bd80      	pop	{r7, pc}
 8001b62:	bf00      	nop
 8001b64:	2000000c 	.word	0x2000000c

08001b68 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001b68:	b580      	push	{r7, lr}
 8001b6a:	b084      	sub	sp, #16
 8001b6c:	af00      	add	r7, sp, #0
 8001b6e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001b70:	2300      	movs	r3, #0
 8001b72:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d101      	bne.n	8001b7e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001b7a:	2301      	movs	r3, #1
 8001b7c:	e033      	b.n	8001be6 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d109      	bne.n	8001b9a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001b86:	6878      	ldr	r0, [r7, #4]
 8001b88:	f7ff fdd4 	bl	8001734 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	2200      	movs	r2, #0
 8001b90:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	2200      	movs	r2, #0
 8001b96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b9e:	f003 0310 	and.w	r3, r3, #16
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d118      	bne.n	8001bd8 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001baa:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001bae:	f023 0302 	bic.w	r3, r3, #2
 8001bb2:	f043 0202 	orr.w	r2, r3, #2
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001bba:	6878      	ldr	r0, [r7, #4]
 8001bbc:	f000 fb5a 	bl	8002274 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	2200      	movs	r2, #0
 8001bc4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bca:	f023 0303 	bic.w	r3, r3, #3
 8001bce:	f043 0201 	orr.w	r2, r3, #1
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	641a      	str	r2, [r3, #64]	; 0x40
 8001bd6:	e001      	b.n	8001bdc <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001bd8:	2301      	movs	r3, #1
 8001bda:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	2200      	movs	r2, #0
 8001be0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001be4:	7bfb      	ldrb	r3, [r7, #15]
}
 8001be6:	4618      	mov	r0, r3
 8001be8:	3710      	adds	r7, #16
 8001bea:	46bd      	mov	sp, r7
 8001bec:	bd80      	pop	{r7, pc}
	...

08001bf0 <HAL_ADC_Start_IT>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef* hadc)
{
 8001bf0:	b480      	push	{r7}
 8001bf2:	b085      	sub	sp, #20
 8001bf4:	af00      	add	r7, sp, #0
 8001bf6:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8001bf8:	2300      	movs	r3, #0
 8001bfa:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001c02:	2b01      	cmp	r3, #1
 8001c04:	d101      	bne.n	8001c0a <HAL_ADC_Start_IT+0x1a>
 8001c06:	2302      	movs	r3, #2
 8001c08:	e0bd      	b.n	8001d86 <HAL_ADC_Start_IT+0x196>
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	2201      	movs	r2, #1
 8001c0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	689b      	ldr	r3, [r3, #8]
 8001c18:	f003 0301 	and.w	r3, r3, #1
 8001c1c:	2b01      	cmp	r3, #1
 8001c1e:	d018      	beq.n	8001c52 <HAL_ADC_Start_IT+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	689a      	ldr	r2, [r3, #8]
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	f042 0201 	orr.w	r2, r2, #1
 8001c2e:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001c30:	4b58      	ldr	r3, [pc, #352]	; (8001d94 <HAL_ADC_Start_IT+0x1a4>)
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	4a58      	ldr	r2, [pc, #352]	; (8001d98 <HAL_ADC_Start_IT+0x1a8>)
 8001c36:	fba2 2303 	umull	r2, r3, r2, r3
 8001c3a:	0c9a      	lsrs	r2, r3, #18
 8001c3c:	4613      	mov	r3, r2
 8001c3e:	005b      	lsls	r3, r3, #1
 8001c40:	4413      	add	r3, r2
 8001c42:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001c44:	e002      	b.n	8001c4c <HAL_ADC_Start_IT+0x5c>
    {
      counter--;
 8001c46:	68bb      	ldr	r3, [r7, #8]
 8001c48:	3b01      	subs	r3, #1
 8001c4a:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001c4c:	68bb      	ldr	r3, [r7, #8]
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d1f9      	bne.n	8001c46 <HAL_ADC_Start_IT+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	689b      	ldr	r3, [r3, #8]
 8001c58:	f003 0301 	and.w	r3, r3, #1
 8001c5c:	2b01      	cmp	r3, #1
 8001c5e:	f040 8085 	bne.w	8001d6c <HAL_ADC_Start_IT+0x17c>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c66:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001c6a:	f023 0301 	bic.w	r3, r3, #1
 8001c6e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	685b      	ldr	r3, [r3, #4]
 8001c7c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d007      	beq.n	8001c94 <HAL_ADC_Start_IT+0xa4>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c88:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001c8c:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c98:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001c9c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001ca0:	d106      	bne.n	8001cb0 <HAL_ADC_Start_IT+0xc0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ca6:	f023 0206 	bic.w	r2, r3, #6
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	645a      	str	r2, [r3, #68]	; 0x44
 8001cae:	e002      	b.n	8001cb6 <HAL_ADC_Start_IT+0xc6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	2200      	movs	r2, #0
 8001cb4:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	2200      	movs	r2, #0
 8001cba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001cbe:	4b37      	ldr	r3, [pc, #220]	; (8001d9c <HAL_ADC_Start_IT+0x1ac>)
 8001cc0:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8001cca:	601a      	str	r2, [r3, #0]
    
    /* Enable end of conversion interrupt for regular group */
    __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_OVR));
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	685b      	ldr	r3, [r3, #4]
 8001cd2:	687a      	ldr	r2, [r7, #4]
 8001cd4:	6812      	ldr	r2, [r2, #0]
 8001cd6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001cda:	f043 0320 	orr.w	r3, r3, #32
 8001cde:	6053      	str	r3, [r2, #4]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	685b      	ldr	r3, [r3, #4]
 8001ce4:	f003 031f 	and.w	r3, r3, #31
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d12a      	bne.n	8001d42 <HAL_ADC_Start_IT+0x152>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	4a2b      	ldr	r2, [pc, #172]	; (8001da0 <HAL_ADC_Start_IT+0x1b0>)
 8001cf2:	4293      	cmp	r3, r2
 8001cf4:	d015      	beq.n	8001d22 <HAL_ADC_Start_IT+0x132>
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	4a2a      	ldr	r2, [pc, #168]	; (8001da4 <HAL_ADC_Start_IT+0x1b4>)
 8001cfc:	4293      	cmp	r3, r2
 8001cfe:	d105      	bne.n	8001d0c <HAL_ADC_Start_IT+0x11c>
 8001d00:	4b26      	ldr	r3, [pc, #152]	; (8001d9c <HAL_ADC_Start_IT+0x1ac>)
 8001d02:	685b      	ldr	r3, [r3, #4]
 8001d04:	f003 031f 	and.w	r3, r3, #31
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d00a      	beq.n	8001d22 <HAL_ADC_Start_IT+0x132>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	4a25      	ldr	r2, [pc, #148]	; (8001da8 <HAL_ADC_Start_IT+0x1b8>)
 8001d12:	4293      	cmp	r3, r2
 8001d14:	d136      	bne.n	8001d84 <HAL_ADC_Start_IT+0x194>
 8001d16:	4b21      	ldr	r3, [pc, #132]	; (8001d9c <HAL_ADC_Start_IT+0x1ac>)
 8001d18:	685b      	ldr	r3, [r3, #4]
 8001d1a:	f003 0310 	and.w	r3, r3, #16
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d130      	bne.n	8001d84 <HAL_ADC_Start_IT+0x194>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	689b      	ldr	r3, [r3, #8]
 8001d28:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d129      	bne.n	8001d84 <HAL_ADC_Start_IT+0x194>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	689a      	ldr	r2, [r3, #8]
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001d3e:	609a      	str	r2, [r3, #8]
 8001d40:	e020      	b.n	8001d84 <HAL_ADC_Start_IT+0x194>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	4a16      	ldr	r2, [pc, #88]	; (8001da0 <HAL_ADC_Start_IT+0x1b0>)
 8001d48:	4293      	cmp	r3, r2
 8001d4a:	d11b      	bne.n	8001d84 <HAL_ADC_Start_IT+0x194>
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	689b      	ldr	r3, [r3, #8]
 8001d52:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d114      	bne.n	8001d84 <HAL_ADC_Start_IT+0x194>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	689a      	ldr	r2, [r3, #8]
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001d68:	609a      	str	r2, [r3, #8]
 8001d6a:	e00b      	b.n	8001d84 <HAL_ADC_Start_IT+0x194>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d70:	f043 0210 	orr.w	r2, r3, #16
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d7c:	f043 0201 	orr.w	r2, r3, #1
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8001d84:	2300      	movs	r3, #0
}
 8001d86:	4618      	mov	r0, r3
 8001d88:	3714      	adds	r7, #20
 8001d8a:	46bd      	mov	sp, r7
 8001d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d90:	4770      	bx	lr
 8001d92:	bf00      	nop
 8001d94:	20000004 	.word	0x20000004
 8001d98:	431bde83 	.word	0x431bde83
 8001d9c:	40012300 	.word	0x40012300
 8001da0:	40012000 	.word	0x40012000
 8001da4:	40012100 	.word	0x40012100
 8001da8:	40012200 	.word	0x40012200

08001dac <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8001dac:	b580      	push	{r7, lr}
 8001dae:	b086      	sub	sp, #24
 8001db0:	af00      	add	r7, sp, #0
 8001db2:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8001db4:	2300      	movs	r3, #0
 8001db6:	617b      	str	r3, [r7, #20]
 8001db8:	2300      	movs	r3, #0
 8001dba:	613b      	str	r3, [r7, #16]
  
  uint32_t tmp_sr = hadc->Instance->SR;
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	685b      	ldr	r3, [r3, #4]
 8001dca:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = tmp_sr & ADC_FLAG_EOC;
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	f003 0302 	and.w	r3, r3, #2
 8001dd2:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 8001dd4:	68bb      	ldr	r3, [r7, #8]
 8001dd6:	f003 0320 	and.w	r3, r3, #32
 8001dda:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 8001ddc:	697b      	ldr	r3, [r7, #20]
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d049      	beq.n	8001e76 <HAL_ADC_IRQHandler+0xca>
 8001de2:	693b      	ldr	r3, [r7, #16]
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d046      	beq.n	8001e76 <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dec:	f003 0310 	and.w	r3, r3, #16
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d105      	bne.n	8001e00 <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001df8:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	689b      	ldr	r3, [r3, #8]
 8001e06:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d12b      	bne.n	8001e66 <HAL_ADC_IRQHandler+0xba>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d127      	bne.n	8001e66 <HAL_ADC_IRQHandler+0xba>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e1c:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d006      	beq.n	8001e32 <HAL_ADC_IRQHandler+0x86>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	689b      	ldr	r3, [r3, #8]
 8001e2a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d119      	bne.n	8001e66 <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	685a      	ldr	r2, [r3, #4]
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	f022 0220 	bic.w	r2, r2, #32
 8001e40:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e46:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e52:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d105      	bne.n	8001e66 <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e5e:	f043 0201 	orr.w	r2, r3, #1
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001e66:	6878      	ldr	r0, [r7, #4]
 8001e68:	f7fe ffe2 	bl	8000e30 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	f06f 0212 	mvn.w	r2, #18
 8001e74:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 8001e76:	68fb      	ldr	r3, [r7, #12]
 8001e78:	f003 0304 	and.w	r3, r3, #4
 8001e7c:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 8001e7e:	68bb      	ldr	r3, [r7, #8]
 8001e80:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e84:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 8001e86:	697b      	ldr	r3, [r7, #20]
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d057      	beq.n	8001f3c <HAL_ADC_IRQHandler+0x190>
 8001e8c:	693b      	ldr	r3, [r7, #16]
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d054      	beq.n	8001f3c <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e96:	f003 0310 	and.w	r3, r3, #16
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d105      	bne.n	8001eaa <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ea2:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	689b      	ldr	r3, [r3, #8]
 8001eb0:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d139      	bne.n	8001f2c <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ebe:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d006      	beq.n	8001ed4 <HAL_ADC_IRQHandler+0x128>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	689b      	ldr	r3, [r3, #8]
 8001ecc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d12b      	bne.n	8001f2c <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	685b      	ldr	r3, [r3, #4]
 8001eda:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d124      	bne.n	8001f2c <HAL_ADC_IRQHandler+0x180>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	689b      	ldr	r3, [r3, #8]
 8001ee8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d11d      	bne.n	8001f2c <HAL_ADC_IRQHandler+0x180>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	7e1b      	ldrb	r3, [r3, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d119      	bne.n	8001f2c <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	685a      	ldr	r2, [r3, #4]
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001f06:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f0c:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f18:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d105      	bne.n	8001f2c <HAL_ADC_IRQHandler+0x180>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f24:	f043 0201 	orr.w	r2, r3, #1
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	641a      	str	r2, [r3, #64]	; 0x40
    /* Conversion complete callback */ 
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8001f2c:	6878      	ldr	r0, [r7, #4]
 8001f2e:	f000 fa9d 	bl	800246c <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	f06f 020c 	mvn.w	r2, #12
 8001f3a:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_AWD;
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	f003 0301 	and.w	r3, r3, #1
 8001f42:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 8001f44:	68bb      	ldr	r3, [r7, #8]
 8001f46:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f4a:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 8001f4c:	697b      	ldr	r3, [r7, #20]
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d017      	beq.n	8001f82 <HAL_ADC_IRQHandler+0x1d6>
 8001f52:	693b      	ldr	r3, [r7, #16]
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d014      	beq.n	8001f82 <HAL_ADC_IRQHandler+0x1d6>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	f003 0301 	and.w	r3, r3, #1
 8001f62:	2b01      	cmp	r3, #1
 8001f64:	d10d      	bne.n	8001f82 <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f6a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8001f72:	6878      	ldr	r0, [r7, #4]
 8001f74:	f000 f837 	bl	8001fe6 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	f06f 0201 	mvn.w	r2, #1
 8001f80:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = tmp_sr & ADC_FLAG_OVR;
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	f003 0320 	and.w	r3, r3, #32
 8001f88:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 8001f8a:	68bb      	ldr	r3, [r7, #8]
 8001f8c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001f90:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 8001f92:	697b      	ldr	r3, [r7, #20]
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d015      	beq.n	8001fc4 <HAL_ADC_IRQHandler+0x218>
 8001f98:	693b      	ldr	r3, [r7, #16]
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d012      	beq.n	8001fc4 <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fa2:	f043 0202 	orr.w	r2, r3, #2
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	f06f 0220 	mvn.w	r2, #32
 8001fb2:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8001fb4:	6878      	ldr	r0, [r7, #4]
 8001fb6:	f000 f820 	bl	8001ffa <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	f06f 0220 	mvn.w	r2, #32
 8001fc2:	601a      	str	r2, [r3, #0]
  }
}
 8001fc4:	bf00      	nop
 8001fc6:	3718      	adds	r7, #24
 8001fc8:	46bd      	mov	sp, r7
 8001fca:	bd80      	pop	{r7, pc}

08001fcc <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8001fcc:	b480      	push	{r7}
 8001fce:	b083      	sub	sp, #12
 8001fd0:	af00      	add	r7, sp, #0
 8001fd2:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8001fda:	4618      	mov	r0, r3
 8001fdc:	370c      	adds	r7, #12
 8001fde:	46bd      	mov	sp, r7
 8001fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe4:	4770      	bx	lr

08001fe6 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8001fe6:	b480      	push	{r7}
 8001fe8:	b083      	sub	sp, #12
 8001fea:	af00      	add	r7, sp, #0
 8001fec:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8001fee:	bf00      	nop
 8001ff0:	370c      	adds	r7, #12
 8001ff2:	46bd      	mov	sp, r7
 8001ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff8:	4770      	bx	lr

08001ffa <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001ffa:	b480      	push	{r7}
 8001ffc:	b083      	sub	sp, #12
 8001ffe:	af00      	add	r7, sp, #0
 8002000:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8002002:	bf00      	nop
 8002004:	370c      	adds	r7, #12
 8002006:	46bd      	mov	sp, r7
 8002008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800200c:	4770      	bx	lr
	...

08002010 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002010:	b480      	push	{r7}
 8002012:	b085      	sub	sp, #20
 8002014:	af00      	add	r7, sp, #0
 8002016:	6078      	str	r0, [r7, #4]
 8002018:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800201a:	2300      	movs	r3, #0
 800201c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002024:	2b01      	cmp	r3, #1
 8002026:	d101      	bne.n	800202c <HAL_ADC_ConfigChannel+0x1c>
 8002028:	2302      	movs	r3, #2
 800202a:	e113      	b.n	8002254 <HAL_ADC_ConfigChannel+0x244>
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	2201      	movs	r2, #1
 8002030:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002034:	683b      	ldr	r3, [r7, #0]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	2b09      	cmp	r3, #9
 800203a:	d925      	bls.n	8002088 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	68d9      	ldr	r1, [r3, #12]
 8002042:	683b      	ldr	r3, [r7, #0]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	b29b      	uxth	r3, r3
 8002048:	461a      	mov	r2, r3
 800204a:	4613      	mov	r3, r2
 800204c:	005b      	lsls	r3, r3, #1
 800204e:	4413      	add	r3, r2
 8002050:	3b1e      	subs	r3, #30
 8002052:	2207      	movs	r2, #7
 8002054:	fa02 f303 	lsl.w	r3, r2, r3
 8002058:	43da      	mvns	r2, r3
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	400a      	ands	r2, r1
 8002060:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	68d9      	ldr	r1, [r3, #12]
 8002068:	683b      	ldr	r3, [r7, #0]
 800206a:	689a      	ldr	r2, [r3, #8]
 800206c:	683b      	ldr	r3, [r7, #0]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	b29b      	uxth	r3, r3
 8002072:	4618      	mov	r0, r3
 8002074:	4603      	mov	r3, r0
 8002076:	005b      	lsls	r3, r3, #1
 8002078:	4403      	add	r3, r0
 800207a:	3b1e      	subs	r3, #30
 800207c:	409a      	lsls	r2, r3
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	430a      	orrs	r2, r1
 8002084:	60da      	str	r2, [r3, #12]
 8002086:	e022      	b.n	80020ce <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	6919      	ldr	r1, [r3, #16]
 800208e:	683b      	ldr	r3, [r7, #0]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	b29b      	uxth	r3, r3
 8002094:	461a      	mov	r2, r3
 8002096:	4613      	mov	r3, r2
 8002098:	005b      	lsls	r3, r3, #1
 800209a:	4413      	add	r3, r2
 800209c:	2207      	movs	r2, #7
 800209e:	fa02 f303 	lsl.w	r3, r2, r3
 80020a2:	43da      	mvns	r2, r3
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	400a      	ands	r2, r1
 80020aa:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	6919      	ldr	r1, [r3, #16]
 80020b2:	683b      	ldr	r3, [r7, #0]
 80020b4:	689a      	ldr	r2, [r3, #8]
 80020b6:	683b      	ldr	r3, [r7, #0]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	b29b      	uxth	r3, r3
 80020bc:	4618      	mov	r0, r3
 80020be:	4603      	mov	r3, r0
 80020c0:	005b      	lsls	r3, r3, #1
 80020c2:	4403      	add	r3, r0
 80020c4:	409a      	lsls	r2, r3
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	430a      	orrs	r2, r1
 80020cc:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80020ce:	683b      	ldr	r3, [r7, #0]
 80020d0:	685b      	ldr	r3, [r3, #4]
 80020d2:	2b06      	cmp	r3, #6
 80020d4:	d824      	bhi.n	8002120 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80020dc:	683b      	ldr	r3, [r7, #0]
 80020de:	685a      	ldr	r2, [r3, #4]
 80020e0:	4613      	mov	r3, r2
 80020e2:	009b      	lsls	r3, r3, #2
 80020e4:	4413      	add	r3, r2
 80020e6:	3b05      	subs	r3, #5
 80020e8:	221f      	movs	r2, #31
 80020ea:	fa02 f303 	lsl.w	r3, r2, r3
 80020ee:	43da      	mvns	r2, r3
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	400a      	ands	r2, r1
 80020f6:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80020fe:	683b      	ldr	r3, [r7, #0]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	b29b      	uxth	r3, r3
 8002104:	4618      	mov	r0, r3
 8002106:	683b      	ldr	r3, [r7, #0]
 8002108:	685a      	ldr	r2, [r3, #4]
 800210a:	4613      	mov	r3, r2
 800210c:	009b      	lsls	r3, r3, #2
 800210e:	4413      	add	r3, r2
 8002110:	3b05      	subs	r3, #5
 8002112:	fa00 f203 	lsl.w	r2, r0, r3
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	430a      	orrs	r2, r1
 800211c:	635a      	str	r2, [r3, #52]	; 0x34
 800211e:	e04c      	b.n	80021ba <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002120:	683b      	ldr	r3, [r7, #0]
 8002122:	685b      	ldr	r3, [r3, #4]
 8002124:	2b0c      	cmp	r3, #12
 8002126:	d824      	bhi.n	8002172 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800212e:	683b      	ldr	r3, [r7, #0]
 8002130:	685a      	ldr	r2, [r3, #4]
 8002132:	4613      	mov	r3, r2
 8002134:	009b      	lsls	r3, r3, #2
 8002136:	4413      	add	r3, r2
 8002138:	3b23      	subs	r3, #35	; 0x23
 800213a:	221f      	movs	r2, #31
 800213c:	fa02 f303 	lsl.w	r3, r2, r3
 8002140:	43da      	mvns	r2, r3
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	400a      	ands	r2, r1
 8002148:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002150:	683b      	ldr	r3, [r7, #0]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	b29b      	uxth	r3, r3
 8002156:	4618      	mov	r0, r3
 8002158:	683b      	ldr	r3, [r7, #0]
 800215a:	685a      	ldr	r2, [r3, #4]
 800215c:	4613      	mov	r3, r2
 800215e:	009b      	lsls	r3, r3, #2
 8002160:	4413      	add	r3, r2
 8002162:	3b23      	subs	r3, #35	; 0x23
 8002164:	fa00 f203 	lsl.w	r2, r0, r3
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	430a      	orrs	r2, r1
 800216e:	631a      	str	r2, [r3, #48]	; 0x30
 8002170:	e023      	b.n	80021ba <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002178:	683b      	ldr	r3, [r7, #0]
 800217a:	685a      	ldr	r2, [r3, #4]
 800217c:	4613      	mov	r3, r2
 800217e:	009b      	lsls	r3, r3, #2
 8002180:	4413      	add	r3, r2
 8002182:	3b41      	subs	r3, #65	; 0x41
 8002184:	221f      	movs	r2, #31
 8002186:	fa02 f303 	lsl.w	r3, r2, r3
 800218a:	43da      	mvns	r2, r3
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	400a      	ands	r2, r1
 8002192:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800219a:	683b      	ldr	r3, [r7, #0]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	b29b      	uxth	r3, r3
 80021a0:	4618      	mov	r0, r3
 80021a2:	683b      	ldr	r3, [r7, #0]
 80021a4:	685a      	ldr	r2, [r3, #4]
 80021a6:	4613      	mov	r3, r2
 80021a8:	009b      	lsls	r3, r3, #2
 80021aa:	4413      	add	r3, r2
 80021ac:	3b41      	subs	r3, #65	; 0x41
 80021ae:	fa00 f203 	lsl.w	r2, r0, r3
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	430a      	orrs	r2, r1
 80021b8:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80021ba:	4b29      	ldr	r3, [pc, #164]	; (8002260 <HAL_ADC_ConfigChannel+0x250>)
 80021bc:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	4a28      	ldr	r2, [pc, #160]	; (8002264 <HAL_ADC_ConfigChannel+0x254>)
 80021c4:	4293      	cmp	r3, r2
 80021c6:	d10f      	bne.n	80021e8 <HAL_ADC_ConfigChannel+0x1d8>
 80021c8:	683b      	ldr	r3, [r7, #0]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	2b12      	cmp	r3, #18
 80021ce:	d10b      	bne.n	80021e8 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	685b      	ldr	r3, [r3, #4]
 80021d4:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	685b      	ldr	r3, [r3, #4]
 80021e0:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	4a1d      	ldr	r2, [pc, #116]	; (8002264 <HAL_ADC_ConfigChannel+0x254>)
 80021ee:	4293      	cmp	r3, r2
 80021f0:	d12b      	bne.n	800224a <HAL_ADC_ConfigChannel+0x23a>
 80021f2:	683b      	ldr	r3, [r7, #0]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	4a1c      	ldr	r2, [pc, #112]	; (8002268 <HAL_ADC_ConfigChannel+0x258>)
 80021f8:	4293      	cmp	r3, r2
 80021fa:	d003      	beq.n	8002204 <HAL_ADC_ConfigChannel+0x1f4>
 80021fc:	683b      	ldr	r3, [r7, #0]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	2b11      	cmp	r3, #17
 8002202:	d122      	bne.n	800224a <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	685b      	ldr	r3, [r3, #4]
 8002208:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	685b      	ldr	r3, [r3, #4]
 8002214:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800221c:	683b      	ldr	r3, [r7, #0]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	4a11      	ldr	r2, [pc, #68]	; (8002268 <HAL_ADC_ConfigChannel+0x258>)
 8002222:	4293      	cmp	r3, r2
 8002224:	d111      	bne.n	800224a <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002226:	4b11      	ldr	r3, [pc, #68]	; (800226c <HAL_ADC_ConfigChannel+0x25c>)
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	4a11      	ldr	r2, [pc, #68]	; (8002270 <HAL_ADC_ConfigChannel+0x260>)
 800222c:	fba2 2303 	umull	r2, r3, r2, r3
 8002230:	0c9a      	lsrs	r2, r3, #18
 8002232:	4613      	mov	r3, r2
 8002234:	009b      	lsls	r3, r3, #2
 8002236:	4413      	add	r3, r2
 8002238:	005b      	lsls	r3, r3, #1
 800223a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800223c:	e002      	b.n	8002244 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 800223e:	68bb      	ldr	r3, [r7, #8]
 8002240:	3b01      	subs	r3, #1
 8002242:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002244:	68bb      	ldr	r3, [r7, #8]
 8002246:	2b00      	cmp	r3, #0
 8002248:	d1f9      	bne.n	800223e <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	2200      	movs	r2, #0
 800224e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002252:	2300      	movs	r3, #0
}
 8002254:	4618      	mov	r0, r3
 8002256:	3714      	adds	r7, #20
 8002258:	46bd      	mov	sp, r7
 800225a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800225e:	4770      	bx	lr
 8002260:	40012300 	.word	0x40012300
 8002264:	40012000 	.word	0x40012000
 8002268:	10000012 	.word	0x10000012
 800226c:	20000004 	.word	0x20000004
 8002270:	431bde83 	.word	0x431bde83

08002274 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002274:	b480      	push	{r7}
 8002276:	b085      	sub	sp, #20
 8002278:	af00      	add	r7, sp, #0
 800227a:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800227c:	4b79      	ldr	r3, [pc, #484]	; (8002464 <ADC_Init+0x1f0>)
 800227e:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	685b      	ldr	r3, [r3, #4]
 8002284:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	685a      	ldr	r2, [r3, #4]
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	685b      	ldr	r3, [r3, #4]
 8002294:	431a      	orrs	r2, r3
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	685a      	ldr	r2, [r3, #4]
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80022a8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	6859      	ldr	r1, [r3, #4]
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	691b      	ldr	r3, [r3, #16]
 80022b4:	021a      	lsls	r2, r3, #8
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	430a      	orrs	r2, r1
 80022bc:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	685a      	ldr	r2, [r3, #4]
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80022cc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	6859      	ldr	r1, [r3, #4]
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	689a      	ldr	r2, [r3, #8]
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	430a      	orrs	r2, r1
 80022de:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	689a      	ldr	r2, [r3, #8]
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80022ee:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	6899      	ldr	r1, [r3, #8]
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	68da      	ldr	r2, [r3, #12]
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	430a      	orrs	r2, r1
 8002300:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002306:	4a58      	ldr	r2, [pc, #352]	; (8002468 <ADC_Init+0x1f4>)
 8002308:	4293      	cmp	r3, r2
 800230a:	d022      	beq.n	8002352 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	689a      	ldr	r2, [r3, #8]
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800231a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	6899      	ldr	r1, [r3, #8]
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	430a      	orrs	r2, r1
 800232c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	689a      	ldr	r2, [r3, #8]
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800233c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	6899      	ldr	r1, [r3, #8]
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	430a      	orrs	r2, r1
 800234e:	609a      	str	r2, [r3, #8]
 8002350:	e00f      	b.n	8002372 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	689a      	ldr	r2, [r3, #8]
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002360:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	689a      	ldr	r2, [r3, #8]
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002370:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	689a      	ldr	r2, [r3, #8]
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	f022 0202 	bic.w	r2, r2, #2
 8002380:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	6899      	ldr	r1, [r3, #8]
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	7e1b      	ldrb	r3, [r3, #24]
 800238c:	005a      	lsls	r2, r3, #1
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	430a      	orrs	r2, r1
 8002394:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	f893 3020 	ldrb.w	r3, [r3, #32]
 800239c:	2b00      	cmp	r3, #0
 800239e:	d01b      	beq.n	80023d8 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	685a      	ldr	r2, [r3, #4]
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80023ae:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	685a      	ldr	r2, [r3, #4]
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80023be:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	6859      	ldr	r1, [r3, #4]
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023ca:	3b01      	subs	r3, #1
 80023cc:	035a      	lsls	r2, r3, #13
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	430a      	orrs	r2, r1
 80023d4:	605a      	str	r2, [r3, #4]
 80023d6:	e007      	b.n	80023e8 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	685a      	ldr	r2, [r3, #4]
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80023e6:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80023f6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	69db      	ldr	r3, [r3, #28]
 8002402:	3b01      	subs	r3, #1
 8002404:	051a      	lsls	r2, r3, #20
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	430a      	orrs	r2, r1
 800240c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	689a      	ldr	r2, [r3, #8]
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800241c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	6899      	ldr	r1, [r3, #8]
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800242a:	025a      	lsls	r2, r3, #9
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	430a      	orrs	r2, r1
 8002432:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	689a      	ldr	r2, [r3, #8]
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002442:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	6899      	ldr	r1, [r3, #8]
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	695b      	ldr	r3, [r3, #20]
 800244e:	029a      	lsls	r2, r3, #10
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	430a      	orrs	r2, r1
 8002456:	609a      	str	r2, [r3, #8]
}
 8002458:	bf00      	nop
 800245a:	3714      	adds	r7, #20
 800245c:	46bd      	mov	sp, r7
 800245e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002462:	4770      	bx	lr
 8002464:	40012300 	.word	0x40012300
 8002468:	0f000001 	.word	0x0f000001

0800246c <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 800246c:	b480      	push	{r7}
 800246e:	b083      	sub	sp, #12
 8002470:	af00      	add	r7, sp, #0
 8002472:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8002474:	bf00      	nop
 8002476:	370c      	adds	r7, #12
 8002478:	46bd      	mov	sp, r7
 800247a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800247e:	4770      	bx	lr

08002480 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002480:	b480      	push	{r7}
 8002482:	b085      	sub	sp, #20
 8002484:	af00      	add	r7, sp, #0
 8002486:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	f003 0307 	and.w	r3, r3, #7
 800248e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002490:	4b0c      	ldr	r3, [pc, #48]	; (80024c4 <__NVIC_SetPriorityGrouping+0x44>)
 8002492:	68db      	ldr	r3, [r3, #12]
 8002494:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002496:	68ba      	ldr	r2, [r7, #8]
 8002498:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800249c:	4013      	ands	r3, r2
 800249e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80024a4:	68bb      	ldr	r3, [r7, #8]
 80024a6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80024a8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80024ac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80024b0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80024b2:	4a04      	ldr	r2, [pc, #16]	; (80024c4 <__NVIC_SetPriorityGrouping+0x44>)
 80024b4:	68bb      	ldr	r3, [r7, #8]
 80024b6:	60d3      	str	r3, [r2, #12]
}
 80024b8:	bf00      	nop
 80024ba:	3714      	adds	r7, #20
 80024bc:	46bd      	mov	sp, r7
 80024be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c2:	4770      	bx	lr
 80024c4:	e000ed00 	.word	0xe000ed00

080024c8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80024c8:	b480      	push	{r7}
 80024ca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80024cc:	4b04      	ldr	r3, [pc, #16]	; (80024e0 <__NVIC_GetPriorityGrouping+0x18>)
 80024ce:	68db      	ldr	r3, [r3, #12]
 80024d0:	0a1b      	lsrs	r3, r3, #8
 80024d2:	f003 0307 	and.w	r3, r3, #7
}
 80024d6:	4618      	mov	r0, r3
 80024d8:	46bd      	mov	sp, r7
 80024da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024de:	4770      	bx	lr
 80024e0:	e000ed00 	.word	0xe000ed00

080024e4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80024e4:	b480      	push	{r7}
 80024e6:	b083      	sub	sp, #12
 80024e8:	af00      	add	r7, sp, #0
 80024ea:	4603      	mov	r3, r0
 80024ec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80024ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	db0b      	blt.n	800250e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80024f6:	79fb      	ldrb	r3, [r7, #7]
 80024f8:	f003 021f 	and.w	r2, r3, #31
 80024fc:	4907      	ldr	r1, [pc, #28]	; (800251c <__NVIC_EnableIRQ+0x38>)
 80024fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002502:	095b      	lsrs	r3, r3, #5
 8002504:	2001      	movs	r0, #1
 8002506:	fa00 f202 	lsl.w	r2, r0, r2
 800250a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800250e:	bf00      	nop
 8002510:	370c      	adds	r7, #12
 8002512:	46bd      	mov	sp, r7
 8002514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002518:	4770      	bx	lr
 800251a:	bf00      	nop
 800251c:	e000e100 	.word	0xe000e100

08002520 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002520:	b480      	push	{r7}
 8002522:	b083      	sub	sp, #12
 8002524:	af00      	add	r7, sp, #0
 8002526:	4603      	mov	r3, r0
 8002528:	6039      	str	r1, [r7, #0]
 800252a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800252c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002530:	2b00      	cmp	r3, #0
 8002532:	db0a      	blt.n	800254a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002534:	683b      	ldr	r3, [r7, #0]
 8002536:	b2da      	uxtb	r2, r3
 8002538:	490c      	ldr	r1, [pc, #48]	; (800256c <__NVIC_SetPriority+0x4c>)
 800253a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800253e:	0112      	lsls	r2, r2, #4
 8002540:	b2d2      	uxtb	r2, r2
 8002542:	440b      	add	r3, r1
 8002544:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002548:	e00a      	b.n	8002560 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800254a:	683b      	ldr	r3, [r7, #0]
 800254c:	b2da      	uxtb	r2, r3
 800254e:	4908      	ldr	r1, [pc, #32]	; (8002570 <__NVIC_SetPriority+0x50>)
 8002550:	79fb      	ldrb	r3, [r7, #7]
 8002552:	f003 030f 	and.w	r3, r3, #15
 8002556:	3b04      	subs	r3, #4
 8002558:	0112      	lsls	r2, r2, #4
 800255a:	b2d2      	uxtb	r2, r2
 800255c:	440b      	add	r3, r1
 800255e:	761a      	strb	r2, [r3, #24]
}
 8002560:	bf00      	nop
 8002562:	370c      	adds	r7, #12
 8002564:	46bd      	mov	sp, r7
 8002566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800256a:	4770      	bx	lr
 800256c:	e000e100 	.word	0xe000e100
 8002570:	e000ed00 	.word	0xe000ed00

08002574 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002574:	b480      	push	{r7}
 8002576:	b089      	sub	sp, #36	; 0x24
 8002578:	af00      	add	r7, sp, #0
 800257a:	60f8      	str	r0, [r7, #12]
 800257c:	60b9      	str	r1, [r7, #8]
 800257e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	f003 0307 	and.w	r3, r3, #7
 8002586:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002588:	69fb      	ldr	r3, [r7, #28]
 800258a:	f1c3 0307 	rsb	r3, r3, #7
 800258e:	2b04      	cmp	r3, #4
 8002590:	bf28      	it	cs
 8002592:	2304      	movcs	r3, #4
 8002594:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002596:	69fb      	ldr	r3, [r7, #28]
 8002598:	3304      	adds	r3, #4
 800259a:	2b06      	cmp	r3, #6
 800259c:	d902      	bls.n	80025a4 <NVIC_EncodePriority+0x30>
 800259e:	69fb      	ldr	r3, [r7, #28]
 80025a0:	3b03      	subs	r3, #3
 80025a2:	e000      	b.n	80025a6 <NVIC_EncodePriority+0x32>
 80025a4:	2300      	movs	r3, #0
 80025a6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80025a8:	f04f 32ff 	mov.w	r2, #4294967295
 80025ac:	69bb      	ldr	r3, [r7, #24]
 80025ae:	fa02 f303 	lsl.w	r3, r2, r3
 80025b2:	43da      	mvns	r2, r3
 80025b4:	68bb      	ldr	r3, [r7, #8]
 80025b6:	401a      	ands	r2, r3
 80025b8:	697b      	ldr	r3, [r7, #20]
 80025ba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80025bc:	f04f 31ff 	mov.w	r1, #4294967295
 80025c0:	697b      	ldr	r3, [r7, #20]
 80025c2:	fa01 f303 	lsl.w	r3, r1, r3
 80025c6:	43d9      	mvns	r1, r3
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80025cc:	4313      	orrs	r3, r2
         );
}
 80025ce:	4618      	mov	r0, r3
 80025d0:	3724      	adds	r7, #36	; 0x24
 80025d2:	46bd      	mov	sp, r7
 80025d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d8:	4770      	bx	lr
	...

080025dc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80025dc:	b580      	push	{r7, lr}
 80025de:	b082      	sub	sp, #8
 80025e0:	af00      	add	r7, sp, #0
 80025e2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	3b01      	subs	r3, #1
 80025e8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80025ec:	d301      	bcc.n	80025f2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80025ee:	2301      	movs	r3, #1
 80025f0:	e00f      	b.n	8002612 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80025f2:	4a0a      	ldr	r2, [pc, #40]	; (800261c <SysTick_Config+0x40>)
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	3b01      	subs	r3, #1
 80025f8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80025fa:	210f      	movs	r1, #15
 80025fc:	f04f 30ff 	mov.w	r0, #4294967295
 8002600:	f7ff ff8e 	bl	8002520 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002604:	4b05      	ldr	r3, [pc, #20]	; (800261c <SysTick_Config+0x40>)
 8002606:	2200      	movs	r2, #0
 8002608:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800260a:	4b04      	ldr	r3, [pc, #16]	; (800261c <SysTick_Config+0x40>)
 800260c:	2207      	movs	r2, #7
 800260e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002610:	2300      	movs	r3, #0
}
 8002612:	4618      	mov	r0, r3
 8002614:	3708      	adds	r7, #8
 8002616:	46bd      	mov	sp, r7
 8002618:	bd80      	pop	{r7, pc}
 800261a:	bf00      	nop
 800261c:	e000e010 	.word	0xe000e010

08002620 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002620:	b580      	push	{r7, lr}
 8002622:	b082      	sub	sp, #8
 8002624:	af00      	add	r7, sp, #0
 8002626:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002628:	6878      	ldr	r0, [r7, #4]
 800262a:	f7ff ff29 	bl	8002480 <__NVIC_SetPriorityGrouping>
}
 800262e:	bf00      	nop
 8002630:	3708      	adds	r7, #8
 8002632:	46bd      	mov	sp, r7
 8002634:	bd80      	pop	{r7, pc}

08002636 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002636:	b580      	push	{r7, lr}
 8002638:	b086      	sub	sp, #24
 800263a:	af00      	add	r7, sp, #0
 800263c:	4603      	mov	r3, r0
 800263e:	60b9      	str	r1, [r7, #8]
 8002640:	607a      	str	r2, [r7, #4]
 8002642:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002644:	2300      	movs	r3, #0
 8002646:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002648:	f7ff ff3e 	bl	80024c8 <__NVIC_GetPriorityGrouping>
 800264c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800264e:	687a      	ldr	r2, [r7, #4]
 8002650:	68b9      	ldr	r1, [r7, #8]
 8002652:	6978      	ldr	r0, [r7, #20]
 8002654:	f7ff ff8e 	bl	8002574 <NVIC_EncodePriority>
 8002658:	4602      	mov	r2, r0
 800265a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800265e:	4611      	mov	r1, r2
 8002660:	4618      	mov	r0, r3
 8002662:	f7ff ff5d 	bl	8002520 <__NVIC_SetPriority>
}
 8002666:	bf00      	nop
 8002668:	3718      	adds	r7, #24
 800266a:	46bd      	mov	sp, r7
 800266c:	bd80      	pop	{r7, pc}

0800266e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800266e:	b580      	push	{r7, lr}
 8002670:	b082      	sub	sp, #8
 8002672:	af00      	add	r7, sp, #0
 8002674:	4603      	mov	r3, r0
 8002676:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002678:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800267c:	4618      	mov	r0, r3
 800267e:	f7ff ff31 	bl	80024e4 <__NVIC_EnableIRQ>
}
 8002682:	bf00      	nop
 8002684:	3708      	adds	r7, #8
 8002686:	46bd      	mov	sp, r7
 8002688:	bd80      	pop	{r7, pc}

0800268a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800268a:	b580      	push	{r7, lr}
 800268c:	b082      	sub	sp, #8
 800268e:	af00      	add	r7, sp, #0
 8002690:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002692:	6878      	ldr	r0, [r7, #4]
 8002694:	f7ff ffa2 	bl	80025dc <SysTick_Config>
 8002698:	4603      	mov	r3, r0
}
 800269a:	4618      	mov	r0, r3
 800269c:	3708      	adds	r7, #8
 800269e:	46bd      	mov	sp, r7
 80026a0:	bd80      	pop	{r7, pc}
	...

080026a4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80026a4:	b480      	push	{r7}
 80026a6:	b089      	sub	sp, #36	; 0x24
 80026a8:	af00      	add	r7, sp, #0
 80026aa:	6078      	str	r0, [r7, #4]
 80026ac:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80026ae:	2300      	movs	r3, #0
 80026b0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80026b2:	2300      	movs	r3, #0
 80026b4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80026b6:	2300      	movs	r3, #0
 80026b8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80026ba:	2300      	movs	r3, #0
 80026bc:	61fb      	str	r3, [r7, #28]
 80026be:	e177      	b.n	80029b0 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80026c0:	2201      	movs	r2, #1
 80026c2:	69fb      	ldr	r3, [r7, #28]
 80026c4:	fa02 f303 	lsl.w	r3, r2, r3
 80026c8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80026ca:	683b      	ldr	r3, [r7, #0]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	697a      	ldr	r2, [r7, #20]
 80026d0:	4013      	ands	r3, r2
 80026d2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80026d4:	693a      	ldr	r2, [r7, #16]
 80026d6:	697b      	ldr	r3, [r7, #20]
 80026d8:	429a      	cmp	r2, r3
 80026da:	f040 8166 	bne.w	80029aa <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80026de:	683b      	ldr	r3, [r7, #0]
 80026e0:	685b      	ldr	r3, [r3, #4]
 80026e2:	f003 0303 	and.w	r3, r3, #3
 80026e6:	2b01      	cmp	r3, #1
 80026e8:	d005      	beq.n	80026f6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80026ea:	683b      	ldr	r3, [r7, #0]
 80026ec:	685b      	ldr	r3, [r3, #4]
 80026ee:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80026f2:	2b02      	cmp	r3, #2
 80026f4:	d130      	bne.n	8002758 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	689b      	ldr	r3, [r3, #8]
 80026fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80026fc:	69fb      	ldr	r3, [r7, #28]
 80026fe:	005b      	lsls	r3, r3, #1
 8002700:	2203      	movs	r2, #3
 8002702:	fa02 f303 	lsl.w	r3, r2, r3
 8002706:	43db      	mvns	r3, r3
 8002708:	69ba      	ldr	r2, [r7, #24]
 800270a:	4013      	ands	r3, r2
 800270c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800270e:	683b      	ldr	r3, [r7, #0]
 8002710:	68da      	ldr	r2, [r3, #12]
 8002712:	69fb      	ldr	r3, [r7, #28]
 8002714:	005b      	lsls	r3, r3, #1
 8002716:	fa02 f303 	lsl.w	r3, r2, r3
 800271a:	69ba      	ldr	r2, [r7, #24]
 800271c:	4313      	orrs	r3, r2
 800271e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	69ba      	ldr	r2, [r7, #24]
 8002724:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	685b      	ldr	r3, [r3, #4]
 800272a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800272c:	2201      	movs	r2, #1
 800272e:	69fb      	ldr	r3, [r7, #28]
 8002730:	fa02 f303 	lsl.w	r3, r2, r3
 8002734:	43db      	mvns	r3, r3
 8002736:	69ba      	ldr	r2, [r7, #24]
 8002738:	4013      	ands	r3, r2
 800273a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800273c:	683b      	ldr	r3, [r7, #0]
 800273e:	685b      	ldr	r3, [r3, #4]
 8002740:	091b      	lsrs	r3, r3, #4
 8002742:	f003 0201 	and.w	r2, r3, #1
 8002746:	69fb      	ldr	r3, [r7, #28]
 8002748:	fa02 f303 	lsl.w	r3, r2, r3
 800274c:	69ba      	ldr	r2, [r7, #24]
 800274e:	4313      	orrs	r3, r2
 8002750:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	69ba      	ldr	r2, [r7, #24]
 8002756:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002758:	683b      	ldr	r3, [r7, #0]
 800275a:	685b      	ldr	r3, [r3, #4]
 800275c:	f003 0303 	and.w	r3, r3, #3
 8002760:	2b03      	cmp	r3, #3
 8002762:	d017      	beq.n	8002794 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	68db      	ldr	r3, [r3, #12]
 8002768:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800276a:	69fb      	ldr	r3, [r7, #28]
 800276c:	005b      	lsls	r3, r3, #1
 800276e:	2203      	movs	r2, #3
 8002770:	fa02 f303 	lsl.w	r3, r2, r3
 8002774:	43db      	mvns	r3, r3
 8002776:	69ba      	ldr	r2, [r7, #24]
 8002778:	4013      	ands	r3, r2
 800277a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800277c:	683b      	ldr	r3, [r7, #0]
 800277e:	689a      	ldr	r2, [r3, #8]
 8002780:	69fb      	ldr	r3, [r7, #28]
 8002782:	005b      	lsls	r3, r3, #1
 8002784:	fa02 f303 	lsl.w	r3, r2, r3
 8002788:	69ba      	ldr	r2, [r7, #24]
 800278a:	4313      	orrs	r3, r2
 800278c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	69ba      	ldr	r2, [r7, #24]
 8002792:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002794:	683b      	ldr	r3, [r7, #0]
 8002796:	685b      	ldr	r3, [r3, #4]
 8002798:	f003 0303 	and.w	r3, r3, #3
 800279c:	2b02      	cmp	r3, #2
 800279e:	d123      	bne.n	80027e8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80027a0:	69fb      	ldr	r3, [r7, #28]
 80027a2:	08da      	lsrs	r2, r3, #3
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	3208      	adds	r2, #8
 80027a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80027ac:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80027ae:	69fb      	ldr	r3, [r7, #28]
 80027b0:	f003 0307 	and.w	r3, r3, #7
 80027b4:	009b      	lsls	r3, r3, #2
 80027b6:	220f      	movs	r2, #15
 80027b8:	fa02 f303 	lsl.w	r3, r2, r3
 80027bc:	43db      	mvns	r3, r3
 80027be:	69ba      	ldr	r2, [r7, #24]
 80027c0:	4013      	ands	r3, r2
 80027c2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80027c4:	683b      	ldr	r3, [r7, #0]
 80027c6:	691a      	ldr	r2, [r3, #16]
 80027c8:	69fb      	ldr	r3, [r7, #28]
 80027ca:	f003 0307 	and.w	r3, r3, #7
 80027ce:	009b      	lsls	r3, r3, #2
 80027d0:	fa02 f303 	lsl.w	r3, r2, r3
 80027d4:	69ba      	ldr	r2, [r7, #24]
 80027d6:	4313      	orrs	r3, r2
 80027d8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80027da:	69fb      	ldr	r3, [r7, #28]
 80027dc:	08da      	lsrs	r2, r3, #3
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	3208      	adds	r2, #8
 80027e2:	69b9      	ldr	r1, [r7, #24]
 80027e4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80027ee:	69fb      	ldr	r3, [r7, #28]
 80027f0:	005b      	lsls	r3, r3, #1
 80027f2:	2203      	movs	r2, #3
 80027f4:	fa02 f303 	lsl.w	r3, r2, r3
 80027f8:	43db      	mvns	r3, r3
 80027fa:	69ba      	ldr	r2, [r7, #24]
 80027fc:	4013      	ands	r3, r2
 80027fe:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002800:	683b      	ldr	r3, [r7, #0]
 8002802:	685b      	ldr	r3, [r3, #4]
 8002804:	f003 0203 	and.w	r2, r3, #3
 8002808:	69fb      	ldr	r3, [r7, #28]
 800280a:	005b      	lsls	r3, r3, #1
 800280c:	fa02 f303 	lsl.w	r3, r2, r3
 8002810:	69ba      	ldr	r2, [r7, #24]
 8002812:	4313      	orrs	r3, r2
 8002814:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	69ba      	ldr	r2, [r7, #24]
 800281a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800281c:	683b      	ldr	r3, [r7, #0]
 800281e:	685b      	ldr	r3, [r3, #4]
 8002820:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002824:	2b00      	cmp	r3, #0
 8002826:	f000 80c0 	beq.w	80029aa <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800282a:	2300      	movs	r3, #0
 800282c:	60fb      	str	r3, [r7, #12]
 800282e:	4b66      	ldr	r3, [pc, #408]	; (80029c8 <HAL_GPIO_Init+0x324>)
 8002830:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002832:	4a65      	ldr	r2, [pc, #404]	; (80029c8 <HAL_GPIO_Init+0x324>)
 8002834:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002838:	6453      	str	r3, [r2, #68]	; 0x44
 800283a:	4b63      	ldr	r3, [pc, #396]	; (80029c8 <HAL_GPIO_Init+0x324>)
 800283c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800283e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002842:	60fb      	str	r3, [r7, #12]
 8002844:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002846:	4a61      	ldr	r2, [pc, #388]	; (80029cc <HAL_GPIO_Init+0x328>)
 8002848:	69fb      	ldr	r3, [r7, #28]
 800284a:	089b      	lsrs	r3, r3, #2
 800284c:	3302      	adds	r3, #2
 800284e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002852:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002854:	69fb      	ldr	r3, [r7, #28]
 8002856:	f003 0303 	and.w	r3, r3, #3
 800285a:	009b      	lsls	r3, r3, #2
 800285c:	220f      	movs	r2, #15
 800285e:	fa02 f303 	lsl.w	r3, r2, r3
 8002862:	43db      	mvns	r3, r3
 8002864:	69ba      	ldr	r2, [r7, #24]
 8002866:	4013      	ands	r3, r2
 8002868:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	4a58      	ldr	r2, [pc, #352]	; (80029d0 <HAL_GPIO_Init+0x32c>)
 800286e:	4293      	cmp	r3, r2
 8002870:	d037      	beq.n	80028e2 <HAL_GPIO_Init+0x23e>
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	4a57      	ldr	r2, [pc, #348]	; (80029d4 <HAL_GPIO_Init+0x330>)
 8002876:	4293      	cmp	r3, r2
 8002878:	d031      	beq.n	80028de <HAL_GPIO_Init+0x23a>
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	4a56      	ldr	r2, [pc, #344]	; (80029d8 <HAL_GPIO_Init+0x334>)
 800287e:	4293      	cmp	r3, r2
 8002880:	d02b      	beq.n	80028da <HAL_GPIO_Init+0x236>
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	4a55      	ldr	r2, [pc, #340]	; (80029dc <HAL_GPIO_Init+0x338>)
 8002886:	4293      	cmp	r3, r2
 8002888:	d025      	beq.n	80028d6 <HAL_GPIO_Init+0x232>
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	4a54      	ldr	r2, [pc, #336]	; (80029e0 <HAL_GPIO_Init+0x33c>)
 800288e:	4293      	cmp	r3, r2
 8002890:	d01f      	beq.n	80028d2 <HAL_GPIO_Init+0x22e>
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	4a53      	ldr	r2, [pc, #332]	; (80029e4 <HAL_GPIO_Init+0x340>)
 8002896:	4293      	cmp	r3, r2
 8002898:	d019      	beq.n	80028ce <HAL_GPIO_Init+0x22a>
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	4a52      	ldr	r2, [pc, #328]	; (80029e8 <HAL_GPIO_Init+0x344>)
 800289e:	4293      	cmp	r3, r2
 80028a0:	d013      	beq.n	80028ca <HAL_GPIO_Init+0x226>
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	4a51      	ldr	r2, [pc, #324]	; (80029ec <HAL_GPIO_Init+0x348>)
 80028a6:	4293      	cmp	r3, r2
 80028a8:	d00d      	beq.n	80028c6 <HAL_GPIO_Init+0x222>
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	4a50      	ldr	r2, [pc, #320]	; (80029f0 <HAL_GPIO_Init+0x34c>)
 80028ae:	4293      	cmp	r3, r2
 80028b0:	d007      	beq.n	80028c2 <HAL_GPIO_Init+0x21e>
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	4a4f      	ldr	r2, [pc, #316]	; (80029f4 <HAL_GPIO_Init+0x350>)
 80028b6:	4293      	cmp	r3, r2
 80028b8:	d101      	bne.n	80028be <HAL_GPIO_Init+0x21a>
 80028ba:	2309      	movs	r3, #9
 80028bc:	e012      	b.n	80028e4 <HAL_GPIO_Init+0x240>
 80028be:	230a      	movs	r3, #10
 80028c0:	e010      	b.n	80028e4 <HAL_GPIO_Init+0x240>
 80028c2:	2308      	movs	r3, #8
 80028c4:	e00e      	b.n	80028e4 <HAL_GPIO_Init+0x240>
 80028c6:	2307      	movs	r3, #7
 80028c8:	e00c      	b.n	80028e4 <HAL_GPIO_Init+0x240>
 80028ca:	2306      	movs	r3, #6
 80028cc:	e00a      	b.n	80028e4 <HAL_GPIO_Init+0x240>
 80028ce:	2305      	movs	r3, #5
 80028d0:	e008      	b.n	80028e4 <HAL_GPIO_Init+0x240>
 80028d2:	2304      	movs	r3, #4
 80028d4:	e006      	b.n	80028e4 <HAL_GPIO_Init+0x240>
 80028d6:	2303      	movs	r3, #3
 80028d8:	e004      	b.n	80028e4 <HAL_GPIO_Init+0x240>
 80028da:	2302      	movs	r3, #2
 80028dc:	e002      	b.n	80028e4 <HAL_GPIO_Init+0x240>
 80028de:	2301      	movs	r3, #1
 80028e0:	e000      	b.n	80028e4 <HAL_GPIO_Init+0x240>
 80028e2:	2300      	movs	r3, #0
 80028e4:	69fa      	ldr	r2, [r7, #28]
 80028e6:	f002 0203 	and.w	r2, r2, #3
 80028ea:	0092      	lsls	r2, r2, #2
 80028ec:	4093      	lsls	r3, r2
 80028ee:	69ba      	ldr	r2, [r7, #24]
 80028f0:	4313      	orrs	r3, r2
 80028f2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80028f4:	4935      	ldr	r1, [pc, #212]	; (80029cc <HAL_GPIO_Init+0x328>)
 80028f6:	69fb      	ldr	r3, [r7, #28]
 80028f8:	089b      	lsrs	r3, r3, #2
 80028fa:	3302      	adds	r3, #2
 80028fc:	69ba      	ldr	r2, [r7, #24]
 80028fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002902:	4b3d      	ldr	r3, [pc, #244]	; (80029f8 <HAL_GPIO_Init+0x354>)
 8002904:	689b      	ldr	r3, [r3, #8]
 8002906:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002908:	693b      	ldr	r3, [r7, #16]
 800290a:	43db      	mvns	r3, r3
 800290c:	69ba      	ldr	r2, [r7, #24]
 800290e:	4013      	ands	r3, r2
 8002910:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002912:	683b      	ldr	r3, [r7, #0]
 8002914:	685b      	ldr	r3, [r3, #4]
 8002916:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800291a:	2b00      	cmp	r3, #0
 800291c:	d003      	beq.n	8002926 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800291e:	69ba      	ldr	r2, [r7, #24]
 8002920:	693b      	ldr	r3, [r7, #16]
 8002922:	4313      	orrs	r3, r2
 8002924:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002926:	4a34      	ldr	r2, [pc, #208]	; (80029f8 <HAL_GPIO_Init+0x354>)
 8002928:	69bb      	ldr	r3, [r7, #24]
 800292a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800292c:	4b32      	ldr	r3, [pc, #200]	; (80029f8 <HAL_GPIO_Init+0x354>)
 800292e:	68db      	ldr	r3, [r3, #12]
 8002930:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002932:	693b      	ldr	r3, [r7, #16]
 8002934:	43db      	mvns	r3, r3
 8002936:	69ba      	ldr	r2, [r7, #24]
 8002938:	4013      	ands	r3, r2
 800293a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800293c:	683b      	ldr	r3, [r7, #0]
 800293e:	685b      	ldr	r3, [r3, #4]
 8002940:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002944:	2b00      	cmp	r3, #0
 8002946:	d003      	beq.n	8002950 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002948:	69ba      	ldr	r2, [r7, #24]
 800294a:	693b      	ldr	r3, [r7, #16]
 800294c:	4313      	orrs	r3, r2
 800294e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002950:	4a29      	ldr	r2, [pc, #164]	; (80029f8 <HAL_GPIO_Init+0x354>)
 8002952:	69bb      	ldr	r3, [r7, #24]
 8002954:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002956:	4b28      	ldr	r3, [pc, #160]	; (80029f8 <HAL_GPIO_Init+0x354>)
 8002958:	685b      	ldr	r3, [r3, #4]
 800295a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800295c:	693b      	ldr	r3, [r7, #16]
 800295e:	43db      	mvns	r3, r3
 8002960:	69ba      	ldr	r2, [r7, #24]
 8002962:	4013      	ands	r3, r2
 8002964:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002966:	683b      	ldr	r3, [r7, #0]
 8002968:	685b      	ldr	r3, [r3, #4]
 800296a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800296e:	2b00      	cmp	r3, #0
 8002970:	d003      	beq.n	800297a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002972:	69ba      	ldr	r2, [r7, #24]
 8002974:	693b      	ldr	r3, [r7, #16]
 8002976:	4313      	orrs	r3, r2
 8002978:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800297a:	4a1f      	ldr	r2, [pc, #124]	; (80029f8 <HAL_GPIO_Init+0x354>)
 800297c:	69bb      	ldr	r3, [r7, #24]
 800297e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002980:	4b1d      	ldr	r3, [pc, #116]	; (80029f8 <HAL_GPIO_Init+0x354>)
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002986:	693b      	ldr	r3, [r7, #16]
 8002988:	43db      	mvns	r3, r3
 800298a:	69ba      	ldr	r2, [r7, #24]
 800298c:	4013      	ands	r3, r2
 800298e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002990:	683b      	ldr	r3, [r7, #0]
 8002992:	685b      	ldr	r3, [r3, #4]
 8002994:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002998:	2b00      	cmp	r3, #0
 800299a:	d003      	beq.n	80029a4 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 800299c:	69ba      	ldr	r2, [r7, #24]
 800299e:	693b      	ldr	r3, [r7, #16]
 80029a0:	4313      	orrs	r3, r2
 80029a2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80029a4:	4a14      	ldr	r2, [pc, #80]	; (80029f8 <HAL_GPIO_Init+0x354>)
 80029a6:	69bb      	ldr	r3, [r7, #24]
 80029a8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80029aa:	69fb      	ldr	r3, [r7, #28]
 80029ac:	3301      	adds	r3, #1
 80029ae:	61fb      	str	r3, [r7, #28]
 80029b0:	69fb      	ldr	r3, [r7, #28]
 80029b2:	2b0f      	cmp	r3, #15
 80029b4:	f67f ae84 	bls.w	80026c0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80029b8:	bf00      	nop
 80029ba:	bf00      	nop
 80029bc:	3724      	adds	r7, #36	; 0x24
 80029be:	46bd      	mov	sp, r7
 80029c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c4:	4770      	bx	lr
 80029c6:	bf00      	nop
 80029c8:	40023800 	.word	0x40023800
 80029cc:	40013800 	.word	0x40013800
 80029d0:	40020000 	.word	0x40020000
 80029d4:	40020400 	.word	0x40020400
 80029d8:	40020800 	.word	0x40020800
 80029dc:	40020c00 	.word	0x40020c00
 80029e0:	40021000 	.word	0x40021000
 80029e4:	40021400 	.word	0x40021400
 80029e8:	40021800 	.word	0x40021800
 80029ec:	40021c00 	.word	0x40021c00
 80029f0:	40022000 	.word	0x40022000
 80029f4:	40022400 	.word	0x40022400
 80029f8:	40013c00 	.word	0x40013c00

080029fc <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80029fc:	b580      	push	{r7, lr}
 80029fe:	b082      	sub	sp, #8
 8002a00:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8002a02:	2300      	movs	r3, #0
 8002a04:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8002a06:	2300      	movs	r3, #0
 8002a08:	603b      	str	r3, [r7, #0]
 8002a0a:	4b20      	ldr	r3, [pc, #128]	; (8002a8c <HAL_PWREx_EnableOverDrive+0x90>)
 8002a0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a0e:	4a1f      	ldr	r2, [pc, #124]	; (8002a8c <HAL_PWREx_EnableOverDrive+0x90>)
 8002a10:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a14:	6413      	str	r3, [r2, #64]	; 0x40
 8002a16:	4b1d      	ldr	r3, [pc, #116]	; (8002a8c <HAL_PWREx_EnableOverDrive+0x90>)
 8002a18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a1a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a1e:	603b      	str	r3, [r7, #0]
 8002a20:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8002a22:	4b1b      	ldr	r3, [pc, #108]	; (8002a90 <HAL_PWREx_EnableOverDrive+0x94>)
 8002a24:	2201      	movs	r2, #1
 8002a26:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002a28:	f7ff f86e 	bl	8001b08 <HAL_GetTick>
 8002a2c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002a2e:	e009      	b.n	8002a44 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002a30:	f7ff f86a 	bl	8001b08 <HAL_GetTick>
 8002a34:	4602      	mov	r2, r0
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	1ad3      	subs	r3, r2, r3
 8002a3a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002a3e:	d901      	bls.n	8002a44 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8002a40:	2303      	movs	r3, #3
 8002a42:	e01f      	b.n	8002a84 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002a44:	4b13      	ldr	r3, [pc, #76]	; (8002a94 <HAL_PWREx_EnableOverDrive+0x98>)
 8002a46:	685b      	ldr	r3, [r3, #4]
 8002a48:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a4c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002a50:	d1ee      	bne.n	8002a30 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8002a52:	4b11      	ldr	r3, [pc, #68]	; (8002a98 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002a54:	2201      	movs	r2, #1
 8002a56:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002a58:	f7ff f856 	bl	8001b08 <HAL_GetTick>
 8002a5c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002a5e:	e009      	b.n	8002a74 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002a60:	f7ff f852 	bl	8001b08 <HAL_GetTick>
 8002a64:	4602      	mov	r2, r0
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	1ad3      	subs	r3, r2, r3
 8002a6a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002a6e:	d901      	bls.n	8002a74 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8002a70:	2303      	movs	r3, #3
 8002a72:	e007      	b.n	8002a84 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002a74:	4b07      	ldr	r3, [pc, #28]	; (8002a94 <HAL_PWREx_EnableOverDrive+0x98>)
 8002a76:	685b      	ldr	r3, [r3, #4]
 8002a78:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a7c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002a80:	d1ee      	bne.n	8002a60 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8002a82:	2300      	movs	r3, #0
}
 8002a84:	4618      	mov	r0, r3
 8002a86:	3708      	adds	r7, #8
 8002a88:	46bd      	mov	sp, r7
 8002a8a:	bd80      	pop	{r7, pc}
 8002a8c:	40023800 	.word	0x40023800
 8002a90:	420e0040 	.word	0x420e0040
 8002a94:	40007000 	.word	0x40007000
 8002a98:	420e0044 	.word	0x420e0044

08002a9c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002a9c:	b580      	push	{r7, lr}
 8002a9e:	b086      	sub	sp, #24
 8002aa0:	af00      	add	r7, sp, #0
 8002aa2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d101      	bne.n	8002aae <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002aaa:	2301      	movs	r3, #1
 8002aac:	e267      	b.n	8002f7e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	f003 0301 	and.w	r3, r3, #1
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d075      	beq.n	8002ba6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002aba:	4b88      	ldr	r3, [pc, #544]	; (8002cdc <HAL_RCC_OscConfig+0x240>)
 8002abc:	689b      	ldr	r3, [r3, #8]
 8002abe:	f003 030c 	and.w	r3, r3, #12
 8002ac2:	2b04      	cmp	r3, #4
 8002ac4:	d00c      	beq.n	8002ae0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002ac6:	4b85      	ldr	r3, [pc, #532]	; (8002cdc <HAL_RCC_OscConfig+0x240>)
 8002ac8:	689b      	ldr	r3, [r3, #8]
 8002aca:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002ace:	2b08      	cmp	r3, #8
 8002ad0:	d112      	bne.n	8002af8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002ad2:	4b82      	ldr	r3, [pc, #520]	; (8002cdc <HAL_RCC_OscConfig+0x240>)
 8002ad4:	685b      	ldr	r3, [r3, #4]
 8002ad6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002ada:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002ade:	d10b      	bne.n	8002af8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ae0:	4b7e      	ldr	r3, [pc, #504]	; (8002cdc <HAL_RCC_OscConfig+0x240>)
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d05b      	beq.n	8002ba4 <HAL_RCC_OscConfig+0x108>
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	685b      	ldr	r3, [r3, #4]
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d157      	bne.n	8002ba4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002af4:	2301      	movs	r3, #1
 8002af6:	e242      	b.n	8002f7e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	685b      	ldr	r3, [r3, #4]
 8002afc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002b00:	d106      	bne.n	8002b10 <HAL_RCC_OscConfig+0x74>
 8002b02:	4b76      	ldr	r3, [pc, #472]	; (8002cdc <HAL_RCC_OscConfig+0x240>)
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	4a75      	ldr	r2, [pc, #468]	; (8002cdc <HAL_RCC_OscConfig+0x240>)
 8002b08:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b0c:	6013      	str	r3, [r2, #0]
 8002b0e:	e01d      	b.n	8002b4c <HAL_RCC_OscConfig+0xb0>
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	685b      	ldr	r3, [r3, #4]
 8002b14:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002b18:	d10c      	bne.n	8002b34 <HAL_RCC_OscConfig+0x98>
 8002b1a:	4b70      	ldr	r3, [pc, #448]	; (8002cdc <HAL_RCC_OscConfig+0x240>)
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	4a6f      	ldr	r2, [pc, #444]	; (8002cdc <HAL_RCC_OscConfig+0x240>)
 8002b20:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002b24:	6013      	str	r3, [r2, #0]
 8002b26:	4b6d      	ldr	r3, [pc, #436]	; (8002cdc <HAL_RCC_OscConfig+0x240>)
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	4a6c      	ldr	r2, [pc, #432]	; (8002cdc <HAL_RCC_OscConfig+0x240>)
 8002b2c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b30:	6013      	str	r3, [r2, #0]
 8002b32:	e00b      	b.n	8002b4c <HAL_RCC_OscConfig+0xb0>
 8002b34:	4b69      	ldr	r3, [pc, #420]	; (8002cdc <HAL_RCC_OscConfig+0x240>)
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	4a68      	ldr	r2, [pc, #416]	; (8002cdc <HAL_RCC_OscConfig+0x240>)
 8002b3a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002b3e:	6013      	str	r3, [r2, #0]
 8002b40:	4b66      	ldr	r3, [pc, #408]	; (8002cdc <HAL_RCC_OscConfig+0x240>)
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	4a65      	ldr	r2, [pc, #404]	; (8002cdc <HAL_RCC_OscConfig+0x240>)
 8002b46:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002b4a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	685b      	ldr	r3, [r3, #4]
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d013      	beq.n	8002b7c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b54:	f7fe ffd8 	bl	8001b08 <HAL_GetTick>
 8002b58:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b5a:	e008      	b.n	8002b6e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002b5c:	f7fe ffd4 	bl	8001b08 <HAL_GetTick>
 8002b60:	4602      	mov	r2, r0
 8002b62:	693b      	ldr	r3, [r7, #16]
 8002b64:	1ad3      	subs	r3, r2, r3
 8002b66:	2b64      	cmp	r3, #100	; 0x64
 8002b68:	d901      	bls.n	8002b6e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002b6a:	2303      	movs	r3, #3
 8002b6c:	e207      	b.n	8002f7e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b6e:	4b5b      	ldr	r3, [pc, #364]	; (8002cdc <HAL_RCC_OscConfig+0x240>)
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d0f0      	beq.n	8002b5c <HAL_RCC_OscConfig+0xc0>
 8002b7a:	e014      	b.n	8002ba6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b7c:	f7fe ffc4 	bl	8001b08 <HAL_GetTick>
 8002b80:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002b82:	e008      	b.n	8002b96 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002b84:	f7fe ffc0 	bl	8001b08 <HAL_GetTick>
 8002b88:	4602      	mov	r2, r0
 8002b8a:	693b      	ldr	r3, [r7, #16]
 8002b8c:	1ad3      	subs	r3, r2, r3
 8002b8e:	2b64      	cmp	r3, #100	; 0x64
 8002b90:	d901      	bls.n	8002b96 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002b92:	2303      	movs	r3, #3
 8002b94:	e1f3      	b.n	8002f7e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002b96:	4b51      	ldr	r3, [pc, #324]	; (8002cdc <HAL_RCC_OscConfig+0x240>)
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d1f0      	bne.n	8002b84 <HAL_RCC_OscConfig+0xe8>
 8002ba2:	e000      	b.n	8002ba6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ba4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	f003 0302 	and.w	r3, r3, #2
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d063      	beq.n	8002c7a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002bb2:	4b4a      	ldr	r3, [pc, #296]	; (8002cdc <HAL_RCC_OscConfig+0x240>)
 8002bb4:	689b      	ldr	r3, [r3, #8]
 8002bb6:	f003 030c 	and.w	r3, r3, #12
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d00b      	beq.n	8002bd6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002bbe:	4b47      	ldr	r3, [pc, #284]	; (8002cdc <HAL_RCC_OscConfig+0x240>)
 8002bc0:	689b      	ldr	r3, [r3, #8]
 8002bc2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002bc6:	2b08      	cmp	r3, #8
 8002bc8:	d11c      	bne.n	8002c04 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002bca:	4b44      	ldr	r3, [pc, #272]	; (8002cdc <HAL_RCC_OscConfig+0x240>)
 8002bcc:	685b      	ldr	r3, [r3, #4]
 8002bce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d116      	bne.n	8002c04 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002bd6:	4b41      	ldr	r3, [pc, #260]	; (8002cdc <HAL_RCC_OscConfig+0x240>)
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	f003 0302 	and.w	r3, r3, #2
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d005      	beq.n	8002bee <HAL_RCC_OscConfig+0x152>
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	68db      	ldr	r3, [r3, #12]
 8002be6:	2b01      	cmp	r3, #1
 8002be8:	d001      	beq.n	8002bee <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002bea:	2301      	movs	r3, #1
 8002bec:	e1c7      	b.n	8002f7e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002bee:	4b3b      	ldr	r3, [pc, #236]	; (8002cdc <HAL_RCC_OscConfig+0x240>)
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	691b      	ldr	r3, [r3, #16]
 8002bfa:	00db      	lsls	r3, r3, #3
 8002bfc:	4937      	ldr	r1, [pc, #220]	; (8002cdc <HAL_RCC_OscConfig+0x240>)
 8002bfe:	4313      	orrs	r3, r2
 8002c00:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002c02:	e03a      	b.n	8002c7a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	68db      	ldr	r3, [r3, #12]
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d020      	beq.n	8002c4e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002c0c:	4b34      	ldr	r3, [pc, #208]	; (8002ce0 <HAL_RCC_OscConfig+0x244>)
 8002c0e:	2201      	movs	r2, #1
 8002c10:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c12:	f7fe ff79 	bl	8001b08 <HAL_GetTick>
 8002c16:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c18:	e008      	b.n	8002c2c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002c1a:	f7fe ff75 	bl	8001b08 <HAL_GetTick>
 8002c1e:	4602      	mov	r2, r0
 8002c20:	693b      	ldr	r3, [r7, #16]
 8002c22:	1ad3      	subs	r3, r2, r3
 8002c24:	2b02      	cmp	r3, #2
 8002c26:	d901      	bls.n	8002c2c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002c28:	2303      	movs	r3, #3
 8002c2a:	e1a8      	b.n	8002f7e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c2c:	4b2b      	ldr	r3, [pc, #172]	; (8002cdc <HAL_RCC_OscConfig+0x240>)
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	f003 0302 	and.w	r3, r3, #2
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d0f0      	beq.n	8002c1a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c38:	4b28      	ldr	r3, [pc, #160]	; (8002cdc <HAL_RCC_OscConfig+0x240>)
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	691b      	ldr	r3, [r3, #16]
 8002c44:	00db      	lsls	r3, r3, #3
 8002c46:	4925      	ldr	r1, [pc, #148]	; (8002cdc <HAL_RCC_OscConfig+0x240>)
 8002c48:	4313      	orrs	r3, r2
 8002c4a:	600b      	str	r3, [r1, #0]
 8002c4c:	e015      	b.n	8002c7a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002c4e:	4b24      	ldr	r3, [pc, #144]	; (8002ce0 <HAL_RCC_OscConfig+0x244>)
 8002c50:	2200      	movs	r2, #0
 8002c52:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c54:	f7fe ff58 	bl	8001b08 <HAL_GetTick>
 8002c58:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002c5a:	e008      	b.n	8002c6e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002c5c:	f7fe ff54 	bl	8001b08 <HAL_GetTick>
 8002c60:	4602      	mov	r2, r0
 8002c62:	693b      	ldr	r3, [r7, #16]
 8002c64:	1ad3      	subs	r3, r2, r3
 8002c66:	2b02      	cmp	r3, #2
 8002c68:	d901      	bls.n	8002c6e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002c6a:	2303      	movs	r3, #3
 8002c6c:	e187      	b.n	8002f7e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002c6e:	4b1b      	ldr	r3, [pc, #108]	; (8002cdc <HAL_RCC_OscConfig+0x240>)
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	f003 0302 	and.w	r3, r3, #2
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d1f0      	bne.n	8002c5c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	f003 0308 	and.w	r3, r3, #8
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d036      	beq.n	8002cf4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	695b      	ldr	r3, [r3, #20]
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d016      	beq.n	8002cbc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002c8e:	4b15      	ldr	r3, [pc, #84]	; (8002ce4 <HAL_RCC_OscConfig+0x248>)
 8002c90:	2201      	movs	r2, #1
 8002c92:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c94:	f7fe ff38 	bl	8001b08 <HAL_GetTick>
 8002c98:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002c9a:	e008      	b.n	8002cae <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002c9c:	f7fe ff34 	bl	8001b08 <HAL_GetTick>
 8002ca0:	4602      	mov	r2, r0
 8002ca2:	693b      	ldr	r3, [r7, #16]
 8002ca4:	1ad3      	subs	r3, r2, r3
 8002ca6:	2b02      	cmp	r3, #2
 8002ca8:	d901      	bls.n	8002cae <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002caa:	2303      	movs	r3, #3
 8002cac:	e167      	b.n	8002f7e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002cae:	4b0b      	ldr	r3, [pc, #44]	; (8002cdc <HAL_RCC_OscConfig+0x240>)
 8002cb0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002cb2:	f003 0302 	and.w	r3, r3, #2
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d0f0      	beq.n	8002c9c <HAL_RCC_OscConfig+0x200>
 8002cba:	e01b      	b.n	8002cf4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002cbc:	4b09      	ldr	r3, [pc, #36]	; (8002ce4 <HAL_RCC_OscConfig+0x248>)
 8002cbe:	2200      	movs	r2, #0
 8002cc0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002cc2:	f7fe ff21 	bl	8001b08 <HAL_GetTick>
 8002cc6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002cc8:	e00e      	b.n	8002ce8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002cca:	f7fe ff1d 	bl	8001b08 <HAL_GetTick>
 8002cce:	4602      	mov	r2, r0
 8002cd0:	693b      	ldr	r3, [r7, #16]
 8002cd2:	1ad3      	subs	r3, r2, r3
 8002cd4:	2b02      	cmp	r3, #2
 8002cd6:	d907      	bls.n	8002ce8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002cd8:	2303      	movs	r3, #3
 8002cda:	e150      	b.n	8002f7e <HAL_RCC_OscConfig+0x4e2>
 8002cdc:	40023800 	.word	0x40023800
 8002ce0:	42470000 	.word	0x42470000
 8002ce4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002ce8:	4b88      	ldr	r3, [pc, #544]	; (8002f0c <HAL_RCC_OscConfig+0x470>)
 8002cea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002cec:	f003 0302 	and.w	r3, r3, #2
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d1ea      	bne.n	8002cca <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	f003 0304 	and.w	r3, r3, #4
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	f000 8097 	beq.w	8002e30 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002d02:	2300      	movs	r3, #0
 8002d04:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002d06:	4b81      	ldr	r3, [pc, #516]	; (8002f0c <HAL_RCC_OscConfig+0x470>)
 8002d08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d0a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d10f      	bne.n	8002d32 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002d12:	2300      	movs	r3, #0
 8002d14:	60bb      	str	r3, [r7, #8]
 8002d16:	4b7d      	ldr	r3, [pc, #500]	; (8002f0c <HAL_RCC_OscConfig+0x470>)
 8002d18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d1a:	4a7c      	ldr	r2, [pc, #496]	; (8002f0c <HAL_RCC_OscConfig+0x470>)
 8002d1c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002d20:	6413      	str	r3, [r2, #64]	; 0x40
 8002d22:	4b7a      	ldr	r3, [pc, #488]	; (8002f0c <HAL_RCC_OscConfig+0x470>)
 8002d24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d26:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d2a:	60bb      	str	r3, [r7, #8]
 8002d2c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002d2e:	2301      	movs	r3, #1
 8002d30:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d32:	4b77      	ldr	r3, [pc, #476]	; (8002f10 <HAL_RCC_OscConfig+0x474>)
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d118      	bne.n	8002d70 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002d3e:	4b74      	ldr	r3, [pc, #464]	; (8002f10 <HAL_RCC_OscConfig+0x474>)
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	4a73      	ldr	r2, [pc, #460]	; (8002f10 <HAL_RCC_OscConfig+0x474>)
 8002d44:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d48:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002d4a:	f7fe fedd 	bl	8001b08 <HAL_GetTick>
 8002d4e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d50:	e008      	b.n	8002d64 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002d52:	f7fe fed9 	bl	8001b08 <HAL_GetTick>
 8002d56:	4602      	mov	r2, r0
 8002d58:	693b      	ldr	r3, [r7, #16]
 8002d5a:	1ad3      	subs	r3, r2, r3
 8002d5c:	2b02      	cmp	r3, #2
 8002d5e:	d901      	bls.n	8002d64 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002d60:	2303      	movs	r3, #3
 8002d62:	e10c      	b.n	8002f7e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d64:	4b6a      	ldr	r3, [pc, #424]	; (8002f10 <HAL_RCC_OscConfig+0x474>)
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d0f0      	beq.n	8002d52 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	689b      	ldr	r3, [r3, #8]
 8002d74:	2b01      	cmp	r3, #1
 8002d76:	d106      	bne.n	8002d86 <HAL_RCC_OscConfig+0x2ea>
 8002d78:	4b64      	ldr	r3, [pc, #400]	; (8002f0c <HAL_RCC_OscConfig+0x470>)
 8002d7a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d7c:	4a63      	ldr	r2, [pc, #396]	; (8002f0c <HAL_RCC_OscConfig+0x470>)
 8002d7e:	f043 0301 	orr.w	r3, r3, #1
 8002d82:	6713      	str	r3, [r2, #112]	; 0x70
 8002d84:	e01c      	b.n	8002dc0 <HAL_RCC_OscConfig+0x324>
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	689b      	ldr	r3, [r3, #8]
 8002d8a:	2b05      	cmp	r3, #5
 8002d8c:	d10c      	bne.n	8002da8 <HAL_RCC_OscConfig+0x30c>
 8002d8e:	4b5f      	ldr	r3, [pc, #380]	; (8002f0c <HAL_RCC_OscConfig+0x470>)
 8002d90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d92:	4a5e      	ldr	r2, [pc, #376]	; (8002f0c <HAL_RCC_OscConfig+0x470>)
 8002d94:	f043 0304 	orr.w	r3, r3, #4
 8002d98:	6713      	str	r3, [r2, #112]	; 0x70
 8002d9a:	4b5c      	ldr	r3, [pc, #368]	; (8002f0c <HAL_RCC_OscConfig+0x470>)
 8002d9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d9e:	4a5b      	ldr	r2, [pc, #364]	; (8002f0c <HAL_RCC_OscConfig+0x470>)
 8002da0:	f043 0301 	orr.w	r3, r3, #1
 8002da4:	6713      	str	r3, [r2, #112]	; 0x70
 8002da6:	e00b      	b.n	8002dc0 <HAL_RCC_OscConfig+0x324>
 8002da8:	4b58      	ldr	r3, [pc, #352]	; (8002f0c <HAL_RCC_OscConfig+0x470>)
 8002daa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002dac:	4a57      	ldr	r2, [pc, #348]	; (8002f0c <HAL_RCC_OscConfig+0x470>)
 8002dae:	f023 0301 	bic.w	r3, r3, #1
 8002db2:	6713      	str	r3, [r2, #112]	; 0x70
 8002db4:	4b55      	ldr	r3, [pc, #340]	; (8002f0c <HAL_RCC_OscConfig+0x470>)
 8002db6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002db8:	4a54      	ldr	r2, [pc, #336]	; (8002f0c <HAL_RCC_OscConfig+0x470>)
 8002dba:	f023 0304 	bic.w	r3, r3, #4
 8002dbe:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	689b      	ldr	r3, [r3, #8]
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d015      	beq.n	8002df4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002dc8:	f7fe fe9e 	bl	8001b08 <HAL_GetTick>
 8002dcc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002dce:	e00a      	b.n	8002de6 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002dd0:	f7fe fe9a 	bl	8001b08 <HAL_GetTick>
 8002dd4:	4602      	mov	r2, r0
 8002dd6:	693b      	ldr	r3, [r7, #16]
 8002dd8:	1ad3      	subs	r3, r2, r3
 8002dda:	f241 3288 	movw	r2, #5000	; 0x1388
 8002dde:	4293      	cmp	r3, r2
 8002de0:	d901      	bls.n	8002de6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002de2:	2303      	movs	r3, #3
 8002de4:	e0cb      	b.n	8002f7e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002de6:	4b49      	ldr	r3, [pc, #292]	; (8002f0c <HAL_RCC_OscConfig+0x470>)
 8002de8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002dea:	f003 0302 	and.w	r3, r3, #2
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d0ee      	beq.n	8002dd0 <HAL_RCC_OscConfig+0x334>
 8002df2:	e014      	b.n	8002e1e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002df4:	f7fe fe88 	bl	8001b08 <HAL_GetTick>
 8002df8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002dfa:	e00a      	b.n	8002e12 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002dfc:	f7fe fe84 	bl	8001b08 <HAL_GetTick>
 8002e00:	4602      	mov	r2, r0
 8002e02:	693b      	ldr	r3, [r7, #16]
 8002e04:	1ad3      	subs	r3, r2, r3
 8002e06:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e0a:	4293      	cmp	r3, r2
 8002e0c:	d901      	bls.n	8002e12 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002e0e:	2303      	movs	r3, #3
 8002e10:	e0b5      	b.n	8002f7e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002e12:	4b3e      	ldr	r3, [pc, #248]	; (8002f0c <HAL_RCC_OscConfig+0x470>)
 8002e14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e16:	f003 0302 	and.w	r3, r3, #2
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d1ee      	bne.n	8002dfc <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002e1e:	7dfb      	ldrb	r3, [r7, #23]
 8002e20:	2b01      	cmp	r3, #1
 8002e22:	d105      	bne.n	8002e30 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002e24:	4b39      	ldr	r3, [pc, #228]	; (8002f0c <HAL_RCC_OscConfig+0x470>)
 8002e26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e28:	4a38      	ldr	r2, [pc, #224]	; (8002f0c <HAL_RCC_OscConfig+0x470>)
 8002e2a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002e2e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	699b      	ldr	r3, [r3, #24]
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	f000 80a1 	beq.w	8002f7c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002e3a:	4b34      	ldr	r3, [pc, #208]	; (8002f0c <HAL_RCC_OscConfig+0x470>)
 8002e3c:	689b      	ldr	r3, [r3, #8]
 8002e3e:	f003 030c 	and.w	r3, r3, #12
 8002e42:	2b08      	cmp	r3, #8
 8002e44:	d05c      	beq.n	8002f00 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	699b      	ldr	r3, [r3, #24]
 8002e4a:	2b02      	cmp	r3, #2
 8002e4c:	d141      	bne.n	8002ed2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e4e:	4b31      	ldr	r3, [pc, #196]	; (8002f14 <HAL_RCC_OscConfig+0x478>)
 8002e50:	2200      	movs	r2, #0
 8002e52:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e54:	f7fe fe58 	bl	8001b08 <HAL_GetTick>
 8002e58:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e5a:	e008      	b.n	8002e6e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002e5c:	f7fe fe54 	bl	8001b08 <HAL_GetTick>
 8002e60:	4602      	mov	r2, r0
 8002e62:	693b      	ldr	r3, [r7, #16]
 8002e64:	1ad3      	subs	r3, r2, r3
 8002e66:	2b02      	cmp	r3, #2
 8002e68:	d901      	bls.n	8002e6e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002e6a:	2303      	movs	r3, #3
 8002e6c:	e087      	b.n	8002f7e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e6e:	4b27      	ldr	r3, [pc, #156]	; (8002f0c <HAL_RCC_OscConfig+0x470>)
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d1f0      	bne.n	8002e5c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	69da      	ldr	r2, [r3, #28]
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	6a1b      	ldr	r3, [r3, #32]
 8002e82:	431a      	orrs	r2, r3
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e88:	019b      	lsls	r3, r3, #6
 8002e8a:	431a      	orrs	r2, r3
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e90:	085b      	lsrs	r3, r3, #1
 8002e92:	3b01      	subs	r3, #1
 8002e94:	041b      	lsls	r3, r3, #16
 8002e96:	431a      	orrs	r2, r3
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e9c:	061b      	lsls	r3, r3, #24
 8002e9e:	491b      	ldr	r1, [pc, #108]	; (8002f0c <HAL_RCC_OscConfig+0x470>)
 8002ea0:	4313      	orrs	r3, r2
 8002ea2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002ea4:	4b1b      	ldr	r3, [pc, #108]	; (8002f14 <HAL_RCC_OscConfig+0x478>)
 8002ea6:	2201      	movs	r2, #1
 8002ea8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002eaa:	f7fe fe2d 	bl	8001b08 <HAL_GetTick>
 8002eae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002eb0:	e008      	b.n	8002ec4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002eb2:	f7fe fe29 	bl	8001b08 <HAL_GetTick>
 8002eb6:	4602      	mov	r2, r0
 8002eb8:	693b      	ldr	r3, [r7, #16]
 8002eba:	1ad3      	subs	r3, r2, r3
 8002ebc:	2b02      	cmp	r3, #2
 8002ebe:	d901      	bls.n	8002ec4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002ec0:	2303      	movs	r3, #3
 8002ec2:	e05c      	b.n	8002f7e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002ec4:	4b11      	ldr	r3, [pc, #68]	; (8002f0c <HAL_RCC_OscConfig+0x470>)
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d0f0      	beq.n	8002eb2 <HAL_RCC_OscConfig+0x416>
 8002ed0:	e054      	b.n	8002f7c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ed2:	4b10      	ldr	r3, [pc, #64]	; (8002f14 <HAL_RCC_OscConfig+0x478>)
 8002ed4:	2200      	movs	r2, #0
 8002ed6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ed8:	f7fe fe16 	bl	8001b08 <HAL_GetTick>
 8002edc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002ede:	e008      	b.n	8002ef2 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002ee0:	f7fe fe12 	bl	8001b08 <HAL_GetTick>
 8002ee4:	4602      	mov	r2, r0
 8002ee6:	693b      	ldr	r3, [r7, #16]
 8002ee8:	1ad3      	subs	r3, r2, r3
 8002eea:	2b02      	cmp	r3, #2
 8002eec:	d901      	bls.n	8002ef2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002eee:	2303      	movs	r3, #3
 8002ef0:	e045      	b.n	8002f7e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002ef2:	4b06      	ldr	r3, [pc, #24]	; (8002f0c <HAL_RCC_OscConfig+0x470>)
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d1f0      	bne.n	8002ee0 <HAL_RCC_OscConfig+0x444>
 8002efe:	e03d      	b.n	8002f7c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	699b      	ldr	r3, [r3, #24]
 8002f04:	2b01      	cmp	r3, #1
 8002f06:	d107      	bne.n	8002f18 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002f08:	2301      	movs	r3, #1
 8002f0a:	e038      	b.n	8002f7e <HAL_RCC_OscConfig+0x4e2>
 8002f0c:	40023800 	.word	0x40023800
 8002f10:	40007000 	.word	0x40007000
 8002f14:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002f18:	4b1b      	ldr	r3, [pc, #108]	; (8002f88 <HAL_RCC_OscConfig+0x4ec>)
 8002f1a:	685b      	ldr	r3, [r3, #4]
 8002f1c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	699b      	ldr	r3, [r3, #24]
 8002f22:	2b01      	cmp	r3, #1
 8002f24:	d028      	beq.n	8002f78 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002f30:	429a      	cmp	r2, r3
 8002f32:	d121      	bne.n	8002f78 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f3e:	429a      	cmp	r2, r3
 8002f40:	d11a      	bne.n	8002f78 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002f42:	68fa      	ldr	r2, [r7, #12]
 8002f44:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002f48:	4013      	ands	r3, r2
 8002f4a:	687a      	ldr	r2, [r7, #4]
 8002f4c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002f4e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002f50:	4293      	cmp	r3, r2
 8002f52:	d111      	bne.n	8002f78 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f5e:	085b      	lsrs	r3, r3, #1
 8002f60:	3b01      	subs	r3, #1
 8002f62:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002f64:	429a      	cmp	r2, r3
 8002f66:	d107      	bne.n	8002f78 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f72:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002f74:	429a      	cmp	r2, r3
 8002f76:	d001      	beq.n	8002f7c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002f78:	2301      	movs	r3, #1
 8002f7a:	e000      	b.n	8002f7e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002f7c:	2300      	movs	r3, #0
}
 8002f7e:	4618      	mov	r0, r3
 8002f80:	3718      	adds	r7, #24
 8002f82:	46bd      	mov	sp, r7
 8002f84:	bd80      	pop	{r7, pc}
 8002f86:	bf00      	nop
 8002f88:	40023800 	.word	0x40023800

08002f8c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002f8c:	b580      	push	{r7, lr}
 8002f8e:	b084      	sub	sp, #16
 8002f90:	af00      	add	r7, sp, #0
 8002f92:	6078      	str	r0, [r7, #4]
 8002f94:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d101      	bne.n	8002fa0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002f9c:	2301      	movs	r3, #1
 8002f9e:	e0cc      	b.n	800313a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002fa0:	4b68      	ldr	r3, [pc, #416]	; (8003144 <HAL_RCC_ClockConfig+0x1b8>)
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	f003 030f 	and.w	r3, r3, #15
 8002fa8:	683a      	ldr	r2, [r7, #0]
 8002faa:	429a      	cmp	r2, r3
 8002fac:	d90c      	bls.n	8002fc8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002fae:	4b65      	ldr	r3, [pc, #404]	; (8003144 <HAL_RCC_ClockConfig+0x1b8>)
 8002fb0:	683a      	ldr	r2, [r7, #0]
 8002fb2:	b2d2      	uxtb	r2, r2
 8002fb4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002fb6:	4b63      	ldr	r3, [pc, #396]	; (8003144 <HAL_RCC_ClockConfig+0x1b8>)
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	f003 030f 	and.w	r3, r3, #15
 8002fbe:	683a      	ldr	r2, [r7, #0]
 8002fc0:	429a      	cmp	r2, r3
 8002fc2:	d001      	beq.n	8002fc8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002fc4:	2301      	movs	r3, #1
 8002fc6:	e0b8      	b.n	800313a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	f003 0302 	and.w	r3, r3, #2
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d020      	beq.n	8003016 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	f003 0304 	and.w	r3, r3, #4
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d005      	beq.n	8002fec <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002fe0:	4b59      	ldr	r3, [pc, #356]	; (8003148 <HAL_RCC_ClockConfig+0x1bc>)
 8002fe2:	689b      	ldr	r3, [r3, #8]
 8002fe4:	4a58      	ldr	r2, [pc, #352]	; (8003148 <HAL_RCC_ClockConfig+0x1bc>)
 8002fe6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002fea:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	f003 0308 	and.w	r3, r3, #8
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d005      	beq.n	8003004 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002ff8:	4b53      	ldr	r3, [pc, #332]	; (8003148 <HAL_RCC_ClockConfig+0x1bc>)
 8002ffa:	689b      	ldr	r3, [r3, #8]
 8002ffc:	4a52      	ldr	r2, [pc, #328]	; (8003148 <HAL_RCC_ClockConfig+0x1bc>)
 8002ffe:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003002:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003004:	4b50      	ldr	r3, [pc, #320]	; (8003148 <HAL_RCC_ClockConfig+0x1bc>)
 8003006:	689b      	ldr	r3, [r3, #8]
 8003008:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	689b      	ldr	r3, [r3, #8]
 8003010:	494d      	ldr	r1, [pc, #308]	; (8003148 <HAL_RCC_ClockConfig+0x1bc>)
 8003012:	4313      	orrs	r3, r2
 8003014:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	f003 0301 	and.w	r3, r3, #1
 800301e:	2b00      	cmp	r3, #0
 8003020:	d044      	beq.n	80030ac <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	685b      	ldr	r3, [r3, #4]
 8003026:	2b01      	cmp	r3, #1
 8003028:	d107      	bne.n	800303a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800302a:	4b47      	ldr	r3, [pc, #284]	; (8003148 <HAL_RCC_ClockConfig+0x1bc>)
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003032:	2b00      	cmp	r3, #0
 8003034:	d119      	bne.n	800306a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003036:	2301      	movs	r3, #1
 8003038:	e07f      	b.n	800313a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	685b      	ldr	r3, [r3, #4]
 800303e:	2b02      	cmp	r3, #2
 8003040:	d003      	beq.n	800304a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003046:	2b03      	cmp	r3, #3
 8003048:	d107      	bne.n	800305a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800304a:	4b3f      	ldr	r3, [pc, #252]	; (8003148 <HAL_RCC_ClockConfig+0x1bc>)
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003052:	2b00      	cmp	r3, #0
 8003054:	d109      	bne.n	800306a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003056:	2301      	movs	r3, #1
 8003058:	e06f      	b.n	800313a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800305a:	4b3b      	ldr	r3, [pc, #236]	; (8003148 <HAL_RCC_ClockConfig+0x1bc>)
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	f003 0302 	and.w	r3, r3, #2
 8003062:	2b00      	cmp	r3, #0
 8003064:	d101      	bne.n	800306a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003066:	2301      	movs	r3, #1
 8003068:	e067      	b.n	800313a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800306a:	4b37      	ldr	r3, [pc, #220]	; (8003148 <HAL_RCC_ClockConfig+0x1bc>)
 800306c:	689b      	ldr	r3, [r3, #8]
 800306e:	f023 0203 	bic.w	r2, r3, #3
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	685b      	ldr	r3, [r3, #4]
 8003076:	4934      	ldr	r1, [pc, #208]	; (8003148 <HAL_RCC_ClockConfig+0x1bc>)
 8003078:	4313      	orrs	r3, r2
 800307a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800307c:	f7fe fd44 	bl	8001b08 <HAL_GetTick>
 8003080:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003082:	e00a      	b.n	800309a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003084:	f7fe fd40 	bl	8001b08 <HAL_GetTick>
 8003088:	4602      	mov	r2, r0
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	1ad3      	subs	r3, r2, r3
 800308e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003092:	4293      	cmp	r3, r2
 8003094:	d901      	bls.n	800309a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003096:	2303      	movs	r3, #3
 8003098:	e04f      	b.n	800313a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800309a:	4b2b      	ldr	r3, [pc, #172]	; (8003148 <HAL_RCC_ClockConfig+0x1bc>)
 800309c:	689b      	ldr	r3, [r3, #8]
 800309e:	f003 020c 	and.w	r2, r3, #12
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	685b      	ldr	r3, [r3, #4]
 80030a6:	009b      	lsls	r3, r3, #2
 80030a8:	429a      	cmp	r2, r3
 80030aa:	d1eb      	bne.n	8003084 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80030ac:	4b25      	ldr	r3, [pc, #148]	; (8003144 <HAL_RCC_ClockConfig+0x1b8>)
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	f003 030f 	and.w	r3, r3, #15
 80030b4:	683a      	ldr	r2, [r7, #0]
 80030b6:	429a      	cmp	r2, r3
 80030b8:	d20c      	bcs.n	80030d4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80030ba:	4b22      	ldr	r3, [pc, #136]	; (8003144 <HAL_RCC_ClockConfig+0x1b8>)
 80030bc:	683a      	ldr	r2, [r7, #0]
 80030be:	b2d2      	uxtb	r2, r2
 80030c0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80030c2:	4b20      	ldr	r3, [pc, #128]	; (8003144 <HAL_RCC_ClockConfig+0x1b8>)
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	f003 030f 	and.w	r3, r3, #15
 80030ca:	683a      	ldr	r2, [r7, #0]
 80030cc:	429a      	cmp	r2, r3
 80030ce:	d001      	beq.n	80030d4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80030d0:	2301      	movs	r3, #1
 80030d2:	e032      	b.n	800313a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	f003 0304 	and.w	r3, r3, #4
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d008      	beq.n	80030f2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80030e0:	4b19      	ldr	r3, [pc, #100]	; (8003148 <HAL_RCC_ClockConfig+0x1bc>)
 80030e2:	689b      	ldr	r3, [r3, #8]
 80030e4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	68db      	ldr	r3, [r3, #12]
 80030ec:	4916      	ldr	r1, [pc, #88]	; (8003148 <HAL_RCC_ClockConfig+0x1bc>)
 80030ee:	4313      	orrs	r3, r2
 80030f0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	f003 0308 	and.w	r3, r3, #8
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d009      	beq.n	8003112 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80030fe:	4b12      	ldr	r3, [pc, #72]	; (8003148 <HAL_RCC_ClockConfig+0x1bc>)
 8003100:	689b      	ldr	r3, [r3, #8]
 8003102:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	691b      	ldr	r3, [r3, #16]
 800310a:	00db      	lsls	r3, r3, #3
 800310c:	490e      	ldr	r1, [pc, #56]	; (8003148 <HAL_RCC_ClockConfig+0x1bc>)
 800310e:	4313      	orrs	r3, r2
 8003110:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003112:	f000 f821 	bl	8003158 <HAL_RCC_GetSysClockFreq>
 8003116:	4602      	mov	r2, r0
 8003118:	4b0b      	ldr	r3, [pc, #44]	; (8003148 <HAL_RCC_ClockConfig+0x1bc>)
 800311a:	689b      	ldr	r3, [r3, #8]
 800311c:	091b      	lsrs	r3, r3, #4
 800311e:	f003 030f 	and.w	r3, r3, #15
 8003122:	490a      	ldr	r1, [pc, #40]	; (800314c <HAL_RCC_ClockConfig+0x1c0>)
 8003124:	5ccb      	ldrb	r3, [r1, r3]
 8003126:	fa22 f303 	lsr.w	r3, r2, r3
 800312a:	4a09      	ldr	r2, [pc, #36]	; (8003150 <HAL_RCC_ClockConfig+0x1c4>)
 800312c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800312e:	4b09      	ldr	r3, [pc, #36]	; (8003154 <HAL_RCC_ClockConfig+0x1c8>)
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	4618      	mov	r0, r3
 8003134:	f7fe fca4 	bl	8001a80 <HAL_InitTick>

  return HAL_OK;
 8003138:	2300      	movs	r3, #0
}
 800313a:	4618      	mov	r0, r3
 800313c:	3710      	adds	r7, #16
 800313e:	46bd      	mov	sp, r7
 8003140:	bd80      	pop	{r7, pc}
 8003142:	bf00      	nop
 8003144:	40023c00 	.word	0x40023c00
 8003148:	40023800 	.word	0x40023800
 800314c:	08005458 	.word	0x08005458
 8003150:	20000004 	.word	0x20000004
 8003154:	20000008 	.word	0x20000008

08003158 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003158:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800315c:	b090      	sub	sp, #64	; 0x40
 800315e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003160:	2300      	movs	r3, #0
 8003162:	637b      	str	r3, [r7, #52]	; 0x34
 8003164:	2300      	movs	r3, #0
 8003166:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003168:	2300      	movs	r3, #0
 800316a:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 800316c:	2300      	movs	r3, #0
 800316e:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003170:	4b59      	ldr	r3, [pc, #356]	; (80032d8 <HAL_RCC_GetSysClockFreq+0x180>)
 8003172:	689b      	ldr	r3, [r3, #8]
 8003174:	f003 030c 	and.w	r3, r3, #12
 8003178:	2b08      	cmp	r3, #8
 800317a:	d00d      	beq.n	8003198 <HAL_RCC_GetSysClockFreq+0x40>
 800317c:	2b08      	cmp	r3, #8
 800317e:	f200 80a1 	bhi.w	80032c4 <HAL_RCC_GetSysClockFreq+0x16c>
 8003182:	2b00      	cmp	r3, #0
 8003184:	d002      	beq.n	800318c <HAL_RCC_GetSysClockFreq+0x34>
 8003186:	2b04      	cmp	r3, #4
 8003188:	d003      	beq.n	8003192 <HAL_RCC_GetSysClockFreq+0x3a>
 800318a:	e09b      	b.n	80032c4 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800318c:	4b53      	ldr	r3, [pc, #332]	; (80032dc <HAL_RCC_GetSysClockFreq+0x184>)
 800318e:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8003190:	e09b      	b.n	80032ca <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003192:	4b53      	ldr	r3, [pc, #332]	; (80032e0 <HAL_RCC_GetSysClockFreq+0x188>)
 8003194:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003196:	e098      	b.n	80032ca <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003198:	4b4f      	ldr	r3, [pc, #316]	; (80032d8 <HAL_RCC_GetSysClockFreq+0x180>)
 800319a:	685b      	ldr	r3, [r3, #4]
 800319c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80031a0:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80031a2:	4b4d      	ldr	r3, [pc, #308]	; (80032d8 <HAL_RCC_GetSysClockFreq+0x180>)
 80031a4:	685b      	ldr	r3, [r3, #4]
 80031a6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d028      	beq.n	8003200 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80031ae:	4b4a      	ldr	r3, [pc, #296]	; (80032d8 <HAL_RCC_GetSysClockFreq+0x180>)
 80031b0:	685b      	ldr	r3, [r3, #4]
 80031b2:	099b      	lsrs	r3, r3, #6
 80031b4:	2200      	movs	r2, #0
 80031b6:	623b      	str	r3, [r7, #32]
 80031b8:	627a      	str	r2, [r7, #36]	; 0x24
 80031ba:	6a3b      	ldr	r3, [r7, #32]
 80031bc:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80031c0:	2100      	movs	r1, #0
 80031c2:	4b47      	ldr	r3, [pc, #284]	; (80032e0 <HAL_RCC_GetSysClockFreq+0x188>)
 80031c4:	fb03 f201 	mul.w	r2, r3, r1
 80031c8:	2300      	movs	r3, #0
 80031ca:	fb00 f303 	mul.w	r3, r0, r3
 80031ce:	4413      	add	r3, r2
 80031d0:	4a43      	ldr	r2, [pc, #268]	; (80032e0 <HAL_RCC_GetSysClockFreq+0x188>)
 80031d2:	fba0 1202 	umull	r1, r2, r0, r2
 80031d6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80031d8:	460a      	mov	r2, r1
 80031da:	62ba      	str	r2, [r7, #40]	; 0x28
 80031dc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80031de:	4413      	add	r3, r2
 80031e0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80031e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80031e4:	2200      	movs	r2, #0
 80031e6:	61bb      	str	r3, [r7, #24]
 80031e8:	61fa      	str	r2, [r7, #28]
 80031ea:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80031ee:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80031f2:	f7fd fc9b 	bl	8000b2c <__aeabi_uldivmod>
 80031f6:	4602      	mov	r2, r0
 80031f8:	460b      	mov	r3, r1
 80031fa:	4613      	mov	r3, r2
 80031fc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80031fe:	e053      	b.n	80032a8 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003200:	4b35      	ldr	r3, [pc, #212]	; (80032d8 <HAL_RCC_GetSysClockFreq+0x180>)
 8003202:	685b      	ldr	r3, [r3, #4]
 8003204:	099b      	lsrs	r3, r3, #6
 8003206:	2200      	movs	r2, #0
 8003208:	613b      	str	r3, [r7, #16]
 800320a:	617a      	str	r2, [r7, #20]
 800320c:	693b      	ldr	r3, [r7, #16]
 800320e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8003212:	f04f 0b00 	mov.w	fp, #0
 8003216:	4652      	mov	r2, sl
 8003218:	465b      	mov	r3, fp
 800321a:	f04f 0000 	mov.w	r0, #0
 800321e:	f04f 0100 	mov.w	r1, #0
 8003222:	0159      	lsls	r1, r3, #5
 8003224:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003228:	0150      	lsls	r0, r2, #5
 800322a:	4602      	mov	r2, r0
 800322c:	460b      	mov	r3, r1
 800322e:	ebb2 080a 	subs.w	r8, r2, sl
 8003232:	eb63 090b 	sbc.w	r9, r3, fp
 8003236:	f04f 0200 	mov.w	r2, #0
 800323a:	f04f 0300 	mov.w	r3, #0
 800323e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8003242:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8003246:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800324a:	ebb2 0408 	subs.w	r4, r2, r8
 800324e:	eb63 0509 	sbc.w	r5, r3, r9
 8003252:	f04f 0200 	mov.w	r2, #0
 8003256:	f04f 0300 	mov.w	r3, #0
 800325a:	00eb      	lsls	r3, r5, #3
 800325c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003260:	00e2      	lsls	r2, r4, #3
 8003262:	4614      	mov	r4, r2
 8003264:	461d      	mov	r5, r3
 8003266:	eb14 030a 	adds.w	r3, r4, sl
 800326a:	603b      	str	r3, [r7, #0]
 800326c:	eb45 030b 	adc.w	r3, r5, fp
 8003270:	607b      	str	r3, [r7, #4]
 8003272:	f04f 0200 	mov.w	r2, #0
 8003276:	f04f 0300 	mov.w	r3, #0
 800327a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800327e:	4629      	mov	r1, r5
 8003280:	028b      	lsls	r3, r1, #10
 8003282:	4621      	mov	r1, r4
 8003284:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003288:	4621      	mov	r1, r4
 800328a:	028a      	lsls	r2, r1, #10
 800328c:	4610      	mov	r0, r2
 800328e:	4619      	mov	r1, r3
 8003290:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003292:	2200      	movs	r2, #0
 8003294:	60bb      	str	r3, [r7, #8]
 8003296:	60fa      	str	r2, [r7, #12]
 8003298:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800329c:	f7fd fc46 	bl	8000b2c <__aeabi_uldivmod>
 80032a0:	4602      	mov	r2, r0
 80032a2:	460b      	mov	r3, r1
 80032a4:	4613      	mov	r3, r2
 80032a6:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80032a8:	4b0b      	ldr	r3, [pc, #44]	; (80032d8 <HAL_RCC_GetSysClockFreq+0x180>)
 80032aa:	685b      	ldr	r3, [r3, #4]
 80032ac:	0c1b      	lsrs	r3, r3, #16
 80032ae:	f003 0303 	and.w	r3, r3, #3
 80032b2:	3301      	adds	r3, #1
 80032b4:	005b      	lsls	r3, r3, #1
 80032b6:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 80032b8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80032ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80032c0:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80032c2:	e002      	b.n	80032ca <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80032c4:	4b05      	ldr	r3, [pc, #20]	; (80032dc <HAL_RCC_GetSysClockFreq+0x184>)
 80032c6:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80032c8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80032ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 80032cc:	4618      	mov	r0, r3
 80032ce:	3740      	adds	r7, #64	; 0x40
 80032d0:	46bd      	mov	sp, r7
 80032d2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80032d6:	bf00      	nop
 80032d8:	40023800 	.word	0x40023800
 80032dc:	00f42400 	.word	0x00f42400
 80032e0:	017d7840 	.word	0x017d7840

080032e4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80032e4:	b580      	push	{r7, lr}
 80032e6:	b082      	sub	sp, #8
 80032e8:	af00      	add	r7, sp, #0
 80032ea:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d101      	bne.n	80032f6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80032f2:	2301      	movs	r3, #1
 80032f4:	e041      	b.n	800337a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80032fc:	b2db      	uxtb	r3, r3
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d106      	bne.n	8003310 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	2200      	movs	r2, #0
 8003306:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800330a:	6878      	ldr	r0, [r7, #4]
 800330c:	f7fe fa7c 	bl	8001808 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	2202      	movs	r2, #2
 8003314:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681a      	ldr	r2, [r3, #0]
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	3304      	adds	r3, #4
 8003320:	4619      	mov	r1, r3
 8003322:	4610      	mov	r0, r2
 8003324:	f000 fc12 	bl	8003b4c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	2201      	movs	r2, #1
 800332c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	2201      	movs	r2, #1
 8003334:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	2201      	movs	r2, #1
 800333c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	2201      	movs	r2, #1
 8003344:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	2201      	movs	r2, #1
 800334c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	2201      	movs	r2, #1
 8003354:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	2201      	movs	r2, #1
 800335c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	2201      	movs	r2, #1
 8003364:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	2201      	movs	r2, #1
 800336c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	2201      	movs	r2, #1
 8003374:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003378:	2300      	movs	r3, #0
}
 800337a:	4618      	mov	r0, r3
 800337c:	3708      	adds	r7, #8
 800337e:	46bd      	mov	sp, r7
 8003380:	bd80      	pop	{r7, pc}

08003382 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003382:	b580      	push	{r7, lr}
 8003384:	b082      	sub	sp, #8
 8003386:	af00      	add	r7, sp, #0
 8003388:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	2b00      	cmp	r3, #0
 800338e:	d101      	bne.n	8003394 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003390:	2301      	movs	r3, #1
 8003392:	e041      	b.n	8003418 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800339a:	b2db      	uxtb	r3, r3
 800339c:	2b00      	cmp	r3, #0
 800339e:	d106      	bne.n	80033ae <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	2200      	movs	r2, #0
 80033a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80033a8:	6878      	ldr	r0, [r7, #4]
 80033aa:	f000 f839 	bl	8003420 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	2202      	movs	r2, #2
 80033b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681a      	ldr	r2, [r3, #0]
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	3304      	adds	r3, #4
 80033be:	4619      	mov	r1, r3
 80033c0:	4610      	mov	r0, r2
 80033c2:	f000 fbc3 	bl	8003b4c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	2201      	movs	r2, #1
 80033ca:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	2201      	movs	r2, #1
 80033d2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	2201      	movs	r2, #1
 80033da:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	2201      	movs	r2, #1
 80033e2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	2201      	movs	r2, #1
 80033ea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	2201      	movs	r2, #1
 80033f2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	2201      	movs	r2, #1
 80033fa:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	2201      	movs	r2, #1
 8003402:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	2201      	movs	r2, #1
 800340a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	2201      	movs	r2, #1
 8003412:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003416:	2300      	movs	r3, #0
}
 8003418:	4618      	mov	r0, r3
 800341a:	3708      	adds	r7, #8
 800341c:	46bd      	mov	sp, r7
 800341e:	bd80      	pop	{r7, pc}

08003420 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003420:	b480      	push	{r7}
 8003422:	b083      	sub	sp, #12
 8003424:	af00      	add	r7, sp, #0
 8003426:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003428:	bf00      	nop
 800342a:	370c      	adds	r7, #12
 800342c:	46bd      	mov	sp, r7
 800342e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003432:	4770      	bx	lr

08003434 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003434:	b580      	push	{r7, lr}
 8003436:	b084      	sub	sp, #16
 8003438:	af00      	add	r7, sp, #0
 800343a:	6078      	str	r0, [r7, #4]
 800343c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800343e:	683b      	ldr	r3, [r7, #0]
 8003440:	2b00      	cmp	r3, #0
 8003442:	d109      	bne.n	8003458 <HAL_TIM_PWM_Start+0x24>
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800344a:	b2db      	uxtb	r3, r3
 800344c:	2b01      	cmp	r3, #1
 800344e:	bf14      	ite	ne
 8003450:	2301      	movne	r3, #1
 8003452:	2300      	moveq	r3, #0
 8003454:	b2db      	uxtb	r3, r3
 8003456:	e022      	b.n	800349e <HAL_TIM_PWM_Start+0x6a>
 8003458:	683b      	ldr	r3, [r7, #0]
 800345a:	2b04      	cmp	r3, #4
 800345c:	d109      	bne.n	8003472 <HAL_TIM_PWM_Start+0x3e>
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003464:	b2db      	uxtb	r3, r3
 8003466:	2b01      	cmp	r3, #1
 8003468:	bf14      	ite	ne
 800346a:	2301      	movne	r3, #1
 800346c:	2300      	moveq	r3, #0
 800346e:	b2db      	uxtb	r3, r3
 8003470:	e015      	b.n	800349e <HAL_TIM_PWM_Start+0x6a>
 8003472:	683b      	ldr	r3, [r7, #0]
 8003474:	2b08      	cmp	r3, #8
 8003476:	d109      	bne.n	800348c <HAL_TIM_PWM_Start+0x58>
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800347e:	b2db      	uxtb	r3, r3
 8003480:	2b01      	cmp	r3, #1
 8003482:	bf14      	ite	ne
 8003484:	2301      	movne	r3, #1
 8003486:	2300      	moveq	r3, #0
 8003488:	b2db      	uxtb	r3, r3
 800348a:	e008      	b.n	800349e <HAL_TIM_PWM_Start+0x6a>
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003492:	b2db      	uxtb	r3, r3
 8003494:	2b01      	cmp	r3, #1
 8003496:	bf14      	ite	ne
 8003498:	2301      	movne	r3, #1
 800349a:	2300      	moveq	r3, #0
 800349c:	b2db      	uxtb	r3, r3
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d001      	beq.n	80034a6 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80034a2:	2301      	movs	r3, #1
 80034a4:	e07c      	b.n	80035a0 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80034a6:	683b      	ldr	r3, [r7, #0]
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d104      	bne.n	80034b6 <HAL_TIM_PWM_Start+0x82>
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	2202      	movs	r2, #2
 80034b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80034b4:	e013      	b.n	80034de <HAL_TIM_PWM_Start+0xaa>
 80034b6:	683b      	ldr	r3, [r7, #0]
 80034b8:	2b04      	cmp	r3, #4
 80034ba:	d104      	bne.n	80034c6 <HAL_TIM_PWM_Start+0x92>
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	2202      	movs	r2, #2
 80034c0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80034c4:	e00b      	b.n	80034de <HAL_TIM_PWM_Start+0xaa>
 80034c6:	683b      	ldr	r3, [r7, #0]
 80034c8:	2b08      	cmp	r3, #8
 80034ca:	d104      	bne.n	80034d6 <HAL_TIM_PWM_Start+0xa2>
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	2202      	movs	r2, #2
 80034d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80034d4:	e003      	b.n	80034de <HAL_TIM_PWM_Start+0xaa>
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	2202      	movs	r2, #2
 80034da:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	2201      	movs	r2, #1
 80034e4:	6839      	ldr	r1, [r7, #0]
 80034e6:	4618      	mov	r0, r3
 80034e8:	f000 fe1a 	bl	8004120 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	4a2d      	ldr	r2, [pc, #180]	; (80035a8 <HAL_TIM_PWM_Start+0x174>)
 80034f2:	4293      	cmp	r3, r2
 80034f4:	d004      	beq.n	8003500 <HAL_TIM_PWM_Start+0xcc>
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	4a2c      	ldr	r2, [pc, #176]	; (80035ac <HAL_TIM_PWM_Start+0x178>)
 80034fc:	4293      	cmp	r3, r2
 80034fe:	d101      	bne.n	8003504 <HAL_TIM_PWM_Start+0xd0>
 8003500:	2301      	movs	r3, #1
 8003502:	e000      	b.n	8003506 <HAL_TIM_PWM_Start+0xd2>
 8003504:	2300      	movs	r3, #0
 8003506:	2b00      	cmp	r3, #0
 8003508:	d007      	beq.n	800351a <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003518:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	4a22      	ldr	r2, [pc, #136]	; (80035a8 <HAL_TIM_PWM_Start+0x174>)
 8003520:	4293      	cmp	r3, r2
 8003522:	d022      	beq.n	800356a <HAL_TIM_PWM_Start+0x136>
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800352c:	d01d      	beq.n	800356a <HAL_TIM_PWM_Start+0x136>
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	4a1f      	ldr	r2, [pc, #124]	; (80035b0 <HAL_TIM_PWM_Start+0x17c>)
 8003534:	4293      	cmp	r3, r2
 8003536:	d018      	beq.n	800356a <HAL_TIM_PWM_Start+0x136>
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	4a1d      	ldr	r2, [pc, #116]	; (80035b4 <HAL_TIM_PWM_Start+0x180>)
 800353e:	4293      	cmp	r3, r2
 8003540:	d013      	beq.n	800356a <HAL_TIM_PWM_Start+0x136>
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	4a1c      	ldr	r2, [pc, #112]	; (80035b8 <HAL_TIM_PWM_Start+0x184>)
 8003548:	4293      	cmp	r3, r2
 800354a:	d00e      	beq.n	800356a <HAL_TIM_PWM_Start+0x136>
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	4a16      	ldr	r2, [pc, #88]	; (80035ac <HAL_TIM_PWM_Start+0x178>)
 8003552:	4293      	cmp	r3, r2
 8003554:	d009      	beq.n	800356a <HAL_TIM_PWM_Start+0x136>
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	4a18      	ldr	r2, [pc, #96]	; (80035bc <HAL_TIM_PWM_Start+0x188>)
 800355c:	4293      	cmp	r3, r2
 800355e:	d004      	beq.n	800356a <HAL_TIM_PWM_Start+0x136>
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	4a16      	ldr	r2, [pc, #88]	; (80035c0 <HAL_TIM_PWM_Start+0x18c>)
 8003566:	4293      	cmp	r3, r2
 8003568:	d111      	bne.n	800358e <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	689b      	ldr	r3, [r3, #8]
 8003570:	f003 0307 	and.w	r3, r3, #7
 8003574:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	2b06      	cmp	r3, #6
 800357a:	d010      	beq.n	800359e <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	681a      	ldr	r2, [r3, #0]
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	f042 0201 	orr.w	r2, r2, #1
 800358a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800358c:	e007      	b.n	800359e <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	681a      	ldr	r2, [r3, #0]
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	f042 0201 	orr.w	r2, r2, #1
 800359c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800359e:	2300      	movs	r3, #0
}
 80035a0:	4618      	mov	r0, r3
 80035a2:	3710      	adds	r7, #16
 80035a4:	46bd      	mov	sp, r7
 80035a6:	bd80      	pop	{r7, pc}
 80035a8:	40010000 	.word	0x40010000
 80035ac:	40010400 	.word	0x40010400
 80035b0:	40000400 	.word	0x40000400
 80035b4:	40000800 	.word	0x40000800
 80035b8:	40000c00 	.word	0x40000c00
 80035bc:	40014000 	.word	0x40014000
 80035c0:	40001800 	.word	0x40001800

080035c4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80035c4:	b580      	push	{r7, lr}
 80035c6:	b082      	sub	sp, #8
 80035c8:	af00      	add	r7, sp, #0
 80035ca:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	691b      	ldr	r3, [r3, #16]
 80035d2:	f003 0302 	and.w	r3, r3, #2
 80035d6:	2b02      	cmp	r3, #2
 80035d8:	d122      	bne.n	8003620 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	68db      	ldr	r3, [r3, #12]
 80035e0:	f003 0302 	and.w	r3, r3, #2
 80035e4:	2b02      	cmp	r3, #2
 80035e6:	d11b      	bne.n	8003620 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	f06f 0202 	mvn.w	r2, #2
 80035f0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	2201      	movs	r2, #1
 80035f6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	699b      	ldr	r3, [r3, #24]
 80035fe:	f003 0303 	and.w	r3, r3, #3
 8003602:	2b00      	cmp	r3, #0
 8003604:	d003      	beq.n	800360e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003606:	6878      	ldr	r0, [r7, #4]
 8003608:	f000 fa81 	bl	8003b0e <HAL_TIM_IC_CaptureCallback>
 800360c:	e005      	b.n	800361a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800360e:	6878      	ldr	r0, [r7, #4]
 8003610:	f000 fa73 	bl	8003afa <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003614:	6878      	ldr	r0, [r7, #4]
 8003616:	f000 fa84 	bl	8003b22 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	2200      	movs	r2, #0
 800361e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	691b      	ldr	r3, [r3, #16]
 8003626:	f003 0304 	and.w	r3, r3, #4
 800362a:	2b04      	cmp	r3, #4
 800362c:	d122      	bne.n	8003674 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	68db      	ldr	r3, [r3, #12]
 8003634:	f003 0304 	and.w	r3, r3, #4
 8003638:	2b04      	cmp	r3, #4
 800363a:	d11b      	bne.n	8003674 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	f06f 0204 	mvn.w	r2, #4
 8003644:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	2202      	movs	r2, #2
 800364a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	699b      	ldr	r3, [r3, #24]
 8003652:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003656:	2b00      	cmp	r3, #0
 8003658:	d003      	beq.n	8003662 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800365a:	6878      	ldr	r0, [r7, #4]
 800365c:	f000 fa57 	bl	8003b0e <HAL_TIM_IC_CaptureCallback>
 8003660:	e005      	b.n	800366e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003662:	6878      	ldr	r0, [r7, #4]
 8003664:	f000 fa49 	bl	8003afa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003668:	6878      	ldr	r0, [r7, #4]
 800366a:	f000 fa5a 	bl	8003b22 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	2200      	movs	r2, #0
 8003672:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	691b      	ldr	r3, [r3, #16]
 800367a:	f003 0308 	and.w	r3, r3, #8
 800367e:	2b08      	cmp	r3, #8
 8003680:	d122      	bne.n	80036c8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	68db      	ldr	r3, [r3, #12]
 8003688:	f003 0308 	and.w	r3, r3, #8
 800368c:	2b08      	cmp	r3, #8
 800368e:	d11b      	bne.n	80036c8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	f06f 0208 	mvn.w	r2, #8
 8003698:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	2204      	movs	r2, #4
 800369e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	69db      	ldr	r3, [r3, #28]
 80036a6:	f003 0303 	and.w	r3, r3, #3
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d003      	beq.n	80036b6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80036ae:	6878      	ldr	r0, [r7, #4]
 80036b0:	f000 fa2d 	bl	8003b0e <HAL_TIM_IC_CaptureCallback>
 80036b4:	e005      	b.n	80036c2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80036b6:	6878      	ldr	r0, [r7, #4]
 80036b8:	f000 fa1f 	bl	8003afa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80036bc:	6878      	ldr	r0, [r7, #4]
 80036be:	f000 fa30 	bl	8003b22 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	2200      	movs	r2, #0
 80036c6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	691b      	ldr	r3, [r3, #16]
 80036ce:	f003 0310 	and.w	r3, r3, #16
 80036d2:	2b10      	cmp	r3, #16
 80036d4:	d122      	bne.n	800371c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	68db      	ldr	r3, [r3, #12]
 80036dc:	f003 0310 	and.w	r3, r3, #16
 80036e0:	2b10      	cmp	r3, #16
 80036e2:	d11b      	bne.n	800371c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	f06f 0210 	mvn.w	r2, #16
 80036ec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	2208      	movs	r2, #8
 80036f2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	69db      	ldr	r3, [r3, #28]
 80036fa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d003      	beq.n	800370a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003702:	6878      	ldr	r0, [r7, #4]
 8003704:	f000 fa03 	bl	8003b0e <HAL_TIM_IC_CaptureCallback>
 8003708:	e005      	b.n	8003716 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800370a:	6878      	ldr	r0, [r7, #4]
 800370c:	f000 f9f5 	bl	8003afa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003710:	6878      	ldr	r0, [r7, #4]
 8003712:	f000 fa06 	bl	8003b22 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	2200      	movs	r2, #0
 800371a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	691b      	ldr	r3, [r3, #16]
 8003722:	f003 0301 	and.w	r3, r3, #1
 8003726:	2b01      	cmp	r3, #1
 8003728:	d10e      	bne.n	8003748 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	68db      	ldr	r3, [r3, #12]
 8003730:	f003 0301 	and.w	r3, r3, #1
 8003734:	2b01      	cmp	r3, #1
 8003736:	d107      	bne.n	8003748 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	f06f 0201 	mvn.w	r2, #1
 8003740:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003742:	6878      	ldr	r0, [r7, #4]
 8003744:	f000 f9cf 	bl	8003ae6 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	691b      	ldr	r3, [r3, #16]
 800374e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003752:	2b80      	cmp	r3, #128	; 0x80
 8003754:	d10e      	bne.n	8003774 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	68db      	ldr	r3, [r3, #12]
 800375c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003760:	2b80      	cmp	r3, #128	; 0x80
 8003762:	d107      	bne.n	8003774 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800376c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800376e:	6878      	ldr	r0, [r7, #4]
 8003770:	f000 fd82 	bl	8004278 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	691b      	ldr	r3, [r3, #16]
 800377a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800377e:	2b40      	cmp	r3, #64	; 0x40
 8003780:	d10e      	bne.n	80037a0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	68db      	ldr	r3, [r3, #12]
 8003788:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800378c:	2b40      	cmp	r3, #64	; 0x40
 800378e:	d107      	bne.n	80037a0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003798:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800379a:	6878      	ldr	r0, [r7, #4]
 800379c:	f000 f9cb 	bl	8003b36 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	691b      	ldr	r3, [r3, #16]
 80037a6:	f003 0320 	and.w	r3, r3, #32
 80037aa:	2b20      	cmp	r3, #32
 80037ac:	d10e      	bne.n	80037cc <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	68db      	ldr	r3, [r3, #12]
 80037b4:	f003 0320 	and.w	r3, r3, #32
 80037b8:	2b20      	cmp	r3, #32
 80037ba:	d107      	bne.n	80037cc <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	f06f 0220 	mvn.w	r2, #32
 80037c4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80037c6:	6878      	ldr	r0, [r7, #4]
 80037c8:	f000 fd4c 	bl	8004264 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80037cc:	bf00      	nop
 80037ce:	3708      	adds	r7, #8
 80037d0:	46bd      	mov	sp, r7
 80037d2:	bd80      	pop	{r7, pc}

080037d4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80037d4:	b580      	push	{r7, lr}
 80037d6:	b086      	sub	sp, #24
 80037d8:	af00      	add	r7, sp, #0
 80037da:	60f8      	str	r0, [r7, #12]
 80037dc:	60b9      	str	r1, [r7, #8]
 80037de:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80037e0:	2300      	movs	r3, #0
 80037e2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80037ea:	2b01      	cmp	r3, #1
 80037ec:	d101      	bne.n	80037f2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80037ee:	2302      	movs	r3, #2
 80037f0:	e0ae      	b.n	8003950 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	2201      	movs	r2, #1
 80037f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	2b0c      	cmp	r3, #12
 80037fe:	f200 809f 	bhi.w	8003940 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8003802:	a201      	add	r2, pc, #4	; (adr r2, 8003808 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003804:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003808:	0800383d 	.word	0x0800383d
 800380c:	08003941 	.word	0x08003941
 8003810:	08003941 	.word	0x08003941
 8003814:	08003941 	.word	0x08003941
 8003818:	0800387d 	.word	0x0800387d
 800381c:	08003941 	.word	0x08003941
 8003820:	08003941 	.word	0x08003941
 8003824:	08003941 	.word	0x08003941
 8003828:	080038bf 	.word	0x080038bf
 800382c:	08003941 	.word	0x08003941
 8003830:	08003941 	.word	0x08003941
 8003834:	08003941 	.word	0x08003941
 8003838:	080038ff 	.word	0x080038ff
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	68b9      	ldr	r1, [r7, #8]
 8003842:	4618      	mov	r0, r3
 8003844:	f000 fa22 	bl	8003c8c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	699a      	ldr	r2, [r3, #24]
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	f042 0208 	orr.w	r2, r2, #8
 8003856:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	699a      	ldr	r2, [r3, #24]
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	f022 0204 	bic.w	r2, r2, #4
 8003866:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	6999      	ldr	r1, [r3, #24]
 800386e:	68bb      	ldr	r3, [r7, #8]
 8003870:	691a      	ldr	r2, [r3, #16]
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	430a      	orrs	r2, r1
 8003878:	619a      	str	r2, [r3, #24]
      break;
 800387a:	e064      	b.n	8003946 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	68b9      	ldr	r1, [r7, #8]
 8003882:	4618      	mov	r0, r3
 8003884:	f000 fa72 	bl	8003d6c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	699a      	ldr	r2, [r3, #24]
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003896:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	699a      	ldr	r2, [r3, #24]
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80038a6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	6999      	ldr	r1, [r3, #24]
 80038ae:	68bb      	ldr	r3, [r7, #8]
 80038b0:	691b      	ldr	r3, [r3, #16]
 80038b2:	021a      	lsls	r2, r3, #8
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	430a      	orrs	r2, r1
 80038ba:	619a      	str	r2, [r3, #24]
      break;
 80038bc:	e043      	b.n	8003946 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	68b9      	ldr	r1, [r7, #8]
 80038c4:	4618      	mov	r0, r3
 80038c6:	f000 fac7 	bl	8003e58 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	69da      	ldr	r2, [r3, #28]
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	f042 0208 	orr.w	r2, r2, #8
 80038d8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	69da      	ldr	r2, [r3, #28]
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	f022 0204 	bic.w	r2, r2, #4
 80038e8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	69d9      	ldr	r1, [r3, #28]
 80038f0:	68bb      	ldr	r3, [r7, #8]
 80038f2:	691a      	ldr	r2, [r3, #16]
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	430a      	orrs	r2, r1
 80038fa:	61da      	str	r2, [r3, #28]
      break;
 80038fc:	e023      	b.n	8003946 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	68b9      	ldr	r1, [r7, #8]
 8003904:	4618      	mov	r0, r3
 8003906:	f000 fb1b 	bl	8003f40 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	69da      	ldr	r2, [r3, #28]
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003918:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	69da      	ldr	r2, [r3, #28]
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003928:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	69d9      	ldr	r1, [r3, #28]
 8003930:	68bb      	ldr	r3, [r7, #8]
 8003932:	691b      	ldr	r3, [r3, #16]
 8003934:	021a      	lsls	r2, r3, #8
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	430a      	orrs	r2, r1
 800393c:	61da      	str	r2, [r3, #28]
      break;
 800393e:	e002      	b.n	8003946 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003940:	2301      	movs	r3, #1
 8003942:	75fb      	strb	r3, [r7, #23]
      break;
 8003944:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	2200      	movs	r2, #0
 800394a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800394e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003950:	4618      	mov	r0, r3
 8003952:	3718      	adds	r7, #24
 8003954:	46bd      	mov	sp, r7
 8003956:	bd80      	pop	{r7, pc}

08003958 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003958:	b580      	push	{r7, lr}
 800395a:	b084      	sub	sp, #16
 800395c:	af00      	add	r7, sp, #0
 800395e:	6078      	str	r0, [r7, #4]
 8003960:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003962:	2300      	movs	r3, #0
 8003964:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800396c:	2b01      	cmp	r3, #1
 800396e:	d101      	bne.n	8003974 <HAL_TIM_ConfigClockSource+0x1c>
 8003970:	2302      	movs	r3, #2
 8003972:	e0b4      	b.n	8003ade <HAL_TIM_ConfigClockSource+0x186>
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	2201      	movs	r2, #1
 8003978:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	2202      	movs	r2, #2
 8003980:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	689b      	ldr	r3, [r3, #8]
 800398a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800398c:	68bb      	ldr	r3, [r7, #8]
 800398e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003992:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003994:	68bb      	ldr	r3, [r7, #8]
 8003996:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800399a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	68ba      	ldr	r2, [r7, #8]
 80039a2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80039a4:	683b      	ldr	r3, [r7, #0]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80039ac:	d03e      	beq.n	8003a2c <HAL_TIM_ConfigClockSource+0xd4>
 80039ae:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80039b2:	f200 8087 	bhi.w	8003ac4 <HAL_TIM_ConfigClockSource+0x16c>
 80039b6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80039ba:	f000 8086 	beq.w	8003aca <HAL_TIM_ConfigClockSource+0x172>
 80039be:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80039c2:	d87f      	bhi.n	8003ac4 <HAL_TIM_ConfigClockSource+0x16c>
 80039c4:	2b70      	cmp	r3, #112	; 0x70
 80039c6:	d01a      	beq.n	80039fe <HAL_TIM_ConfigClockSource+0xa6>
 80039c8:	2b70      	cmp	r3, #112	; 0x70
 80039ca:	d87b      	bhi.n	8003ac4 <HAL_TIM_ConfigClockSource+0x16c>
 80039cc:	2b60      	cmp	r3, #96	; 0x60
 80039ce:	d050      	beq.n	8003a72 <HAL_TIM_ConfigClockSource+0x11a>
 80039d0:	2b60      	cmp	r3, #96	; 0x60
 80039d2:	d877      	bhi.n	8003ac4 <HAL_TIM_ConfigClockSource+0x16c>
 80039d4:	2b50      	cmp	r3, #80	; 0x50
 80039d6:	d03c      	beq.n	8003a52 <HAL_TIM_ConfigClockSource+0xfa>
 80039d8:	2b50      	cmp	r3, #80	; 0x50
 80039da:	d873      	bhi.n	8003ac4 <HAL_TIM_ConfigClockSource+0x16c>
 80039dc:	2b40      	cmp	r3, #64	; 0x40
 80039de:	d058      	beq.n	8003a92 <HAL_TIM_ConfigClockSource+0x13a>
 80039e0:	2b40      	cmp	r3, #64	; 0x40
 80039e2:	d86f      	bhi.n	8003ac4 <HAL_TIM_ConfigClockSource+0x16c>
 80039e4:	2b30      	cmp	r3, #48	; 0x30
 80039e6:	d064      	beq.n	8003ab2 <HAL_TIM_ConfigClockSource+0x15a>
 80039e8:	2b30      	cmp	r3, #48	; 0x30
 80039ea:	d86b      	bhi.n	8003ac4 <HAL_TIM_ConfigClockSource+0x16c>
 80039ec:	2b20      	cmp	r3, #32
 80039ee:	d060      	beq.n	8003ab2 <HAL_TIM_ConfigClockSource+0x15a>
 80039f0:	2b20      	cmp	r3, #32
 80039f2:	d867      	bhi.n	8003ac4 <HAL_TIM_ConfigClockSource+0x16c>
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d05c      	beq.n	8003ab2 <HAL_TIM_ConfigClockSource+0x15a>
 80039f8:	2b10      	cmp	r3, #16
 80039fa:	d05a      	beq.n	8003ab2 <HAL_TIM_ConfigClockSource+0x15a>
 80039fc:	e062      	b.n	8003ac4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	6818      	ldr	r0, [r3, #0]
 8003a02:	683b      	ldr	r3, [r7, #0]
 8003a04:	6899      	ldr	r1, [r3, #8]
 8003a06:	683b      	ldr	r3, [r7, #0]
 8003a08:	685a      	ldr	r2, [r3, #4]
 8003a0a:	683b      	ldr	r3, [r7, #0]
 8003a0c:	68db      	ldr	r3, [r3, #12]
 8003a0e:	f000 fb67 	bl	80040e0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	689b      	ldr	r3, [r3, #8]
 8003a18:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003a1a:	68bb      	ldr	r3, [r7, #8]
 8003a1c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003a20:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	68ba      	ldr	r2, [r7, #8]
 8003a28:	609a      	str	r2, [r3, #8]
      break;
 8003a2a:	e04f      	b.n	8003acc <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	6818      	ldr	r0, [r3, #0]
 8003a30:	683b      	ldr	r3, [r7, #0]
 8003a32:	6899      	ldr	r1, [r3, #8]
 8003a34:	683b      	ldr	r3, [r7, #0]
 8003a36:	685a      	ldr	r2, [r3, #4]
 8003a38:	683b      	ldr	r3, [r7, #0]
 8003a3a:	68db      	ldr	r3, [r3, #12]
 8003a3c:	f000 fb50 	bl	80040e0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	689a      	ldr	r2, [r3, #8]
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003a4e:	609a      	str	r2, [r3, #8]
      break;
 8003a50:	e03c      	b.n	8003acc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	6818      	ldr	r0, [r3, #0]
 8003a56:	683b      	ldr	r3, [r7, #0]
 8003a58:	6859      	ldr	r1, [r3, #4]
 8003a5a:	683b      	ldr	r3, [r7, #0]
 8003a5c:	68db      	ldr	r3, [r3, #12]
 8003a5e:	461a      	mov	r2, r3
 8003a60:	f000 fac4 	bl	8003fec <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	2150      	movs	r1, #80	; 0x50
 8003a6a:	4618      	mov	r0, r3
 8003a6c:	f000 fb1d 	bl	80040aa <TIM_ITRx_SetConfig>
      break;
 8003a70:	e02c      	b.n	8003acc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	6818      	ldr	r0, [r3, #0]
 8003a76:	683b      	ldr	r3, [r7, #0]
 8003a78:	6859      	ldr	r1, [r3, #4]
 8003a7a:	683b      	ldr	r3, [r7, #0]
 8003a7c:	68db      	ldr	r3, [r3, #12]
 8003a7e:	461a      	mov	r2, r3
 8003a80:	f000 fae3 	bl	800404a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	2160      	movs	r1, #96	; 0x60
 8003a8a:	4618      	mov	r0, r3
 8003a8c:	f000 fb0d 	bl	80040aa <TIM_ITRx_SetConfig>
      break;
 8003a90:	e01c      	b.n	8003acc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	6818      	ldr	r0, [r3, #0]
 8003a96:	683b      	ldr	r3, [r7, #0]
 8003a98:	6859      	ldr	r1, [r3, #4]
 8003a9a:	683b      	ldr	r3, [r7, #0]
 8003a9c:	68db      	ldr	r3, [r3, #12]
 8003a9e:	461a      	mov	r2, r3
 8003aa0:	f000 faa4 	bl	8003fec <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	2140      	movs	r1, #64	; 0x40
 8003aaa:	4618      	mov	r0, r3
 8003aac:	f000 fafd 	bl	80040aa <TIM_ITRx_SetConfig>
      break;
 8003ab0:	e00c      	b.n	8003acc <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681a      	ldr	r2, [r3, #0]
 8003ab6:	683b      	ldr	r3, [r7, #0]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	4619      	mov	r1, r3
 8003abc:	4610      	mov	r0, r2
 8003abe:	f000 faf4 	bl	80040aa <TIM_ITRx_SetConfig>
      break;
 8003ac2:	e003      	b.n	8003acc <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003ac4:	2301      	movs	r3, #1
 8003ac6:	73fb      	strb	r3, [r7, #15]
      break;
 8003ac8:	e000      	b.n	8003acc <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003aca:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	2201      	movs	r2, #1
 8003ad0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	2200      	movs	r2, #0
 8003ad8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003adc:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ade:	4618      	mov	r0, r3
 8003ae0:	3710      	adds	r7, #16
 8003ae2:	46bd      	mov	sp, r7
 8003ae4:	bd80      	pop	{r7, pc}

08003ae6 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003ae6:	b480      	push	{r7}
 8003ae8:	b083      	sub	sp, #12
 8003aea:	af00      	add	r7, sp, #0
 8003aec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8003aee:	bf00      	nop
 8003af0:	370c      	adds	r7, #12
 8003af2:	46bd      	mov	sp, r7
 8003af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003af8:	4770      	bx	lr

08003afa <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003afa:	b480      	push	{r7}
 8003afc:	b083      	sub	sp, #12
 8003afe:	af00      	add	r7, sp, #0
 8003b00:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003b02:	bf00      	nop
 8003b04:	370c      	adds	r7, #12
 8003b06:	46bd      	mov	sp, r7
 8003b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b0c:	4770      	bx	lr

08003b0e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003b0e:	b480      	push	{r7}
 8003b10:	b083      	sub	sp, #12
 8003b12:	af00      	add	r7, sp, #0
 8003b14:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003b16:	bf00      	nop
 8003b18:	370c      	adds	r7, #12
 8003b1a:	46bd      	mov	sp, r7
 8003b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b20:	4770      	bx	lr

08003b22 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003b22:	b480      	push	{r7}
 8003b24:	b083      	sub	sp, #12
 8003b26:	af00      	add	r7, sp, #0
 8003b28:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003b2a:	bf00      	nop
 8003b2c:	370c      	adds	r7, #12
 8003b2e:	46bd      	mov	sp, r7
 8003b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b34:	4770      	bx	lr

08003b36 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003b36:	b480      	push	{r7}
 8003b38:	b083      	sub	sp, #12
 8003b3a:	af00      	add	r7, sp, #0
 8003b3c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003b3e:	bf00      	nop
 8003b40:	370c      	adds	r7, #12
 8003b42:	46bd      	mov	sp, r7
 8003b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b48:	4770      	bx	lr
	...

08003b4c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003b4c:	b480      	push	{r7}
 8003b4e:	b085      	sub	sp, #20
 8003b50:	af00      	add	r7, sp, #0
 8003b52:	6078      	str	r0, [r7, #4]
 8003b54:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	4a40      	ldr	r2, [pc, #256]	; (8003c60 <TIM_Base_SetConfig+0x114>)
 8003b60:	4293      	cmp	r3, r2
 8003b62:	d013      	beq.n	8003b8c <TIM_Base_SetConfig+0x40>
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003b6a:	d00f      	beq.n	8003b8c <TIM_Base_SetConfig+0x40>
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	4a3d      	ldr	r2, [pc, #244]	; (8003c64 <TIM_Base_SetConfig+0x118>)
 8003b70:	4293      	cmp	r3, r2
 8003b72:	d00b      	beq.n	8003b8c <TIM_Base_SetConfig+0x40>
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	4a3c      	ldr	r2, [pc, #240]	; (8003c68 <TIM_Base_SetConfig+0x11c>)
 8003b78:	4293      	cmp	r3, r2
 8003b7a:	d007      	beq.n	8003b8c <TIM_Base_SetConfig+0x40>
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	4a3b      	ldr	r2, [pc, #236]	; (8003c6c <TIM_Base_SetConfig+0x120>)
 8003b80:	4293      	cmp	r3, r2
 8003b82:	d003      	beq.n	8003b8c <TIM_Base_SetConfig+0x40>
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	4a3a      	ldr	r2, [pc, #232]	; (8003c70 <TIM_Base_SetConfig+0x124>)
 8003b88:	4293      	cmp	r3, r2
 8003b8a:	d108      	bne.n	8003b9e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b92:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003b94:	683b      	ldr	r3, [r7, #0]
 8003b96:	685b      	ldr	r3, [r3, #4]
 8003b98:	68fa      	ldr	r2, [r7, #12]
 8003b9a:	4313      	orrs	r3, r2
 8003b9c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	4a2f      	ldr	r2, [pc, #188]	; (8003c60 <TIM_Base_SetConfig+0x114>)
 8003ba2:	4293      	cmp	r3, r2
 8003ba4:	d02b      	beq.n	8003bfe <TIM_Base_SetConfig+0xb2>
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003bac:	d027      	beq.n	8003bfe <TIM_Base_SetConfig+0xb2>
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	4a2c      	ldr	r2, [pc, #176]	; (8003c64 <TIM_Base_SetConfig+0x118>)
 8003bb2:	4293      	cmp	r3, r2
 8003bb4:	d023      	beq.n	8003bfe <TIM_Base_SetConfig+0xb2>
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	4a2b      	ldr	r2, [pc, #172]	; (8003c68 <TIM_Base_SetConfig+0x11c>)
 8003bba:	4293      	cmp	r3, r2
 8003bbc:	d01f      	beq.n	8003bfe <TIM_Base_SetConfig+0xb2>
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	4a2a      	ldr	r2, [pc, #168]	; (8003c6c <TIM_Base_SetConfig+0x120>)
 8003bc2:	4293      	cmp	r3, r2
 8003bc4:	d01b      	beq.n	8003bfe <TIM_Base_SetConfig+0xb2>
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	4a29      	ldr	r2, [pc, #164]	; (8003c70 <TIM_Base_SetConfig+0x124>)
 8003bca:	4293      	cmp	r3, r2
 8003bcc:	d017      	beq.n	8003bfe <TIM_Base_SetConfig+0xb2>
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	4a28      	ldr	r2, [pc, #160]	; (8003c74 <TIM_Base_SetConfig+0x128>)
 8003bd2:	4293      	cmp	r3, r2
 8003bd4:	d013      	beq.n	8003bfe <TIM_Base_SetConfig+0xb2>
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	4a27      	ldr	r2, [pc, #156]	; (8003c78 <TIM_Base_SetConfig+0x12c>)
 8003bda:	4293      	cmp	r3, r2
 8003bdc:	d00f      	beq.n	8003bfe <TIM_Base_SetConfig+0xb2>
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	4a26      	ldr	r2, [pc, #152]	; (8003c7c <TIM_Base_SetConfig+0x130>)
 8003be2:	4293      	cmp	r3, r2
 8003be4:	d00b      	beq.n	8003bfe <TIM_Base_SetConfig+0xb2>
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	4a25      	ldr	r2, [pc, #148]	; (8003c80 <TIM_Base_SetConfig+0x134>)
 8003bea:	4293      	cmp	r3, r2
 8003bec:	d007      	beq.n	8003bfe <TIM_Base_SetConfig+0xb2>
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	4a24      	ldr	r2, [pc, #144]	; (8003c84 <TIM_Base_SetConfig+0x138>)
 8003bf2:	4293      	cmp	r3, r2
 8003bf4:	d003      	beq.n	8003bfe <TIM_Base_SetConfig+0xb2>
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	4a23      	ldr	r2, [pc, #140]	; (8003c88 <TIM_Base_SetConfig+0x13c>)
 8003bfa:	4293      	cmp	r3, r2
 8003bfc:	d108      	bne.n	8003c10 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003c04:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003c06:	683b      	ldr	r3, [r7, #0]
 8003c08:	68db      	ldr	r3, [r3, #12]
 8003c0a:	68fa      	ldr	r2, [r7, #12]
 8003c0c:	4313      	orrs	r3, r2
 8003c0e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003c16:	683b      	ldr	r3, [r7, #0]
 8003c18:	695b      	ldr	r3, [r3, #20]
 8003c1a:	4313      	orrs	r3, r2
 8003c1c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	68fa      	ldr	r2, [r7, #12]
 8003c22:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003c24:	683b      	ldr	r3, [r7, #0]
 8003c26:	689a      	ldr	r2, [r3, #8]
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003c2c:	683b      	ldr	r3, [r7, #0]
 8003c2e:	681a      	ldr	r2, [r3, #0]
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	4a0a      	ldr	r2, [pc, #40]	; (8003c60 <TIM_Base_SetConfig+0x114>)
 8003c38:	4293      	cmp	r3, r2
 8003c3a:	d003      	beq.n	8003c44 <TIM_Base_SetConfig+0xf8>
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	4a0c      	ldr	r2, [pc, #48]	; (8003c70 <TIM_Base_SetConfig+0x124>)
 8003c40:	4293      	cmp	r3, r2
 8003c42:	d103      	bne.n	8003c4c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003c44:	683b      	ldr	r3, [r7, #0]
 8003c46:	691a      	ldr	r2, [r3, #16]
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	2201      	movs	r2, #1
 8003c50:	615a      	str	r2, [r3, #20]
}
 8003c52:	bf00      	nop
 8003c54:	3714      	adds	r7, #20
 8003c56:	46bd      	mov	sp, r7
 8003c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c5c:	4770      	bx	lr
 8003c5e:	bf00      	nop
 8003c60:	40010000 	.word	0x40010000
 8003c64:	40000400 	.word	0x40000400
 8003c68:	40000800 	.word	0x40000800
 8003c6c:	40000c00 	.word	0x40000c00
 8003c70:	40010400 	.word	0x40010400
 8003c74:	40014000 	.word	0x40014000
 8003c78:	40014400 	.word	0x40014400
 8003c7c:	40014800 	.word	0x40014800
 8003c80:	40001800 	.word	0x40001800
 8003c84:	40001c00 	.word	0x40001c00
 8003c88:	40002000 	.word	0x40002000

08003c8c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003c8c:	b480      	push	{r7}
 8003c8e:	b087      	sub	sp, #28
 8003c90:	af00      	add	r7, sp, #0
 8003c92:	6078      	str	r0, [r7, #4]
 8003c94:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	6a1b      	ldr	r3, [r3, #32]
 8003c9a:	f023 0201 	bic.w	r2, r3, #1
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	6a1b      	ldr	r3, [r3, #32]
 8003ca6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	685b      	ldr	r3, [r3, #4]
 8003cac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	699b      	ldr	r3, [r3, #24]
 8003cb2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003cba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	f023 0303 	bic.w	r3, r3, #3
 8003cc2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003cc4:	683b      	ldr	r3, [r7, #0]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	68fa      	ldr	r2, [r7, #12]
 8003cca:	4313      	orrs	r3, r2
 8003ccc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003cce:	697b      	ldr	r3, [r7, #20]
 8003cd0:	f023 0302 	bic.w	r3, r3, #2
 8003cd4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003cd6:	683b      	ldr	r3, [r7, #0]
 8003cd8:	689b      	ldr	r3, [r3, #8]
 8003cda:	697a      	ldr	r2, [r7, #20]
 8003cdc:	4313      	orrs	r3, r2
 8003cde:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	4a20      	ldr	r2, [pc, #128]	; (8003d64 <TIM_OC1_SetConfig+0xd8>)
 8003ce4:	4293      	cmp	r3, r2
 8003ce6:	d003      	beq.n	8003cf0 <TIM_OC1_SetConfig+0x64>
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	4a1f      	ldr	r2, [pc, #124]	; (8003d68 <TIM_OC1_SetConfig+0xdc>)
 8003cec:	4293      	cmp	r3, r2
 8003cee:	d10c      	bne.n	8003d0a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003cf0:	697b      	ldr	r3, [r7, #20]
 8003cf2:	f023 0308 	bic.w	r3, r3, #8
 8003cf6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003cf8:	683b      	ldr	r3, [r7, #0]
 8003cfa:	68db      	ldr	r3, [r3, #12]
 8003cfc:	697a      	ldr	r2, [r7, #20]
 8003cfe:	4313      	orrs	r3, r2
 8003d00:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003d02:	697b      	ldr	r3, [r7, #20]
 8003d04:	f023 0304 	bic.w	r3, r3, #4
 8003d08:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	4a15      	ldr	r2, [pc, #84]	; (8003d64 <TIM_OC1_SetConfig+0xd8>)
 8003d0e:	4293      	cmp	r3, r2
 8003d10:	d003      	beq.n	8003d1a <TIM_OC1_SetConfig+0x8e>
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	4a14      	ldr	r2, [pc, #80]	; (8003d68 <TIM_OC1_SetConfig+0xdc>)
 8003d16:	4293      	cmp	r3, r2
 8003d18:	d111      	bne.n	8003d3e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003d1a:	693b      	ldr	r3, [r7, #16]
 8003d1c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003d20:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003d22:	693b      	ldr	r3, [r7, #16]
 8003d24:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003d28:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003d2a:	683b      	ldr	r3, [r7, #0]
 8003d2c:	695b      	ldr	r3, [r3, #20]
 8003d2e:	693a      	ldr	r2, [r7, #16]
 8003d30:	4313      	orrs	r3, r2
 8003d32:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003d34:	683b      	ldr	r3, [r7, #0]
 8003d36:	699b      	ldr	r3, [r3, #24]
 8003d38:	693a      	ldr	r2, [r7, #16]
 8003d3a:	4313      	orrs	r3, r2
 8003d3c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	693a      	ldr	r2, [r7, #16]
 8003d42:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	68fa      	ldr	r2, [r7, #12]
 8003d48:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003d4a:	683b      	ldr	r3, [r7, #0]
 8003d4c:	685a      	ldr	r2, [r3, #4]
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	697a      	ldr	r2, [r7, #20]
 8003d56:	621a      	str	r2, [r3, #32]
}
 8003d58:	bf00      	nop
 8003d5a:	371c      	adds	r7, #28
 8003d5c:	46bd      	mov	sp, r7
 8003d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d62:	4770      	bx	lr
 8003d64:	40010000 	.word	0x40010000
 8003d68:	40010400 	.word	0x40010400

08003d6c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003d6c:	b480      	push	{r7}
 8003d6e:	b087      	sub	sp, #28
 8003d70:	af00      	add	r7, sp, #0
 8003d72:	6078      	str	r0, [r7, #4]
 8003d74:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	6a1b      	ldr	r3, [r3, #32]
 8003d7a:	f023 0210 	bic.w	r2, r3, #16
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	6a1b      	ldr	r3, [r3, #32]
 8003d86:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	685b      	ldr	r3, [r3, #4]
 8003d8c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	699b      	ldr	r3, [r3, #24]
 8003d92:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003d9a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003da2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003da4:	683b      	ldr	r3, [r7, #0]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	021b      	lsls	r3, r3, #8
 8003daa:	68fa      	ldr	r2, [r7, #12]
 8003dac:	4313      	orrs	r3, r2
 8003dae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003db0:	697b      	ldr	r3, [r7, #20]
 8003db2:	f023 0320 	bic.w	r3, r3, #32
 8003db6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003db8:	683b      	ldr	r3, [r7, #0]
 8003dba:	689b      	ldr	r3, [r3, #8]
 8003dbc:	011b      	lsls	r3, r3, #4
 8003dbe:	697a      	ldr	r2, [r7, #20]
 8003dc0:	4313      	orrs	r3, r2
 8003dc2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	4a22      	ldr	r2, [pc, #136]	; (8003e50 <TIM_OC2_SetConfig+0xe4>)
 8003dc8:	4293      	cmp	r3, r2
 8003dca:	d003      	beq.n	8003dd4 <TIM_OC2_SetConfig+0x68>
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	4a21      	ldr	r2, [pc, #132]	; (8003e54 <TIM_OC2_SetConfig+0xe8>)
 8003dd0:	4293      	cmp	r3, r2
 8003dd2:	d10d      	bne.n	8003df0 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003dd4:	697b      	ldr	r3, [r7, #20]
 8003dd6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003dda:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003ddc:	683b      	ldr	r3, [r7, #0]
 8003dde:	68db      	ldr	r3, [r3, #12]
 8003de0:	011b      	lsls	r3, r3, #4
 8003de2:	697a      	ldr	r2, [r7, #20]
 8003de4:	4313      	orrs	r3, r2
 8003de6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003de8:	697b      	ldr	r3, [r7, #20]
 8003dea:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003dee:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	4a17      	ldr	r2, [pc, #92]	; (8003e50 <TIM_OC2_SetConfig+0xe4>)
 8003df4:	4293      	cmp	r3, r2
 8003df6:	d003      	beq.n	8003e00 <TIM_OC2_SetConfig+0x94>
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	4a16      	ldr	r2, [pc, #88]	; (8003e54 <TIM_OC2_SetConfig+0xe8>)
 8003dfc:	4293      	cmp	r3, r2
 8003dfe:	d113      	bne.n	8003e28 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003e00:	693b      	ldr	r3, [r7, #16]
 8003e02:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003e06:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003e08:	693b      	ldr	r3, [r7, #16]
 8003e0a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003e0e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003e10:	683b      	ldr	r3, [r7, #0]
 8003e12:	695b      	ldr	r3, [r3, #20]
 8003e14:	009b      	lsls	r3, r3, #2
 8003e16:	693a      	ldr	r2, [r7, #16]
 8003e18:	4313      	orrs	r3, r2
 8003e1a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003e1c:	683b      	ldr	r3, [r7, #0]
 8003e1e:	699b      	ldr	r3, [r3, #24]
 8003e20:	009b      	lsls	r3, r3, #2
 8003e22:	693a      	ldr	r2, [r7, #16]
 8003e24:	4313      	orrs	r3, r2
 8003e26:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	693a      	ldr	r2, [r7, #16]
 8003e2c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	68fa      	ldr	r2, [r7, #12]
 8003e32:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003e34:	683b      	ldr	r3, [r7, #0]
 8003e36:	685a      	ldr	r2, [r3, #4]
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	697a      	ldr	r2, [r7, #20]
 8003e40:	621a      	str	r2, [r3, #32]
}
 8003e42:	bf00      	nop
 8003e44:	371c      	adds	r7, #28
 8003e46:	46bd      	mov	sp, r7
 8003e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e4c:	4770      	bx	lr
 8003e4e:	bf00      	nop
 8003e50:	40010000 	.word	0x40010000
 8003e54:	40010400 	.word	0x40010400

08003e58 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003e58:	b480      	push	{r7}
 8003e5a:	b087      	sub	sp, #28
 8003e5c:	af00      	add	r7, sp, #0
 8003e5e:	6078      	str	r0, [r7, #4]
 8003e60:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	6a1b      	ldr	r3, [r3, #32]
 8003e66:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	6a1b      	ldr	r3, [r3, #32]
 8003e72:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	685b      	ldr	r3, [r3, #4]
 8003e78:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	69db      	ldr	r3, [r3, #28]
 8003e7e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e86:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	f023 0303 	bic.w	r3, r3, #3
 8003e8e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003e90:	683b      	ldr	r3, [r7, #0]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	68fa      	ldr	r2, [r7, #12]
 8003e96:	4313      	orrs	r3, r2
 8003e98:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003e9a:	697b      	ldr	r3, [r7, #20]
 8003e9c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003ea0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003ea2:	683b      	ldr	r3, [r7, #0]
 8003ea4:	689b      	ldr	r3, [r3, #8]
 8003ea6:	021b      	lsls	r3, r3, #8
 8003ea8:	697a      	ldr	r2, [r7, #20]
 8003eaa:	4313      	orrs	r3, r2
 8003eac:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	4a21      	ldr	r2, [pc, #132]	; (8003f38 <TIM_OC3_SetConfig+0xe0>)
 8003eb2:	4293      	cmp	r3, r2
 8003eb4:	d003      	beq.n	8003ebe <TIM_OC3_SetConfig+0x66>
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	4a20      	ldr	r2, [pc, #128]	; (8003f3c <TIM_OC3_SetConfig+0xe4>)
 8003eba:	4293      	cmp	r3, r2
 8003ebc:	d10d      	bne.n	8003eda <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003ebe:	697b      	ldr	r3, [r7, #20]
 8003ec0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003ec4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003ec6:	683b      	ldr	r3, [r7, #0]
 8003ec8:	68db      	ldr	r3, [r3, #12]
 8003eca:	021b      	lsls	r3, r3, #8
 8003ecc:	697a      	ldr	r2, [r7, #20]
 8003ece:	4313      	orrs	r3, r2
 8003ed0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003ed2:	697b      	ldr	r3, [r7, #20]
 8003ed4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003ed8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	4a16      	ldr	r2, [pc, #88]	; (8003f38 <TIM_OC3_SetConfig+0xe0>)
 8003ede:	4293      	cmp	r3, r2
 8003ee0:	d003      	beq.n	8003eea <TIM_OC3_SetConfig+0x92>
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	4a15      	ldr	r2, [pc, #84]	; (8003f3c <TIM_OC3_SetConfig+0xe4>)
 8003ee6:	4293      	cmp	r3, r2
 8003ee8:	d113      	bne.n	8003f12 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003eea:	693b      	ldr	r3, [r7, #16]
 8003eec:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003ef0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003ef2:	693b      	ldr	r3, [r7, #16]
 8003ef4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003ef8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003efa:	683b      	ldr	r3, [r7, #0]
 8003efc:	695b      	ldr	r3, [r3, #20]
 8003efe:	011b      	lsls	r3, r3, #4
 8003f00:	693a      	ldr	r2, [r7, #16]
 8003f02:	4313      	orrs	r3, r2
 8003f04:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003f06:	683b      	ldr	r3, [r7, #0]
 8003f08:	699b      	ldr	r3, [r3, #24]
 8003f0a:	011b      	lsls	r3, r3, #4
 8003f0c:	693a      	ldr	r2, [r7, #16]
 8003f0e:	4313      	orrs	r3, r2
 8003f10:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	693a      	ldr	r2, [r7, #16]
 8003f16:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	68fa      	ldr	r2, [r7, #12]
 8003f1c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003f1e:	683b      	ldr	r3, [r7, #0]
 8003f20:	685a      	ldr	r2, [r3, #4]
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	697a      	ldr	r2, [r7, #20]
 8003f2a:	621a      	str	r2, [r3, #32]
}
 8003f2c:	bf00      	nop
 8003f2e:	371c      	adds	r7, #28
 8003f30:	46bd      	mov	sp, r7
 8003f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f36:	4770      	bx	lr
 8003f38:	40010000 	.word	0x40010000
 8003f3c:	40010400 	.word	0x40010400

08003f40 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003f40:	b480      	push	{r7}
 8003f42:	b087      	sub	sp, #28
 8003f44:	af00      	add	r7, sp, #0
 8003f46:	6078      	str	r0, [r7, #4]
 8003f48:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	6a1b      	ldr	r3, [r3, #32]
 8003f4e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	6a1b      	ldr	r3, [r3, #32]
 8003f5a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	685b      	ldr	r3, [r3, #4]
 8003f60:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	69db      	ldr	r3, [r3, #28]
 8003f66:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003f6e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003f76:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003f78:	683b      	ldr	r3, [r7, #0]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	021b      	lsls	r3, r3, #8
 8003f7e:	68fa      	ldr	r2, [r7, #12]
 8003f80:	4313      	orrs	r3, r2
 8003f82:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003f84:	693b      	ldr	r3, [r7, #16]
 8003f86:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003f8a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003f8c:	683b      	ldr	r3, [r7, #0]
 8003f8e:	689b      	ldr	r3, [r3, #8]
 8003f90:	031b      	lsls	r3, r3, #12
 8003f92:	693a      	ldr	r2, [r7, #16]
 8003f94:	4313      	orrs	r3, r2
 8003f96:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	4a12      	ldr	r2, [pc, #72]	; (8003fe4 <TIM_OC4_SetConfig+0xa4>)
 8003f9c:	4293      	cmp	r3, r2
 8003f9e:	d003      	beq.n	8003fa8 <TIM_OC4_SetConfig+0x68>
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	4a11      	ldr	r2, [pc, #68]	; (8003fe8 <TIM_OC4_SetConfig+0xa8>)
 8003fa4:	4293      	cmp	r3, r2
 8003fa6:	d109      	bne.n	8003fbc <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003fa8:	697b      	ldr	r3, [r7, #20]
 8003faa:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003fae:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003fb0:	683b      	ldr	r3, [r7, #0]
 8003fb2:	695b      	ldr	r3, [r3, #20]
 8003fb4:	019b      	lsls	r3, r3, #6
 8003fb6:	697a      	ldr	r2, [r7, #20]
 8003fb8:	4313      	orrs	r3, r2
 8003fba:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	697a      	ldr	r2, [r7, #20]
 8003fc0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	68fa      	ldr	r2, [r7, #12]
 8003fc6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003fc8:	683b      	ldr	r3, [r7, #0]
 8003fca:	685a      	ldr	r2, [r3, #4]
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	693a      	ldr	r2, [r7, #16]
 8003fd4:	621a      	str	r2, [r3, #32]
}
 8003fd6:	bf00      	nop
 8003fd8:	371c      	adds	r7, #28
 8003fda:	46bd      	mov	sp, r7
 8003fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fe0:	4770      	bx	lr
 8003fe2:	bf00      	nop
 8003fe4:	40010000 	.word	0x40010000
 8003fe8:	40010400 	.word	0x40010400

08003fec <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003fec:	b480      	push	{r7}
 8003fee:	b087      	sub	sp, #28
 8003ff0:	af00      	add	r7, sp, #0
 8003ff2:	60f8      	str	r0, [r7, #12]
 8003ff4:	60b9      	str	r1, [r7, #8]
 8003ff6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	6a1b      	ldr	r3, [r3, #32]
 8003ffc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	6a1b      	ldr	r3, [r3, #32]
 8004002:	f023 0201 	bic.w	r2, r3, #1
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	699b      	ldr	r3, [r3, #24]
 800400e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004010:	693b      	ldr	r3, [r7, #16]
 8004012:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004016:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	011b      	lsls	r3, r3, #4
 800401c:	693a      	ldr	r2, [r7, #16]
 800401e:	4313      	orrs	r3, r2
 8004020:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004022:	697b      	ldr	r3, [r7, #20]
 8004024:	f023 030a 	bic.w	r3, r3, #10
 8004028:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800402a:	697a      	ldr	r2, [r7, #20]
 800402c:	68bb      	ldr	r3, [r7, #8]
 800402e:	4313      	orrs	r3, r2
 8004030:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	693a      	ldr	r2, [r7, #16]
 8004036:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	697a      	ldr	r2, [r7, #20]
 800403c:	621a      	str	r2, [r3, #32]
}
 800403e:	bf00      	nop
 8004040:	371c      	adds	r7, #28
 8004042:	46bd      	mov	sp, r7
 8004044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004048:	4770      	bx	lr

0800404a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800404a:	b480      	push	{r7}
 800404c:	b087      	sub	sp, #28
 800404e:	af00      	add	r7, sp, #0
 8004050:	60f8      	str	r0, [r7, #12]
 8004052:	60b9      	str	r1, [r7, #8]
 8004054:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	6a1b      	ldr	r3, [r3, #32]
 800405a:	f023 0210 	bic.w	r2, r3, #16
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	699b      	ldr	r3, [r3, #24]
 8004066:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	6a1b      	ldr	r3, [r3, #32]
 800406c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800406e:	697b      	ldr	r3, [r7, #20]
 8004070:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004074:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	031b      	lsls	r3, r3, #12
 800407a:	697a      	ldr	r2, [r7, #20]
 800407c:	4313      	orrs	r3, r2
 800407e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004080:	693b      	ldr	r3, [r7, #16]
 8004082:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004086:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004088:	68bb      	ldr	r3, [r7, #8]
 800408a:	011b      	lsls	r3, r3, #4
 800408c:	693a      	ldr	r2, [r7, #16]
 800408e:	4313      	orrs	r3, r2
 8004090:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	697a      	ldr	r2, [r7, #20]
 8004096:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	693a      	ldr	r2, [r7, #16]
 800409c:	621a      	str	r2, [r3, #32]
}
 800409e:	bf00      	nop
 80040a0:	371c      	adds	r7, #28
 80040a2:	46bd      	mov	sp, r7
 80040a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040a8:	4770      	bx	lr

080040aa <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80040aa:	b480      	push	{r7}
 80040ac:	b085      	sub	sp, #20
 80040ae:	af00      	add	r7, sp, #0
 80040b0:	6078      	str	r0, [r7, #4]
 80040b2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	689b      	ldr	r3, [r3, #8]
 80040b8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80040c0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80040c2:	683a      	ldr	r2, [r7, #0]
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	4313      	orrs	r3, r2
 80040c8:	f043 0307 	orr.w	r3, r3, #7
 80040cc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	68fa      	ldr	r2, [r7, #12]
 80040d2:	609a      	str	r2, [r3, #8]
}
 80040d4:	bf00      	nop
 80040d6:	3714      	adds	r7, #20
 80040d8:	46bd      	mov	sp, r7
 80040da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040de:	4770      	bx	lr

080040e0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80040e0:	b480      	push	{r7}
 80040e2:	b087      	sub	sp, #28
 80040e4:	af00      	add	r7, sp, #0
 80040e6:	60f8      	str	r0, [r7, #12]
 80040e8:	60b9      	str	r1, [r7, #8]
 80040ea:	607a      	str	r2, [r7, #4]
 80040ec:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	689b      	ldr	r3, [r3, #8]
 80040f2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80040f4:	697b      	ldr	r3, [r7, #20]
 80040f6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80040fa:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80040fc:	683b      	ldr	r3, [r7, #0]
 80040fe:	021a      	lsls	r2, r3, #8
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	431a      	orrs	r2, r3
 8004104:	68bb      	ldr	r3, [r7, #8]
 8004106:	4313      	orrs	r3, r2
 8004108:	697a      	ldr	r2, [r7, #20]
 800410a:	4313      	orrs	r3, r2
 800410c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	697a      	ldr	r2, [r7, #20]
 8004112:	609a      	str	r2, [r3, #8]
}
 8004114:	bf00      	nop
 8004116:	371c      	adds	r7, #28
 8004118:	46bd      	mov	sp, r7
 800411a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800411e:	4770      	bx	lr

08004120 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004120:	b480      	push	{r7}
 8004122:	b087      	sub	sp, #28
 8004124:	af00      	add	r7, sp, #0
 8004126:	60f8      	str	r0, [r7, #12]
 8004128:	60b9      	str	r1, [r7, #8]
 800412a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800412c:	68bb      	ldr	r3, [r7, #8]
 800412e:	f003 031f 	and.w	r3, r3, #31
 8004132:	2201      	movs	r2, #1
 8004134:	fa02 f303 	lsl.w	r3, r2, r3
 8004138:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	6a1a      	ldr	r2, [r3, #32]
 800413e:	697b      	ldr	r3, [r7, #20]
 8004140:	43db      	mvns	r3, r3
 8004142:	401a      	ands	r2, r3
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	6a1a      	ldr	r2, [r3, #32]
 800414c:	68bb      	ldr	r3, [r7, #8]
 800414e:	f003 031f 	and.w	r3, r3, #31
 8004152:	6879      	ldr	r1, [r7, #4]
 8004154:	fa01 f303 	lsl.w	r3, r1, r3
 8004158:	431a      	orrs	r2, r3
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	621a      	str	r2, [r3, #32]
}
 800415e:	bf00      	nop
 8004160:	371c      	adds	r7, #28
 8004162:	46bd      	mov	sp, r7
 8004164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004168:	4770      	bx	lr
	...

0800416c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800416c:	b480      	push	{r7}
 800416e:	b085      	sub	sp, #20
 8004170:	af00      	add	r7, sp, #0
 8004172:	6078      	str	r0, [r7, #4]
 8004174:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800417c:	2b01      	cmp	r3, #1
 800417e:	d101      	bne.n	8004184 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004180:	2302      	movs	r3, #2
 8004182:	e05a      	b.n	800423a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	2201      	movs	r2, #1
 8004188:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	2202      	movs	r2, #2
 8004190:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	685b      	ldr	r3, [r3, #4]
 800419a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	689b      	ldr	r3, [r3, #8]
 80041a2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80041aa:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80041ac:	683b      	ldr	r3, [r7, #0]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	68fa      	ldr	r2, [r7, #12]
 80041b2:	4313      	orrs	r3, r2
 80041b4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	68fa      	ldr	r2, [r7, #12]
 80041bc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	4a21      	ldr	r2, [pc, #132]	; (8004248 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80041c4:	4293      	cmp	r3, r2
 80041c6:	d022      	beq.n	800420e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80041d0:	d01d      	beq.n	800420e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	4a1d      	ldr	r2, [pc, #116]	; (800424c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80041d8:	4293      	cmp	r3, r2
 80041da:	d018      	beq.n	800420e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	4a1b      	ldr	r2, [pc, #108]	; (8004250 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80041e2:	4293      	cmp	r3, r2
 80041e4:	d013      	beq.n	800420e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	4a1a      	ldr	r2, [pc, #104]	; (8004254 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80041ec:	4293      	cmp	r3, r2
 80041ee:	d00e      	beq.n	800420e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	4a18      	ldr	r2, [pc, #96]	; (8004258 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80041f6:	4293      	cmp	r3, r2
 80041f8:	d009      	beq.n	800420e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	4a17      	ldr	r2, [pc, #92]	; (800425c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004200:	4293      	cmp	r3, r2
 8004202:	d004      	beq.n	800420e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	4a15      	ldr	r2, [pc, #84]	; (8004260 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800420a:	4293      	cmp	r3, r2
 800420c:	d10c      	bne.n	8004228 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800420e:	68bb      	ldr	r3, [r7, #8]
 8004210:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004214:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004216:	683b      	ldr	r3, [r7, #0]
 8004218:	685b      	ldr	r3, [r3, #4]
 800421a:	68ba      	ldr	r2, [r7, #8]
 800421c:	4313      	orrs	r3, r2
 800421e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	68ba      	ldr	r2, [r7, #8]
 8004226:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	2201      	movs	r2, #1
 800422c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	2200      	movs	r2, #0
 8004234:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004238:	2300      	movs	r3, #0
}
 800423a:	4618      	mov	r0, r3
 800423c:	3714      	adds	r7, #20
 800423e:	46bd      	mov	sp, r7
 8004240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004244:	4770      	bx	lr
 8004246:	bf00      	nop
 8004248:	40010000 	.word	0x40010000
 800424c:	40000400 	.word	0x40000400
 8004250:	40000800 	.word	0x40000800
 8004254:	40000c00 	.word	0x40000c00
 8004258:	40010400 	.word	0x40010400
 800425c:	40014000 	.word	0x40014000
 8004260:	40001800 	.word	0x40001800

08004264 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004264:	b480      	push	{r7}
 8004266:	b083      	sub	sp, #12
 8004268:	af00      	add	r7, sp, #0
 800426a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800426c:	bf00      	nop
 800426e:	370c      	adds	r7, #12
 8004270:	46bd      	mov	sp, r7
 8004272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004276:	4770      	bx	lr

08004278 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004278:	b480      	push	{r7}
 800427a:	b083      	sub	sp, #12
 800427c:	af00      	add	r7, sp, #0
 800427e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004280:	bf00      	nop
 8004282:	370c      	adds	r7, #12
 8004284:	46bd      	mov	sp, r7
 8004286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800428a:	4770      	bx	lr

0800428c <__libc_init_array>:
 800428c:	b570      	push	{r4, r5, r6, lr}
 800428e:	4d0d      	ldr	r5, [pc, #52]	; (80042c4 <__libc_init_array+0x38>)
 8004290:	4c0d      	ldr	r4, [pc, #52]	; (80042c8 <__libc_init_array+0x3c>)
 8004292:	1b64      	subs	r4, r4, r5
 8004294:	10a4      	asrs	r4, r4, #2
 8004296:	2600      	movs	r6, #0
 8004298:	42a6      	cmp	r6, r4
 800429a:	d109      	bne.n	80042b0 <__libc_init_array+0x24>
 800429c:	4d0b      	ldr	r5, [pc, #44]	; (80042cc <__libc_init_array+0x40>)
 800429e:	4c0c      	ldr	r4, [pc, #48]	; (80042d0 <__libc_init_array+0x44>)
 80042a0:	f001 f8cc 	bl	800543c <_init>
 80042a4:	1b64      	subs	r4, r4, r5
 80042a6:	10a4      	asrs	r4, r4, #2
 80042a8:	2600      	movs	r6, #0
 80042aa:	42a6      	cmp	r6, r4
 80042ac:	d105      	bne.n	80042ba <__libc_init_array+0x2e>
 80042ae:	bd70      	pop	{r4, r5, r6, pc}
 80042b0:	f855 3b04 	ldr.w	r3, [r5], #4
 80042b4:	4798      	blx	r3
 80042b6:	3601      	adds	r6, #1
 80042b8:	e7ee      	b.n	8004298 <__libc_init_array+0xc>
 80042ba:	f855 3b04 	ldr.w	r3, [r5], #4
 80042be:	4798      	blx	r3
 80042c0:	3601      	adds	r6, #1
 80042c2:	e7f2      	b.n	80042aa <__libc_init_array+0x1e>
 80042c4:	08005648 	.word	0x08005648
 80042c8:	08005648 	.word	0x08005648
 80042cc:	08005648 	.word	0x08005648
 80042d0:	0800564c 	.word	0x0800564c

080042d4 <memset>:
 80042d4:	4402      	add	r2, r0
 80042d6:	4603      	mov	r3, r0
 80042d8:	4293      	cmp	r3, r2
 80042da:	d100      	bne.n	80042de <memset+0xa>
 80042dc:	4770      	bx	lr
 80042de:	f803 1b01 	strb.w	r1, [r3], #1
 80042e2:	e7f9      	b.n	80042d8 <memset+0x4>
 80042e4:	0000      	movs	r0, r0
	...

080042e8 <tan>:
 80042e8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80042ea:	ec53 2b10 	vmov	r2, r3, d0
 80042ee:	4816      	ldr	r0, [pc, #88]	; (8004348 <tan+0x60>)
 80042f0:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 80042f4:	4281      	cmp	r1, r0
 80042f6:	dc07      	bgt.n	8004308 <tan+0x20>
 80042f8:	ed9f 1b11 	vldr	d1, [pc, #68]	; 8004340 <tan+0x58>
 80042fc:	2001      	movs	r0, #1
 80042fe:	b005      	add	sp, #20
 8004300:	f85d eb04 	ldr.w	lr, [sp], #4
 8004304:	f000 bd80 	b.w	8004e08 <__kernel_tan>
 8004308:	4810      	ldr	r0, [pc, #64]	; (800434c <tan+0x64>)
 800430a:	4281      	cmp	r1, r0
 800430c:	dd09      	ble.n	8004322 <tan+0x3a>
 800430e:	ee10 0a10 	vmov	r0, s0
 8004312:	4619      	mov	r1, r3
 8004314:	f7fb ff70 	bl	80001f8 <__aeabi_dsub>
 8004318:	ec41 0b10 	vmov	d0, r0, r1
 800431c:	b005      	add	sp, #20
 800431e:	f85d fb04 	ldr.w	pc, [sp], #4
 8004322:	4668      	mov	r0, sp
 8004324:	f000 f814 	bl	8004350 <__ieee754_rem_pio2>
 8004328:	0040      	lsls	r0, r0, #1
 800432a:	f000 0002 	and.w	r0, r0, #2
 800432e:	ed9d 1b02 	vldr	d1, [sp, #8]
 8004332:	ed9d 0b00 	vldr	d0, [sp]
 8004336:	f1c0 0001 	rsb	r0, r0, #1
 800433a:	f000 fd65 	bl	8004e08 <__kernel_tan>
 800433e:	e7ed      	b.n	800431c <tan+0x34>
	...
 8004348:	3fe921fb 	.word	0x3fe921fb
 800434c:	7fefffff 	.word	0x7fefffff

08004350 <__ieee754_rem_pio2>:
 8004350:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004354:	ed2d 8b02 	vpush	{d8}
 8004358:	ec55 4b10 	vmov	r4, r5, d0
 800435c:	4bca      	ldr	r3, [pc, #808]	; (8004688 <__ieee754_rem_pio2+0x338>)
 800435e:	b08b      	sub	sp, #44	; 0x2c
 8004360:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 8004364:	4598      	cmp	r8, r3
 8004366:	4682      	mov	sl, r0
 8004368:	9502      	str	r5, [sp, #8]
 800436a:	dc08      	bgt.n	800437e <__ieee754_rem_pio2+0x2e>
 800436c:	2200      	movs	r2, #0
 800436e:	2300      	movs	r3, #0
 8004370:	ed80 0b00 	vstr	d0, [r0]
 8004374:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8004378:	f04f 0b00 	mov.w	fp, #0
 800437c:	e028      	b.n	80043d0 <__ieee754_rem_pio2+0x80>
 800437e:	4bc3      	ldr	r3, [pc, #780]	; (800468c <__ieee754_rem_pio2+0x33c>)
 8004380:	4598      	cmp	r8, r3
 8004382:	dc78      	bgt.n	8004476 <__ieee754_rem_pio2+0x126>
 8004384:	9b02      	ldr	r3, [sp, #8]
 8004386:	4ec2      	ldr	r6, [pc, #776]	; (8004690 <__ieee754_rem_pio2+0x340>)
 8004388:	2b00      	cmp	r3, #0
 800438a:	ee10 0a10 	vmov	r0, s0
 800438e:	a3b0      	add	r3, pc, #704	; (adr r3, 8004650 <__ieee754_rem_pio2+0x300>)
 8004390:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004394:	4629      	mov	r1, r5
 8004396:	dd39      	ble.n	800440c <__ieee754_rem_pio2+0xbc>
 8004398:	f7fb ff2e 	bl	80001f8 <__aeabi_dsub>
 800439c:	45b0      	cmp	r8, r6
 800439e:	4604      	mov	r4, r0
 80043a0:	460d      	mov	r5, r1
 80043a2:	d01b      	beq.n	80043dc <__ieee754_rem_pio2+0x8c>
 80043a4:	a3ac      	add	r3, pc, #688	; (adr r3, 8004658 <__ieee754_rem_pio2+0x308>)
 80043a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043aa:	f7fb ff25 	bl	80001f8 <__aeabi_dsub>
 80043ae:	4602      	mov	r2, r0
 80043b0:	460b      	mov	r3, r1
 80043b2:	e9ca 2300 	strd	r2, r3, [sl]
 80043b6:	4620      	mov	r0, r4
 80043b8:	4629      	mov	r1, r5
 80043ba:	f7fb ff1d 	bl	80001f8 <__aeabi_dsub>
 80043be:	a3a6      	add	r3, pc, #664	; (adr r3, 8004658 <__ieee754_rem_pio2+0x308>)
 80043c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043c4:	f7fb ff18 	bl	80001f8 <__aeabi_dsub>
 80043c8:	e9ca 0102 	strd	r0, r1, [sl, #8]
 80043cc:	f04f 0b01 	mov.w	fp, #1
 80043d0:	4658      	mov	r0, fp
 80043d2:	b00b      	add	sp, #44	; 0x2c
 80043d4:	ecbd 8b02 	vpop	{d8}
 80043d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80043dc:	a3a0      	add	r3, pc, #640	; (adr r3, 8004660 <__ieee754_rem_pio2+0x310>)
 80043de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043e2:	f7fb ff09 	bl	80001f8 <__aeabi_dsub>
 80043e6:	a3a0      	add	r3, pc, #640	; (adr r3, 8004668 <__ieee754_rem_pio2+0x318>)
 80043e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043ec:	4604      	mov	r4, r0
 80043ee:	460d      	mov	r5, r1
 80043f0:	f7fb ff02 	bl	80001f8 <__aeabi_dsub>
 80043f4:	4602      	mov	r2, r0
 80043f6:	460b      	mov	r3, r1
 80043f8:	e9ca 2300 	strd	r2, r3, [sl]
 80043fc:	4620      	mov	r0, r4
 80043fe:	4629      	mov	r1, r5
 8004400:	f7fb fefa 	bl	80001f8 <__aeabi_dsub>
 8004404:	a398      	add	r3, pc, #608	; (adr r3, 8004668 <__ieee754_rem_pio2+0x318>)
 8004406:	e9d3 2300 	ldrd	r2, r3, [r3]
 800440a:	e7db      	b.n	80043c4 <__ieee754_rem_pio2+0x74>
 800440c:	f7fb fef6 	bl	80001fc <__adddf3>
 8004410:	45b0      	cmp	r8, r6
 8004412:	4604      	mov	r4, r0
 8004414:	460d      	mov	r5, r1
 8004416:	d016      	beq.n	8004446 <__ieee754_rem_pio2+0xf6>
 8004418:	a38f      	add	r3, pc, #572	; (adr r3, 8004658 <__ieee754_rem_pio2+0x308>)
 800441a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800441e:	f7fb feed 	bl	80001fc <__adddf3>
 8004422:	4602      	mov	r2, r0
 8004424:	460b      	mov	r3, r1
 8004426:	e9ca 2300 	strd	r2, r3, [sl]
 800442a:	4620      	mov	r0, r4
 800442c:	4629      	mov	r1, r5
 800442e:	f7fb fee3 	bl	80001f8 <__aeabi_dsub>
 8004432:	a389      	add	r3, pc, #548	; (adr r3, 8004658 <__ieee754_rem_pio2+0x308>)
 8004434:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004438:	f7fb fee0 	bl	80001fc <__adddf3>
 800443c:	f04f 3bff 	mov.w	fp, #4294967295
 8004440:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8004444:	e7c4      	b.n	80043d0 <__ieee754_rem_pio2+0x80>
 8004446:	a386      	add	r3, pc, #536	; (adr r3, 8004660 <__ieee754_rem_pio2+0x310>)
 8004448:	e9d3 2300 	ldrd	r2, r3, [r3]
 800444c:	f7fb fed6 	bl	80001fc <__adddf3>
 8004450:	a385      	add	r3, pc, #532	; (adr r3, 8004668 <__ieee754_rem_pio2+0x318>)
 8004452:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004456:	4604      	mov	r4, r0
 8004458:	460d      	mov	r5, r1
 800445a:	f7fb fecf 	bl	80001fc <__adddf3>
 800445e:	4602      	mov	r2, r0
 8004460:	460b      	mov	r3, r1
 8004462:	e9ca 2300 	strd	r2, r3, [sl]
 8004466:	4620      	mov	r0, r4
 8004468:	4629      	mov	r1, r5
 800446a:	f7fb fec5 	bl	80001f8 <__aeabi_dsub>
 800446e:	a37e      	add	r3, pc, #504	; (adr r3, 8004668 <__ieee754_rem_pio2+0x318>)
 8004470:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004474:	e7e0      	b.n	8004438 <__ieee754_rem_pio2+0xe8>
 8004476:	4b87      	ldr	r3, [pc, #540]	; (8004694 <__ieee754_rem_pio2+0x344>)
 8004478:	4598      	cmp	r8, r3
 800447a:	f300 80d9 	bgt.w	8004630 <__ieee754_rem_pio2+0x2e0>
 800447e:	f000 fecd 	bl	800521c <fabs>
 8004482:	ec55 4b10 	vmov	r4, r5, d0
 8004486:	ee10 0a10 	vmov	r0, s0
 800448a:	a379      	add	r3, pc, #484	; (adr r3, 8004670 <__ieee754_rem_pio2+0x320>)
 800448c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004490:	4629      	mov	r1, r5
 8004492:	f7fc f869 	bl	8000568 <__aeabi_dmul>
 8004496:	4b80      	ldr	r3, [pc, #512]	; (8004698 <__ieee754_rem_pio2+0x348>)
 8004498:	2200      	movs	r2, #0
 800449a:	f7fb feaf 	bl	80001fc <__adddf3>
 800449e:	f7fc fafd 	bl	8000a9c <__aeabi_d2iz>
 80044a2:	4683      	mov	fp, r0
 80044a4:	f7fb fff6 	bl	8000494 <__aeabi_i2d>
 80044a8:	4602      	mov	r2, r0
 80044aa:	460b      	mov	r3, r1
 80044ac:	ec43 2b18 	vmov	d8, r2, r3
 80044b0:	a367      	add	r3, pc, #412	; (adr r3, 8004650 <__ieee754_rem_pio2+0x300>)
 80044b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044b6:	f7fc f857 	bl	8000568 <__aeabi_dmul>
 80044ba:	4602      	mov	r2, r0
 80044bc:	460b      	mov	r3, r1
 80044be:	4620      	mov	r0, r4
 80044c0:	4629      	mov	r1, r5
 80044c2:	f7fb fe99 	bl	80001f8 <__aeabi_dsub>
 80044c6:	a364      	add	r3, pc, #400	; (adr r3, 8004658 <__ieee754_rem_pio2+0x308>)
 80044c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044cc:	4606      	mov	r6, r0
 80044ce:	460f      	mov	r7, r1
 80044d0:	ec51 0b18 	vmov	r0, r1, d8
 80044d4:	f7fc f848 	bl	8000568 <__aeabi_dmul>
 80044d8:	f1bb 0f1f 	cmp.w	fp, #31
 80044dc:	4604      	mov	r4, r0
 80044de:	460d      	mov	r5, r1
 80044e0:	dc0d      	bgt.n	80044fe <__ieee754_rem_pio2+0x1ae>
 80044e2:	4b6e      	ldr	r3, [pc, #440]	; (800469c <__ieee754_rem_pio2+0x34c>)
 80044e4:	f10b 32ff 	add.w	r2, fp, #4294967295
 80044e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80044ec:	4543      	cmp	r3, r8
 80044ee:	d006      	beq.n	80044fe <__ieee754_rem_pio2+0x1ae>
 80044f0:	4622      	mov	r2, r4
 80044f2:	462b      	mov	r3, r5
 80044f4:	4630      	mov	r0, r6
 80044f6:	4639      	mov	r1, r7
 80044f8:	f7fb fe7e 	bl	80001f8 <__aeabi_dsub>
 80044fc:	e00f      	b.n	800451e <__ieee754_rem_pio2+0x1ce>
 80044fe:	462b      	mov	r3, r5
 8004500:	4622      	mov	r2, r4
 8004502:	4630      	mov	r0, r6
 8004504:	4639      	mov	r1, r7
 8004506:	f7fb fe77 	bl	80001f8 <__aeabi_dsub>
 800450a:	ea4f 5328 	mov.w	r3, r8, asr #20
 800450e:	9303      	str	r3, [sp, #12]
 8004510:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8004514:	ebc3 5818 	rsb	r8, r3, r8, lsr #20
 8004518:	f1b8 0f10 	cmp.w	r8, #16
 800451c:	dc02      	bgt.n	8004524 <__ieee754_rem_pio2+0x1d4>
 800451e:	e9ca 0100 	strd	r0, r1, [sl]
 8004522:	e039      	b.n	8004598 <__ieee754_rem_pio2+0x248>
 8004524:	a34e      	add	r3, pc, #312	; (adr r3, 8004660 <__ieee754_rem_pio2+0x310>)
 8004526:	e9d3 2300 	ldrd	r2, r3, [r3]
 800452a:	ec51 0b18 	vmov	r0, r1, d8
 800452e:	f7fc f81b 	bl	8000568 <__aeabi_dmul>
 8004532:	4604      	mov	r4, r0
 8004534:	460d      	mov	r5, r1
 8004536:	4602      	mov	r2, r0
 8004538:	460b      	mov	r3, r1
 800453a:	4630      	mov	r0, r6
 800453c:	4639      	mov	r1, r7
 800453e:	f7fb fe5b 	bl	80001f8 <__aeabi_dsub>
 8004542:	4602      	mov	r2, r0
 8004544:	460b      	mov	r3, r1
 8004546:	4680      	mov	r8, r0
 8004548:	4689      	mov	r9, r1
 800454a:	4630      	mov	r0, r6
 800454c:	4639      	mov	r1, r7
 800454e:	f7fb fe53 	bl	80001f8 <__aeabi_dsub>
 8004552:	4622      	mov	r2, r4
 8004554:	462b      	mov	r3, r5
 8004556:	f7fb fe4f 	bl	80001f8 <__aeabi_dsub>
 800455a:	a343      	add	r3, pc, #268	; (adr r3, 8004668 <__ieee754_rem_pio2+0x318>)
 800455c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004560:	4604      	mov	r4, r0
 8004562:	460d      	mov	r5, r1
 8004564:	ec51 0b18 	vmov	r0, r1, d8
 8004568:	f7fb fffe 	bl	8000568 <__aeabi_dmul>
 800456c:	4622      	mov	r2, r4
 800456e:	462b      	mov	r3, r5
 8004570:	f7fb fe42 	bl	80001f8 <__aeabi_dsub>
 8004574:	4602      	mov	r2, r0
 8004576:	460b      	mov	r3, r1
 8004578:	4604      	mov	r4, r0
 800457a:	460d      	mov	r5, r1
 800457c:	4640      	mov	r0, r8
 800457e:	4649      	mov	r1, r9
 8004580:	f7fb fe3a 	bl	80001f8 <__aeabi_dsub>
 8004584:	9a03      	ldr	r2, [sp, #12]
 8004586:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800458a:	1ad3      	subs	r3, r2, r3
 800458c:	2b31      	cmp	r3, #49	; 0x31
 800458e:	dc24      	bgt.n	80045da <__ieee754_rem_pio2+0x28a>
 8004590:	e9ca 0100 	strd	r0, r1, [sl]
 8004594:	4646      	mov	r6, r8
 8004596:	464f      	mov	r7, r9
 8004598:	e9da 8900 	ldrd	r8, r9, [sl]
 800459c:	4630      	mov	r0, r6
 800459e:	4642      	mov	r2, r8
 80045a0:	464b      	mov	r3, r9
 80045a2:	4639      	mov	r1, r7
 80045a4:	f7fb fe28 	bl	80001f8 <__aeabi_dsub>
 80045a8:	462b      	mov	r3, r5
 80045aa:	4622      	mov	r2, r4
 80045ac:	f7fb fe24 	bl	80001f8 <__aeabi_dsub>
 80045b0:	9b02      	ldr	r3, [sp, #8]
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	e9ca 0102 	strd	r0, r1, [sl, #8]
 80045b8:	f6bf af0a 	bge.w	80043d0 <__ieee754_rem_pio2+0x80>
 80045bc:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 80045c0:	f8ca 3004 	str.w	r3, [sl, #4]
 80045c4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80045c8:	f8ca 8000 	str.w	r8, [sl]
 80045cc:	f8ca 0008 	str.w	r0, [sl, #8]
 80045d0:	f8ca 300c 	str.w	r3, [sl, #12]
 80045d4:	f1cb 0b00 	rsb	fp, fp, #0
 80045d8:	e6fa      	b.n	80043d0 <__ieee754_rem_pio2+0x80>
 80045da:	a327      	add	r3, pc, #156	; (adr r3, 8004678 <__ieee754_rem_pio2+0x328>)
 80045dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045e0:	ec51 0b18 	vmov	r0, r1, d8
 80045e4:	f7fb ffc0 	bl	8000568 <__aeabi_dmul>
 80045e8:	4604      	mov	r4, r0
 80045ea:	460d      	mov	r5, r1
 80045ec:	4602      	mov	r2, r0
 80045ee:	460b      	mov	r3, r1
 80045f0:	4640      	mov	r0, r8
 80045f2:	4649      	mov	r1, r9
 80045f4:	f7fb fe00 	bl	80001f8 <__aeabi_dsub>
 80045f8:	4602      	mov	r2, r0
 80045fa:	460b      	mov	r3, r1
 80045fc:	4606      	mov	r6, r0
 80045fe:	460f      	mov	r7, r1
 8004600:	4640      	mov	r0, r8
 8004602:	4649      	mov	r1, r9
 8004604:	f7fb fdf8 	bl	80001f8 <__aeabi_dsub>
 8004608:	4622      	mov	r2, r4
 800460a:	462b      	mov	r3, r5
 800460c:	f7fb fdf4 	bl	80001f8 <__aeabi_dsub>
 8004610:	a31b      	add	r3, pc, #108	; (adr r3, 8004680 <__ieee754_rem_pio2+0x330>)
 8004612:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004616:	4604      	mov	r4, r0
 8004618:	460d      	mov	r5, r1
 800461a:	ec51 0b18 	vmov	r0, r1, d8
 800461e:	f7fb ffa3 	bl	8000568 <__aeabi_dmul>
 8004622:	4622      	mov	r2, r4
 8004624:	462b      	mov	r3, r5
 8004626:	f7fb fde7 	bl	80001f8 <__aeabi_dsub>
 800462a:	4604      	mov	r4, r0
 800462c:	460d      	mov	r5, r1
 800462e:	e75f      	b.n	80044f0 <__ieee754_rem_pio2+0x1a0>
 8004630:	4b1b      	ldr	r3, [pc, #108]	; (80046a0 <__ieee754_rem_pio2+0x350>)
 8004632:	4598      	cmp	r8, r3
 8004634:	dd36      	ble.n	80046a4 <__ieee754_rem_pio2+0x354>
 8004636:	ee10 2a10 	vmov	r2, s0
 800463a:	462b      	mov	r3, r5
 800463c:	4620      	mov	r0, r4
 800463e:	4629      	mov	r1, r5
 8004640:	f7fb fdda 	bl	80001f8 <__aeabi_dsub>
 8004644:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8004648:	e9ca 0100 	strd	r0, r1, [sl]
 800464c:	e694      	b.n	8004378 <__ieee754_rem_pio2+0x28>
 800464e:	bf00      	nop
 8004650:	54400000 	.word	0x54400000
 8004654:	3ff921fb 	.word	0x3ff921fb
 8004658:	1a626331 	.word	0x1a626331
 800465c:	3dd0b461 	.word	0x3dd0b461
 8004660:	1a600000 	.word	0x1a600000
 8004664:	3dd0b461 	.word	0x3dd0b461
 8004668:	2e037073 	.word	0x2e037073
 800466c:	3ba3198a 	.word	0x3ba3198a
 8004670:	6dc9c883 	.word	0x6dc9c883
 8004674:	3fe45f30 	.word	0x3fe45f30
 8004678:	2e000000 	.word	0x2e000000
 800467c:	3ba3198a 	.word	0x3ba3198a
 8004680:	252049c1 	.word	0x252049c1
 8004684:	397b839a 	.word	0x397b839a
 8004688:	3fe921fb 	.word	0x3fe921fb
 800468c:	4002d97b 	.word	0x4002d97b
 8004690:	3ff921fb 	.word	0x3ff921fb
 8004694:	413921fb 	.word	0x413921fb
 8004698:	3fe00000 	.word	0x3fe00000
 800469c:	08005468 	.word	0x08005468
 80046a0:	7fefffff 	.word	0x7fefffff
 80046a4:	ea4f 5428 	mov.w	r4, r8, asr #20
 80046a8:	f2a4 4416 	subw	r4, r4, #1046	; 0x416
 80046ac:	ee10 0a10 	vmov	r0, s0
 80046b0:	eba8 5104 	sub.w	r1, r8, r4, lsl #20
 80046b4:	ee10 6a10 	vmov	r6, s0
 80046b8:	460f      	mov	r7, r1
 80046ba:	f7fc f9ef 	bl	8000a9c <__aeabi_d2iz>
 80046be:	f7fb fee9 	bl	8000494 <__aeabi_i2d>
 80046c2:	4602      	mov	r2, r0
 80046c4:	460b      	mov	r3, r1
 80046c6:	4630      	mov	r0, r6
 80046c8:	4639      	mov	r1, r7
 80046ca:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80046ce:	f7fb fd93 	bl	80001f8 <__aeabi_dsub>
 80046d2:	4b23      	ldr	r3, [pc, #140]	; (8004760 <__ieee754_rem_pio2+0x410>)
 80046d4:	2200      	movs	r2, #0
 80046d6:	f7fb ff47 	bl	8000568 <__aeabi_dmul>
 80046da:	460f      	mov	r7, r1
 80046dc:	4606      	mov	r6, r0
 80046de:	f7fc f9dd 	bl	8000a9c <__aeabi_d2iz>
 80046e2:	f7fb fed7 	bl	8000494 <__aeabi_i2d>
 80046e6:	4602      	mov	r2, r0
 80046e8:	460b      	mov	r3, r1
 80046ea:	4630      	mov	r0, r6
 80046ec:	4639      	mov	r1, r7
 80046ee:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80046f2:	f7fb fd81 	bl	80001f8 <__aeabi_dsub>
 80046f6:	4b1a      	ldr	r3, [pc, #104]	; (8004760 <__ieee754_rem_pio2+0x410>)
 80046f8:	2200      	movs	r2, #0
 80046fa:	f7fb ff35 	bl	8000568 <__aeabi_dmul>
 80046fe:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8004702:	ad04      	add	r5, sp, #16
 8004704:	f04f 0803 	mov.w	r8, #3
 8004708:	46a9      	mov	r9, r5
 800470a:	2600      	movs	r6, #0
 800470c:	2700      	movs	r7, #0
 800470e:	4632      	mov	r2, r6
 8004710:	463b      	mov	r3, r7
 8004712:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 8004716:	46c3      	mov	fp, r8
 8004718:	3d08      	subs	r5, #8
 800471a:	f108 38ff 	add.w	r8, r8, #4294967295
 800471e:	f7fc f98b 	bl	8000a38 <__aeabi_dcmpeq>
 8004722:	2800      	cmp	r0, #0
 8004724:	d1f3      	bne.n	800470e <__ieee754_rem_pio2+0x3be>
 8004726:	4b0f      	ldr	r3, [pc, #60]	; (8004764 <__ieee754_rem_pio2+0x414>)
 8004728:	9301      	str	r3, [sp, #4]
 800472a:	2302      	movs	r3, #2
 800472c:	9300      	str	r3, [sp, #0]
 800472e:	4622      	mov	r2, r4
 8004730:	465b      	mov	r3, fp
 8004732:	4651      	mov	r1, sl
 8004734:	4648      	mov	r0, r9
 8004736:	f000 f817 	bl	8004768 <__kernel_rem_pio2>
 800473a:	9b02      	ldr	r3, [sp, #8]
 800473c:	2b00      	cmp	r3, #0
 800473e:	4683      	mov	fp, r0
 8004740:	f6bf ae46 	bge.w	80043d0 <__ieee754_rem_pio2+0x80>
 8004744:	e9da 2100 	ldrd	r2, r1, [sl]
 8004748:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800474c:	e9ca 2300 	strd	r2, r3, [sl]
 8004750:	e9da 2102 	ldrd	r2, r1, [sl, #8]
 8004754:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8004758:	e9ca 2302 	strd	r2, r3, [sl, #8]
 800475c:	e73a      	b.n	80045d4 <__ieee754_rem_pio2+0x284>
 800475e:	bf00      	nop
 8004760:	41700000 	.word	0x41700000
 8004764:	080054e8 	.word	0x080054e8

08004768 <__kernel_rem_pio2>:
 8004768:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800476c:	ed2d 8b02 	vpush	{d8}
 8004770:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 8004774:	f112 0f14 	cmn.w	r2, #20
 8004778:	9308      	str	r3, [sp, #32]
 800477a:	9101      	str	r1, [sp, #4]
 800477c:	4bc4      	ldr	r3, [pc, #784]	; (8004a90 <__kernel_rem_pio2+0x328>)
 800477e:	99a6      	ldr	r1, [sp, #664]	; 0x298
 8004780:	900b      	str	r0, [sp, #44]	; 0x2c
 8004782:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8004786:	9302      	str	r3, [sp, #8]
 8004788:	9b08      	ldr	r3, [sp, #32]
 800478a:	f103 33ff 	add.w	r3, r3, #4294967295
 800478e:	bfa8      	it	ge
 8004790:	1ed4      	subge	r4, r2, #3
 8004792:	9306      	str	r3, [sp, #24]
 8004794:	bfb2      	itee	lt
 8004796:	2400      	movlt	r4, #0
 8004798:	2318      	movge	r3, #24
 800479a:	fb94 f4f3 	sdivge	r4, r4, r3
 800479e:	f06f 0317 	mvn.w	r3, #23
 80047a2:	fb04 3303 	mla	r3, r4, r3, r3
 80047a6:	eb03 0a02 	add.w	sl, r3, r2
 80047aa:	9b02      	ldr	r3, [sp, #8]
 80047ac:	9a06      	ldr	r2, [sp, #24]
 80047ae:	ed9f 8bb4 	vldr	d8, [pc, #720]	; 8004a80 <__kernel_rem_pio2+0x318>
 80047b2:	eb03 0802 	add.w	r8, r3, r2
 80047b6:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 80047b8:	1aa7      	subs	r7, r4, r2
 80047ba:	ae22      	add	r6, sp, #136	; 0x88
 80047bc:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 80047c0:	2500      	movs	r5, #0
 80047c2:	4545      	cmp	r5, r8
 80047c4:	dd13      	ble.n	80047ee <__kernel_rem_pio2+0x86>
 80047c6:	9b08      	ldr	r3, [sp, #32]
 80047c8:	ed9f 8bad 	vldr	d8, [pc, #692]	; 8004a80 <__kernel_rem_pio2+0x318>
 80047cc:	aa22      	add	r2, sp, #136	; 0x88
 80047ce:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 80047d2:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 80047d6:	f04f 0800 	mov.w	r8, #0
 80047da:	9b02      	ldr	r3, [sp, #8]
 80047dc:	4598      	cmp	r8, r3
 80047de:	dc2f      	bgt.n	8004840 <__kernel_rem_pio2+0xd8>
 80047e0:	ed8d 8b04 	vstr	d8, [sp, #16]
 80047e4:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
 80047e8:	462f      	mov	r7, r5
 80047ea:	2600      	movs	r6, #0
 80047ec:	e01b      	b.n	8004826 <__kernel_rem_pio2+0xbe>
 80047ee:	42ef      	cmn	r7, r5
 80047f0:	d407      	bmi.n	8004802 <__kernel_rem_pio2+0x9a>
 80047f2:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 80047f6:	f7fb fe4d 	bl	8000494 <__aeabi_i2d>
 80047fa:	e8e6 0102 	strd	r0, r1, [r6], #8
 80047fe:	3501      	adds	r5, #1
 8004800:	e7df      	b.n	80047c2 <__kernel_rem_pio2+0x5a>
 8004802:	ec51 0b18 	vmov	r0, r1, d8
 8004806:	e7f8      	b.n	80047fa <__kernel_rem_pio2+0x92>
 8004808:	e9d7 2300 	ldrd	r2, r3, [r7]
 800480c:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8004810:	f7fb feaa 	bl	8000568 <__aeabi_dmul>
 8004814:	4602      	mov	r2, r0
 8004816:	460b      	mov	r3, r1
 8004818:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800481c:	f7fb fcee 	bl	80001fc <__adddf3>
 8004820:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004824:	3601      	adds	r6, #1
 8004826:	9b06      	ldr	r3, [sp, #24]
 8004828:	429e      	cmp	r6, r3
 800482a:	f1a7 0708 	sub.w	r7, r7, #8
 800482e:	ddeb      	ble.n	8004808 <__kernel_rem_pio2+0xa0>
 8004830:	ed9d 7b04 	vldr	d7, [sp, #16]
 8004834:	f108 0801 	add.w	r8, r8, #1
 8004838:	ecab 7b02 	vstmia	fp!, {d7}
 800483c:	3508      	adds	r5, #8
 800483e:	e7cc      	b.n	80047da <__kernel_rem_pio2+0x72>
 8004840:	9b02      	ldr	r3, [sp, #8]
 8004842:	aa0e      	add	r2, sp, #56	; 0x38
 8004844:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8004848:	930d      	str	r3, [sp, #52]	; 0x34
 800484a:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 800484c:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8004850:	9c02      	ldr	r4, [sp, #8]
 8004852:	930c      	str	r3, [sp, #48]	; 0x30
 8004854:	00e3      	lsls	r3, r4, #3
 8004856:	930a      	str	r3, [sp, #40]	; 0x28
 8004858:	ab9a      	add	r3, sp, #616	; 0x268
 800485a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800485e:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 8004862:	f10d 0838 	add.w	r8, sp, #56	; 0x38
 8004866:	ab72      	add	r3, sp, #456	; 0x1c8
 8004868:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
 800486c:	46c3      	mov	fp, r8
 800486e:	46a1      	mov	r9, r4
 8004870:	f1b9 0f00 	cmp.w	r9, #0
 8004874:	f1a5 0508 	sub.w	r5, r5, #8
 8004878:	dc77      	bgt.n	800496a <__kernel_rem_pio2+0x202>
 800487a:	ec47 6b10 	vmov	d0, r6, r7
 800487e:	4650      	mov	r0, sl
 8004880:	f000 fd56 	bl	8005330 <scalbn>
 8004884:	ec57 6b10 	vmov	r6, r7, d0
 8004888:	2200      	movs	r2, #0
 800488a:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800488e:	ee10 0a10 	vmov	r0, s0
 8004892:	4639      	mov	r1, r7
 8004894:	f7fb fe68 	bl	8000568 <__aeabi_dmul>
 8004898:	ec41 0b10 	vmov	d0, r0, r1
 800489c:	f000 fcc8 	bl	8005230 <floor>
 80048a0:	4b7c      	ldr	r3, [pc, #496]	; (8004a94 <__kernel_rem_pio2+0x32c>)
 80048a2:	ec51 0b10 	vmov	r0, r1, d0
 80048a6:	2200      	movs	r2, #0
 80048a8:	f7fb fe5e 	bl	8000568 <__aeabi_dmul>
 80048ac:	4602      	mov	r2, r0
 80048ae:	460b      	mov	r3, r1
 80048b0:	4630      	mov	r0, r6
 80048b2:	4639      	mov	r1, r7
 80048b4:	f7fb fca0 	bl	80001f8 <__aeabi_dsub>
 80048b8:	460f      	mov	r7, r1
 80048ba:	4606      	mov	r6, r0
 80048bc:	f7fc f8ee 	bl	8000a9c <__aeabi_d2iz>
 80048c0:	9004      	str	r0, [sp, #16]
 80048c2:	f7fb fde7 	bl	8000494 <__aeabi_i2d>
 80048c6:	4602      	mov	r2, r0
 80048c8:	460b      	mov	r3, r1
 80048ca:	4630      	mov	r0, r6
 80048cc:	4639      	mov	r1, r7
 80048ce:	f7fb fc93 	bl	80001f8 <__aeabi_dsub>
 80048d2:	f1ba 0f00 	cmp.w	sl, #0
 80048d6:	4606      	mov	r6, r0
 80048d8:	460f      	mov	r7, r1
 80048da:	dd6d      	ble.n	80049b8 <__kernel_rem_pio2+0x250>
 80048dc:	1e62      	subs	r2, r4, #1
 80048de:	ab0e      	add	r3, sp, #56	; 0x38
 80048e0:	9d04      	ldr	r5, [sp, #16]
 80048e2:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 80048e6:	f1ca 0118 	rsb	r1, sl, #24
 80048ea:	fa40 f301 	asr.w	r3, r0, r1
 80048ee:	441d      	add	r5, r3
 80048f0:	408b      	lsls	r3, r1
 80048f2:	1ac0      	subs	r0, r0, r3
 80048f4:	ab0e      	add	r3, sp, #56	; 0x38
 80048f6:	9504      	str	r5, [sp, #16]
 80048f8:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 80048fc:	f1ca 0317 	rsb	r3, sl, #23
 8004900:	fa40 fb03 	asr.w	fp, r0, r3
 8004904:	f1bb 0f00 	cmp.w	fp, #0
 8004908:	dd65      	ble.n	80049d6 <__kernel_rem_pio2+0x26e>
 800490a:	9b04      	ldr	r3, [sp, #16]
 800490c:	2200      	movs	r2, #0
 800490e:	3301      	adds	r3, #1
 8004910:	9304      	str	r3, [sp, #16]
 8004912:	4615      	mov	r5, r2
 8004914:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8004918:	4294      	cmp	r4, r2
 800491a:	f300 809c 	bgt.w	8004a56 <__kernel_rem_pio2+0x2ee>
 800491e:	f1ba 0f00 	cmp.w	sl, #0
 8004922:	dd07      	ble.n	8004934 <__kernel_rem_pio2+0x1cc>
 8004924:	f1ba 0f01 	cmp.w	sl, #1
 8004928:	f000 80c0 	beq.w	8004aac <__kernel_rem_pio2+0x344>
 800492c:	f1ba 0f02 	cmp.w	sl, #2
 8004930:	f000 80c6 	beq.w	8004ac0 <__kernel_rem_pio2+0x358>
 8004934:	f1bb 0f02 	cmp.w	fp, #2
 8004938:	d14d      	bne.n	80049d6 <__kernel_rem_pio2+0x26e>
 800493a:	4632      	mov	r2, r6
 800493c:	463b      	mov	r3, r7
 800493e:	4956      	ldr	r1, [pc, #344]	; (8004a98 <__kernel_rem_pio2+0x330>)
 8004940:	2000      	movs	r0, #0
 8004942:	f7fb fc59 	bl	80001f8 <__aeabi_dsub>
 8004946:	4606      	mov	r6, r0
 8004948:	460f      	mov	r7, r1
 800494a:	2d00      	cmp	r5, #0
 800494c:	d043      	beq.n	80049d6 <__kernel_rem_pio2+0x26e>
 800494e:	4650      	mov	r0, sl
 8004950:	ed9f 0b4d 	vldr	d0, [pc, #308]	; 8004a88 <__kernel_rem_pio2+0x320>
 8004954:	f000 fcec 	bl	8005330 <scalbn>
 8004958:	4630      	mov	r0, r6
 800495a:	4639      	mov	r1, r7
 800495c:	ec53 2b10 	vmov	r2, r3, d0
 8004960:	f7fb fc4a 	bl	80001f8 <__aeabi_dsub>
 8004964:	4606      	mov	r6, r0
 8004966:	460f      	mov	r7, r1
 8004968:	e035      	b.n	80049d6 <__kernel_rem_pio2+0x26e>
 800496a:	4b4c      	ldr	r3, [pc, #304]	; (8004a9c <__kernel_rem_pio2+0x334>)
 800496c:	2200      	movs	r2, #0
 800496e:	4630      	mov	r0, r6
 8004970:	4639      	mov	r1, r7
 8004972:	f7fb fdf9 	bl	8000568 <__aeabi_dmul>
 8004976:	f7fc f891 	bl	8000a9c <__aeabi_d2iz>
 800497a:	f7fb fd8b 	bl	8000494 <__aeabi_i2d>
 800497e:	4602      	mov	r2, r0
 8004980:	460b      	mov	r3, r1
 8004982:	ec43 2b18 	vmov	d8, r2, r3
 8004986:	4b46      	ldr	r3, [pc, #280]	; (8004aa0 <__kernel_rem_pio2+0x338>)
 8004988:	2200      	movs	r2, #0
 800498a:	f7fb fded 	bl	8000568 <__aeabi_dmul>
 800498e:	4602      	mov	r2, r0
 8004990:	460b      	mov	r3, r1
 8004992:	4630      	mov	r0, r6
 8004994:	4639      	mov	r1, r7
 8004996:	f7fb fc2f 	bl	80001f8 <__aeabi_dsub>
 800499a:	f7fc f87f 	bl	8000a9c <__aeabi_d2iz>
 800499e:	e9d5 2300 	ldrd	r2, r3, [r5]
 80049a2:	f84b 0b04 	str.w	r0, [fp], #4
 80049a6:	ec51 0b18 	vmov	r0, r1, d8
 80049aa:	f7fb fc27 	bl	80001fc <__adddf3>
 80049ae:	f109 39ff 	add.w	r9, r9, #4294967295
 80049b2:	4606      	mov	r6, r0
 80049b4:	460f      	mov	r7, r1
 80049b6:	e75b      	b.n	8004870 <__kernel_rem_pio2+0x108>
 80049b8:	d106      	bne.n	80049c8 <__kernel_rem_pio2+0x260>
 80049ba:	1e63      	subs	r3, r4, #1
 80049bc:	aa0e      	add	r2, sp, #56	; 0x38
 80049be:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80049c2:	ea4f 5be0 	mov.w	fp, r0, asr #23
 80049c6:	e79d      	b.n	8004904 <__kernel_rem_pio2+0x19c>
 80049c8:	4b36      	ldr	r3, [pc, #216]	; (8004aa4 <__kernel_rem_pio2+0x33c>)
 80049ca:	2200      	movs	r2, #0
 80049cc:	f7fc f852 	bl	8000a74 <__aeabi_dcmpge>
 80049d0:	2800      	cmp	r0, #0
 80049d2:	d13d      	bne.n	8004a50 <__kernel_rem_pio2+0x2e8>
 80049d4:	4683      	mov	fp, r0
 80049d6:	2200      	movs	r2, #0
 80049d8:	2300      	movs	r3, #0
 80049da:	4630      	mov	r0, r6
 80049dc:	4639      	mov	r1, r7
 80049de:	f7fc f82b 	bl	8000a38 <__aeabi_dcmpeq>
 80049e2:	2800      	cmp	r0, #0
 80049e4:	f000 80c0 	beq.w	8004b68 <__kernel_rem_pio2+0x400>
 80049e8:	1e65      	subs	r5, r4, #1
 80049ea:	462b      	mov	r3, r5
 80049ec:	2200      	movs	r2, #0
 80049ee:	9902      	ldr	r1, [sp, #8]
 80049f0:	428b      	cmp	r3, r1
 80049f2:	da6c      	bge.n	8004ace <__kernel_rem_pio2+0x366>
 80049f4:	2a00      	cmp	r2, #0
 80049f6:	f000 8089 	beq.w	8004b0c <__kernel_rem_pio2+0x3a4>
 80049fa:	ab0e      	add	r3, sp, #56	; 0x38
 80049fc:	f1aa 0a18 	sub.w	sl, sl, #24
 8004a00:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	f000 80ad 	beq.w	8004b64 <__kernel_rem_pio2+0x3fc>
 8004a0a:	4650      	mov	r0, sl
 8004a0c:	ed9f 0b1e 	vldr	d0, [pc, #120]	; 8004a88 <__kernel_rem_pio2+0x320>
 8004a10:	f000 fc8e 	bl	8005330 <scalbn>
 8004a14:	ab9a      	add	r3, sp, #616	; 0x268
 8004a16:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8004a1a:	ec57 6b10 	vmov	r6, r7, d0
 8004a1e:	00ec      	lsls	r4, r5, #3
 8004a20:	f1a3 0898 	sub.w	r8, r3, #152	; 0x98
 8004a24:	46aa      	mov	sl, r5
 8004a26:	f1ba 0f00 	cmp.w	sl, #0
 8004a2a:	f280 80d6 	bge.w	8004bda <__kernel_rem_pio2+0x472>
 8004a2e:	ed9f 8b14 	vldr	d8, [pc, #80]	; 8004a80 <__kernel_rem_pio2+0x318>
 8004a32:	462e      	mov	r6, r5
 8004a34:	2e00      	cmp	r6, #0
 8004a36:	f2c0 8104 	blt.w	8004c42 <__kernel_rem_pio2+0x4da>
 8004a3a:	ab72      	add	r3, sp, #456	; 0x1c8
 8004a3c:	ed8d 8b06 	vstr	d8, [sp, #24]
 8004a40:	f8df a064 	ldr.w	sl, [pc, #100]	; 8004aa8 <__kernel_rem_pio2+0x340>
 8004a44:	eb03 09c6 	add.w	r9, r3, r6, lsl #3
 8004a48:	f04f 0800 	mov.w	r8, #0
 8004a4c:	1baf      	subs	r7, r5, r6
 8004a4e:	e0ea      	b.n	8004c26 <__kernel_rem_pio2+0x4be>
 8004a50:	f04f 0b02 	mov.w	fp, #2
 8004a54:	e759      	b.n	800490a <__kernel_rem_pio2+0x1a2>
 8004a56:	f8d8 3000 	ldr.w	r3, [r8]
 8004a5a:	b955      	cbnz	r5, 8004a72 <__kernel_rem_pio2+0x30a>
 8004a5c:	b123      	cbz	r3, 8004a68 <__kernel_rem_pio2+0x300>
 8004a5e:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 8004a62:	f8c8 3000 	str.w	r3, [r8]
 8004a66:	2301      	movs	r3, #1
 8004a68:	3201      	adds	r2, #1
 8004a6a:	f108 0804 	add.w	r8, r8, #4
 8004a6e:	461d      	mov	r5, r3
 8004a70:	e752      	b.n	8004918 <__kernel_rem_pio2+0x1b0>
 8004a72:	1acb      	subs	r3, r1, r3
 8004a74:	f8c8 3000 	str.w	r3, [r8]
 8004a78:	462b      	mov	r3, r5
 8004a7a:	e7f5      	b.n	8004a68 <__kernel_rem_pio2+0x300>
 8004a7c:	f3af 8000 	nop.w
	...
 8004a8c:	3ff00000 	.word	0x3ff00000
 8004a90:	08005630 	.word	0x08005630
 8004a94:	40200000 	.word	0x40200000
 8004a98:	3ff00000 	.word	0x3ff00000
 8004a9c:	3e700000 	.word	0x3e700000
 8004aa0:	41700000 	.word	0x41700000
 8004aa4:	3fe00000 	.word	0x3fe00000
 8004aa8:	080055f0 	.word	0x080055f0
 8004aac:	1e62      	subs	r2, r4, #1
 8004aae:	ab0e      	add	r3, sp, #56	; 0x38
 8004ab0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004ab4:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8004ab8:	a90e      	add	r1, sp, #56	; 0x38
 8004aba:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8004abe:	e739      	b.n	8004934 <__kernel_rem_pio2+0x1cc>
 8004ac0:	1e62      	subs	r2, r4, #1
 8004ac2:	ab0e      	add	r3, sp, #56	; 0x38
 8004ac4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004ac8:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8004acc:	e7f4      	b.n	8004ab8 <__kernel_rem_pio2+0x350>
 8004ace:	a90e      	add	r1, sp, #56	; 0x38
 8004ad0:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8004ad4:	3b01      	subs	r3, #1
 8004ad6:	430a      	orrs	r2, r1
 8004ad8:	e789      	b.n	80049ee <__kernel_rem_pio2+0x286>
 8004ada:	3301      	adds	r3, #1
 8004adc:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 8004ae0:	2900      	cmp	r1, #0
 8004ae2:	d0fa      	beq.n	8004ada <__kernel_rem_pio2+0x372>
 8004ae4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004ae6:	f502 721a 	add.w	r2, r2, #616	; 0x268
 8004aea:	446a      	add	r2, sp
 8004aec:	3a98      	subs	r2, #152	; 0x98
 8004aee:	920a      	str	r2, [sp, #40]	; 0x28
 8004af0:	9a08      	ldr	r2, [sp, #32]
 8004af2:	18e3      	adds	r3, r4, r3
 8004af4:	18a5      	adds	r5, r4, r2
 8004af6:	aa22      	add	r2, sp, #136	; 0x88
 8004af8:	f104 0801 	add.w	r8, r4, #1
 8004afc:	eb02 05c5 	add.w	r5, r2, r5, lsl #3
 8004b00:	9304      	str	r3, [sp, #16]
 8004b02:	9b04      	ldr	r3, [sp, #16]
 8004b04:	4543      	cmp	r3, r8
 8004b06:	da04      	bge.n	8004b12 <__kernel_rem_pio2+0x3aa>
 8004b08:	461c      	mov	r4, r3
 8004b0a:	e6a3      	b.n	8004854 <__kernel_rem_pio2+0xec>
 8004b0c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8004b0e:	2301      	movs	r3, #1
 8004b10:	e7e4      	b.n	8004adc <__kernel_rem_pio2+0x374>
 8004b12:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004b14:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 8004b18:	f7fb fcbc 	bl	8000494 <__aeabi_i2d>
 8004b1c:	e8e5 0102 	strd	r0, r1, [r5], #8
 8004b20:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004b22:	46ab      	mov	fp, r5
 8004b24:	461c      	mov	r4, r3
 8004b26:	f04f 0900 	mov.w	r9, #0
 8004b2a:	2600      	movs	r6, #0
 8004b2c:	2700      	movs	r7, #0
 8004b2e:	9b06      	ldr	r3, [sp, #24]
 8004b30:	4599      	cmp	r9, r3
 8004b32:	dd06      	ble.n	8004b42 <__kernel_rem_pio2+0x3da>
 8004b34:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004b36:	e8e3 6702 	strd	r6, r7, [r3], #8
 8004b3a:	f108 0801 	add.w	r8, r8, #1
 8004b3e:	930a      	str	r3, [sp, #40]	; 0x28
 8004b40:	e7df      	b.n	8004b02 <__kernel_rem_pio2+0x39a>
 8004b42:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 8004b46:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 8004b4a:	f7fb fd0d 	bl	8000568 <__aeabi_dmul>
 8004b4e:	4602      	mov	r2, r0
 8004b50:	460b      	mov	r3, r1
 8004b52:	4630      	mov	r0, r6
 8004b54:	4639      	mov	r1, r7
 8004b56:	f7fb fb51 	bl	80001fc <__adddf3>
 8004b5a:	f109 0901 	add.w	r9, r9, #1
 8004b5e:	4606      	mov	r6, r0
 8004b60:	460f      	mov	r7, r1
 8004b62:	e7e4      	b.n	8004b2e <__kernel_rem_pio2+0x3c6>
 8004b64:	3d01      	subs	r5, #1
 8004b66:	e748      	b.n	80049fa <__kernel_rem_pio2+0x292>
 8004b68:	ec47 6b10 	vmov	d0, r6, r7
 8004b6c:	f1ca 0000 	rsb	r0, sl, #0
 8004b70:	f000 fbde 	bl	8005330 <scalbn>
 8004b74:	ec57 6b10 	vmov	r6, r7, d0
 8004b78:	4ba0      	ldr	r3, [pc, #640]	; (8004dfc <__kernel_rem_pio2+0x694>)
 8004b7a:	ee10 0a10 	vmov	r0, s0
 8004b7e:	2200      	movs	r2, #0
 8004b80:	4639      	mov	r1, r7
 8004b82:	f7fb ff77 	bl	8000a74 <__aeabi_dcmpge>
 8004b86:	b1f8      	cbz	r0, 8004bc8 <__kernel_rem_pio2+0x460>
 8004b88:	4b9d      	ldr	r3, [pc, #628]	; (8004e00 <__kernel_rem_pio2+0x698>)
 8004b8a:	2200      	movs	r2, #0
 8004b8c:	4630      	mov	r0, r6
 8004b8e:	4639      	mov	r1, r7
 8004b90:	f7fb fcea 	bl	8000568 <__aeabi_dmul>
 8004b94:	f7fb ff82 	bl	8000a9c <__aeabi_d2iz>
 8004b98:	4680      	mov	r8, r0
 8004b9a:	f7fb fc7b 	bl	8000494 <__aeabi_i2d>
 8004b9e:	4b97      	ldr	r3, [pc, #604]	; (8004dfc <__kernel_rem_pio2+0x694>)
 8004ba0:	2200      	movs	r2, #0
 8004ba2:	f7fb fce1 	bl	8000568 <__aeabi_dmul>
 8004ba6:	460b      	mov	r3, r1
 8004ba8:	4602      	mov	r2, r0
 8004baa:	4639      	mov	r1, r7
 8004bac:	4630      	mov	r0, r6
 8004bae:	f7fb fb23 	bl	80001f8 <__aeabi_dsub>
 8004bb2:	f7fb ff73 	bl	8000a9c <__aeabi_d2iz>
 8004bb6:	1c65      	adds	r5, r4, #1
 8004bb8:	ab0e      	add	r3, sp, #56	; 0x38
 8004bba:	f10a 0a18 	add.w	sl, sl, #24
 8004bbe:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8004bc2:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 8004bc6:	e720      	b.n	8004a0a <__kernel_rem_pio2+0x2a2>
 8004bc8:	4630      	mov	r0, r6
 8004bca:	4639      	mov	r1, r7
 8004bcc:	f7fb ff66 	bl	8000a9c <__aeabi_d2iz>
 8004bd0:	ab0e      	add	r3, sp, #56	; 0x38
 8004bd2:	4625      	mov	r5, r4
 8004bd4:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8004bd8:	e717      	b.n	8004a0a <__kernel_rem_pio2+0x2a2>
 8004bda:	ab0e      	add	r3, sp, #56	; 0x38
 8004bdc:	f853 002a 	ldr.w	r0, [r3, sl, lsl #2]
 8004be0:	f7fb fc58 	bl	8000494 <__aeabi_i2d>
 8004be4:	4632      	mov	r2, r6
 8004be6:	463b      	mov	r3, r7
 8004be8:	f7fb fcbe 	bl	8000568 <__aeabi_dmul>
 8004bec:	4b84      	ldr	r3, [pc, #528]	; (8004e00 <__kernel_rem_pio2+0x698>)
 8004bee:	e968 0102 	strd	r0, r1, [r8, #-8]!
 8004bf2:	2200      	movs	r2, #0
 8004bf4:	4630      	mov	r0, r6
 8004bf6:	4639      	mov	r1, r7
 8004bf8:	f7fb fcb6 	bl	8000568 <__aeabi_dmul>
 8004bfc:	f10a 3aff 	add.w	sl, sl, #4294967295
 8004c00:	4606      	mov	r6, r0
 8004c02:	460f      	mov	r7, r1
 8004c04:	e70f      	b.n	8004a26 <__kernel_rem_pio2+0x2be>
 8004c06:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 8004c0a:	e8fa 0102 	ldrd	r0, r1, [sl], #8
 8004c0e:	f7fb fcab 	bl	8000568 <__aeabi_dmul>
 8004c12:	4602      	mov	r2, r0
 8004c14:	460b      	mov	r3, r1
 8004c16:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004c1a:	f7fb faef 	bl	80001fc <__adddf3>
 8004c1e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8004c22:	f108 0801 	add.w	r8, r8, #1
 8004c26:	9b02      	ldr	r3, [sp, #8]
 8004c28:	4598      	cmp	r8, r3
 8004c2a:	dc01      	bgt.n	8004c30 <__kernel_rem_pio2+0x4c8>
 8004c2c:	45b8      	cmp	r8, r7
 8004c2e:	ddea      	ble.n	8004c06 <__kernel_rem_pio2+0x49e>
 8004c30:	ed9d 7b06 	vldr	d7, [sp, #24]
 8004c34:	ab4a      	add	r3, sp, #296	; 0x128
 8004c36:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8004c3a:	ed87 7b00 	vstr	d7, [r7]
 8004c3e:	3e01      	subs	r6, #1
 8004c40:	e6f8      	b.n	8004a34 <__kernel_rem_pio2+0x2cc>
 8004c42:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 8004c44:	2b02      	cmp	r3, #2
 8004c46:	dc0b      	bgt.n	8004c60 <__kernel_rem_pio2+0x4f8>
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	dc35      	bgt.n	8004cb8 <__kernel_rem_pio2+0x550>
 8004c4c:	d059      	beq.n	8004d02 <__kernel_rem_pio2+0x59a>
 8004c4e:	9b04      	ldr	r3, [sp, #16]
 8004c50:	f003 0007 	and.w	r0, r3, #7
 8004c54:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 8004c58:	ecbd 8b02 	vpop	{d8}
 8004c5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004c60:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 8004c62:	2b03      	cmp	r3, #3
 8004c64:	d1f3      	bne.n	8004c4e <__kernel_rem_pio2+0x4e6>
 8004c66:	ab4a      	add	r3, sp, #296	; 0x128
 8004c68:	4423      	add	r3, r4
 8004c6a:	9306      	str	r3, [sp, #24]
 8004c6c:	461c      	mov	r4, r3
 8004c6e:	469a      	mov	sl, r3
 8004c70:	9502      	str	r5, [sp, #8]
 8004c72:	9b02      	ldr	r3, [sp, #8]
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	f1aa 0a08 	sub.w	sl, sl, #8
 8004c7a:	dc6b      	bgt.n	8004d54 <__kernel_rem_pio2+0x5ec>
 8004c7c:	46aa      	mov	sl, r5
 8004c7e:	f1ba 0f01 	cmp.w	sl, #1
 8004c82:	f1a4 0408 	sub.w	r4, r4, #8
 8004c86:	f300 8085 	bgt.w	8004d94 <__kernel_rem_pio2+0x62c>
 8004c8a:	9c06      	ldr	r4, [sp, #24]
 8004c8c:	2000      	movs	r0, #0
 8004c8e:	3408      	adds	r4, #8
 8004c90:	2100      	movs	r1, #0
 8004c92:	2d01      	cmp	r5, #1
 8004c94:	f300 809d 	bgt.w	8004dd2 <__kernel_rem_pio2+0x66a>
 8004c98:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	; 0x128
 8004c9c:	e9dd 784c 	ldrd	r7, r8, [sp, #304]	; 0x130
 8004ca0:	f1bb 0f00 	cmp.w	fp, #0
 8004ca4:	f040 809b 	bne.w	8004dde <__kernel_rem_pio2+0x676>
 8004ca8:	9b01      	ldr	r3, [sp, #4]
 8004caa:	e9c3 5600 	strd	r5, r6, [r3]
 8004cae:	e9c3 7802 	strd	r7, r8, [r3, #8]
 8004cb2:	e9c3 0104 	strd	r0, r1, [r3, #16]
 8004cb6:	e7ca      	b.n	8004c4e <__kernel_rem_pio2+0x4e6>
 8004cb8:	3408      	adds	r4, #8
 8004cba:	ab4a      	add	r3, sp, #296	; 0x128
 8004cbc:	441c      	add	r4, r3
 8004cbe:	462e      	mov	r6, r5
 8004cc0:	2000      	movs	r0, #0
 8004cc2:	2100      	movs	r1, #0
 8004cc4:	2e00      	cmp	r6, #0
 8004cc6:	da36      	bge.n	8004d36 <__kernel_rem_pio2+0x5ce>
 8004cc8:	f1bb 0f00 	cmp.w	fp, #0
 8004ccc:	d039      	beq.n	8004d42 <__kernel_rem_pio2+0x5da>
 8004cce:	4602      	mov	r2, r0
 8004cd0:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8004cd4:	9c01      	ldr	r4, [sp, #4]
 8004cd6:	e9c4 2300 	strd	r2, r3, [r4]
 8004cda:	4602      	mov	r2, r0
 8004cdc:	460b      	mov	r3, r1
 8004cde:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 8004ce2:	f7fb fa89 	bl	80001f8 <__aeabi_dsub>
 8004ce6:	ae4c      	add	r6, sp, #304	; 0x130
 8004ce8:	2401      	movs	r4, #1
 8004cea:	42a5      	cmp	r5, r4
 8004cec:	da2c      	bge.n	8004d48 <__kernel_rem_pio2+0x5e0>
 8004cee:	f1bb 0f00 	cmp.w	fp, #0
 8004cf2:	d002      	beq.n	8004cfa <__kernel_rem_pio2+0x592>
 8004cf4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8004cf8:	4619      	mov	r1, r3
 8004cfa:	9b01      	ldr	r3, [sp, #4]
 8004cfc:	e9c3 0102 	strd	r0, r1, [r3, #8]
 8004d00:	e7a5      	b.n	8004c4e <__kernel_rem_pio2+0x4e6>
 8004d02:	f504 731a 	add.w	r3, r4, #616	; 0x268
 8004d06:	eb0d 0403 	add.w	r4, sp, r3
 8004d0a:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 8004d0e:	2000      	movs	r0, #0
 8004d10:	2100      	movs	r1, #0
 8004d12:	2d00      	cmp	r5, #0
 8004d14:	da09      	bge.n	8004d2a <__kernel_rem_pio2+0x5c2>
 8004d16:	f1bb 0f00 	cmp.w	fp, #0
 8004d1a:	d002      	beq.n	8004d22 <__kernel_rem_pio2+0x5ba>
 8004d1c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8004d20:	4619      	mov	r1, r3
 8004d22:	9b01      	ldr	r3, [sp, #4]
 8004d24:	e9c3 0100 	strd	r0, r1, [r3]
 8004d28:	e791      	b.n	8004c4e <__kernel_rem_pio2+0x4e6>
 8004d2a:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8004d2e:	f7fb fa65 	bl	80001fc <__adddf3>
 8004d32:	3d01      	subs	r5, #1
 8004d34:	e7ed      	b.n	8004d12 <__kernel_rem_pio2+0x5aa>
 8004d36:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8004d3a:	f7fb fa5f 	bl	80001fc <__adddf3>
 8004d3e:	3e01      	subs	r6, #1
 8004d40:	e7c0      	b.n	8004cc4 <__kernel_rem_pio2+0x55c>
 8004d42:	4602      	mov	r2, r0
 8004d44:	460b      	mov	r3, r1
 8004d46:	e7c5      	b.n	8004cd4 <__kernel_rem_pio2+0x56c>
 8004d48:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 8004d4c:	f7fb fa56 	bl	80001fc <__adddf3>
 8004d50:	3401      	adds	r4, #1
 8004d52:	e7ca      	b.n	8004cea <__kernel_rem_pio2+0x582>
 8004d54:	e9da 8900 	ldrd	r8, r9, [sl]
 8004d58:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 8004d5c:	9b02      	ldr	r3, [sp, #8]
 8004d5e:	3b01      	subs	r3, #1
 8004d60:	9302      	str	r3, [sp, #8]
 8004d62:	4632      	mov	r2, r6
 8004d64:	463b      	mov	r3, r7
 8004d66:	4640      	mov	r0, r8
 8004d68:	4649      	mov	r1, r9
 8004d6a:	f7fb fa47 	bl	80001fc <__adddf3>
 8004d6e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8004d72:	4602      	mov	r2, r0
 8004d74:	460b      	mov	r3, r1
 8004d76:	4640      	mov	r0, r8
 8004d78:	4649      	mov	r1, r9
 8004d7a:	f7fb fa3d 	bl	80001f8 <__aeabi_dsub>
 8004d7e:	4632      	mov	r2, r6
 8004d80:	463b      	mov	r3, r7
 8004d82:	f7fb fa3b 	bl	80001fc <__adddf3>
 8004d86:	ed9d 7b08 	vldr	d7, [sp, #32]
 8004d8a:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8004d8e:	ed8a 7b00 	vstr	d7, [sl]
 8004d92:	e76e      	b.n	8004c72 <__kernel_rem_pio2+0x50a>
 8004d94:	e9d4 8900 	ldrd	r8, r9, [r4]
 8004d98:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 8004d9c:	4640      	mov	r0, r8
 8004d9e:	4632      	mov	r2, r6
 8004da0:	463b      	mov	r3, r7
 8004da2:	4649      	mov	r1, r9
 8004da4:	f7fb fa2a 	bl	80001fc <__adddf3>
 8004da8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004dac:	4602      	mov	r2, r0
 8004dae:	460b      	mov	r3, r1
 8004db0:	4640      	mov	r0, r8
 8004db2:	4649      	mov	r1, r9
 8004db4:	f7fb fa20 	bl	80001f8 <__aeabi_dsub>
 8004db8:	4632      	mov	r2, r6
 8004dba:	463b      	mov	r3, r7
 8004dbc:	f7fb fa1e 	bl	80001fc <__adddf3>
 8004dc0:	ed9d 7b02 	vldr	d7, [sp, #8]
 8004dc4:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8004dc8:	ed84 7b00 	vstr	d7, [r4]
 8004dcc:	f10a 3aff 	add.w	sl, sl, #4294967295
 8004dd0:	e755      	b.n	8004c7e <__kernel_rem_pio2+0x516>
 8004dd2:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8004dd6:	f7fb fa11 	bl	80001fc <__adddf3>
 8004dda:	3d01      	subs	r5, #1
 8004ddc:	e759      	b.n	8004c92 <__kernel_rem_pio2+0x52a>
 8004dde:	9b01      	ldr	r3, [sp, #4]
 8004de0:	9a01      	ldr	r2, [sp, #4]
 8004de2:	601d      	str	r5, [r3, #0]
 8004de4:	f106 4400 	add.w	r4, r6, #2147483648	; 0x80000000
 8004de8:	605c      	str	r4, [r3, #4]
 8004dea:	609f      	str	r7, [r3, #8]
 8004dec:	f108 4300 	add.w	r3, r8, #2147483648	; 0x80000000
 8004df0:	60d3      	str	r3, [r2, #12]
 8004df2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8004df6:	6110      	str	r0, [r2, #16]
 8004df8:	6153      	str	r3, [r2, #20]
 8004dfa:	e728      	b.n	8004c4e <__kernel_rem_pio2+0x4e6>
 8004dfc:	41700000 	.word	0x41700000
 8004e00:	3e700000 	.word	0x3e700000
 8004e04:	00000000 	.word	0x00000000

08004e08 <__kernel_tan>:
 8004e08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004e0c:	ed2d 8b06 	vpush	{d8-d10}
 8004e10:	ec5b ab10 	vmov	sl, fp, d0
 8004e14:	4be0      	ldr	r3, [pc, #896]	; (8005198 <__kernel_tan+0x390>)
 8004e16:	b083      	sub	sp, #12
 8004e18:	f02b 4700 	bic.w	r7, fp, #2147483648	; 0x80000000
 8004e1c:	429f      	cmp	r7, r3
 8004e1e:	ec59 8b11 	vmov	r8, r9, d1
 8004e22:	4606      	mov	r6, r0
 8004e24:	f8cd b000 	str.w	fp, [sp]
 8004e28:	dc61      	bgt.n	8004eee <__kernel_tan+0xe6>
 8004e2a:	ee10 0a10 	vmov	r0, s0
 8004e2e:	4659      	mov	r1, fp
 8004e30:	f7fb fe34 	bl	8000a9c <__aeabi_d2iz>
 8004e34:	4605      	mov	r5, r0
 8004e36:	2800      	cmp	r0, #0
 8004e38:	f040 8083 	bne.w	8004f42 <__kernel_tan+0x13a>
 8004e3c:	1c73      	adds	r3, r6, #1
 8004e3e:	4652      	mov	r2, sl
 8004e40:	4313      	orrs	r3, r2
 8004e42:	433b      	orrs	r3, r7
 8004e44:	d112      	bne.n	8004e6c <__kernel_tan+0x64>
 8004e46:	ec4b ab10 	vmov	d0, sl, fp
 8004e4a:	f000 f9e7 	bl	800521c <fabs>
 8004e4e:	49d3      	ldr	r1, [pc, #844]	; (800519c <__kernel_tan+0x394>)
 8004e50:	ec53 2b10 	vmov	r2, r3, d0
 8004e54:	2000      	movs	r0, #0
 8004e56:	f7fb fcb1 	bl	80007bc <__aeabi_ddiv>
 8004e5a:	4682      	mov	sl, r0
 8004e5c:	468b      	mov	fp, r1
 8004e5e:	ec4b ab10 	vmov	d0, sl, fp
 8004e62:	b003      	add	sp, #12
 8004e64:	ecbd 8b06 	vpop	{d8-d10}
 8004e68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004e6c:	2e01      	cmp	r6, #1
 8004e6e:	d0f6      	beq.n	8004e5e <__kernel_tan+0x56>
 8004e70:	4642      	mov	r2, r8
 8004e72:	464b      	mov	r3, r9
 8004e74:	4650      	mov	r0, sl
 8004e76:	4659      	mov	r1, fp
 8004e78:	f7fb f9c0 	bl	80001fc <__adddf3>
 8004e7c:	4602      	mov	r2, r0
 8004e7e:	460b      	mov	r3, r1
 8004e80:	460f      	mov	r7, r1
 8004e82:	2000      	movs	r0, #0
 8004e84:	49c6      	ldr	r1, [pc, #792]	; (80051a0 <__kernel_tan+0x398>)
 8004e86:	f7fb fc99 	bl	80007bc <__aeabi_ddiv>
 8004e8a:	e9cd 0100 	strd	r0, r1, [sp]
 8004e8e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004e92:	462e      	mov	r6, r5
 8004e94:	4652      	mov	r2, sl
 8004e96:	462c      	mov	r4, r5
 8004e98:	4630      	mov	r0, r6
 8004e9a:	461d      	mov	r5, r3
 8004e9c:	4639      	mov	r1, r7
 8004e9e:	465b      	mov	r3, fp
 8004ea0:	f7fb f9aa 	bl	80001f8 <__aeabi_dsub>
 8004ea4:	4602      	mov	r2, r0
 8004ea6:	460b      	mov	r3, r1
 8004ea8:	4640      	mov	r0, r8
 8004eaa:	4649      	mov	r1, r9
 8004eac:	f7fb f9a4 	bl	80001f8 <__aeabi_dsub>
 8004eb0:	4632      	mov	r2, r6
 8004eb2:	462b      	mov	r3, r5
 8004eb4:	f7fb fb58 	bl	8000568 <__aeabi_dmul>
 8004eb8:	4632      	mov	r2, r6
 8004eba:	4680      	mov	r8, r0
 8004ebc:	4689      	mov	r9, r1
 8004ebe:	462b      	mov	r3, r5
 8004ec0:	4630      	mov	r0, r6
 8004ec2:	4639      	mov	r1, r7
 8004ec4:	f7fb fb50 	bl	8000568 <__aeabi_dmul>
 8004ec8:	4bb4      	ldr	r3, [pc, #720]	; (800519c <__kernel_tan+0x394>)
 8004eca:	2200      	movs	r2, #0
 8004ecc:	f7fb f996 	bl	80001fc <__adddf3>
 8004ed0:	4602      	mov	r2, r0
 8004ed2:	460b      	mov	r3, r1
 8004ed4:	4640      	mov	r0, r8
 8004ed6:	4649      	mov	r1, r9
 8004ed8:	f7fb f990 	bl	80001fc <__adddf3>
 8004edc:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004ee0:	f7fb fb42 	bl	8000568 <__aeabi_dmul>
 8004ee4:	4622      	mov	r2, r4
 8004ee6:	462b      	mov	r3, r5
 8004ee8:	f7fb f988 	bl	80001fc <__adddf3>
 8004eec:	e7b5      	b.n	8004e5a <__kernel_tan+0x52>
 8004eee:	4bad      	ldr	r3, [pc, #692]	; (80051a4 <__kernel_tan+0x39c>)
 8004ef0:	429f      	cmp	r7, r3
 8004ef2:	dd26      	ble.n	8004f42 <__kernel_tan+0x13a>
 8004ef4:	9b00      	ldr	r3, [sp, #0]
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	da09      	bge.n	8004f0e <__kernel_tan+0x106>
 8004efa:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8004efe:	469b      	mov	fp, r3
 8004f00:	ee10 aa10 	vmov	sl, s0
 8004f04:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8004f08:	ee11 8a10 	vmov	r8, s2
 8004f0c:	4699      	mov	r9, r3
 8004f0e:	4652      	mov	r2, sl
 8004f10:	465b      	mov	r3, fp
 8004f12:	a183      	add	r1, pc, #524	; (adr r1, 8005120 <__kernel_tan+0x318>)
 8004f14:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004f18:	f7fb f96e 	bl	80001f8 <__aeabi_dsub>
 8004f1c:	4642      	mov	r2, r8
 8004f1e:	464b      	mov	r3, r9
 8004f20:	4604      	mov	r4, r0
 8004f22:	460d      	mov	r5, r1
 8004f24:	a180      	add	r1, pc, #512	; (adr r1, 8005128 <__kernel_tan+0x320>)
 8004f26:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004f2a:	f7fb f965 	bl	80001f8 <__aeabi_dsub>
 8004f2e:	4622      	mov	r2, r4
 8004f30:	462b      	mov	r3, r5
 8004f32:	f7fb f963 	bl	80001fc <__adddf3>
 8004f36:	f04f 0800 	mov.w	r8, #0
 8004f3a:	4682      	mov	sl, r0
 8004f3c:	468b      	mov	fp, r1
 8004f3e:	f04f 0900 	mov.w	r9, #0
 8004f42:	4652      	mov	r2, sl
 8004f44:	465b      	mov	r3, fp
 8004f46:	4650      	mov	r0, sl
 8004f48:	4659      	mov	r1, fp
 8004f4a:	f7fb fb0d 	bl	8000568 <__aeabi_dmul>
 8004f4e:	4602      	mov	r2, r0
 8004f50:	460b      	mov	r3, r1
 8004f52:	ec43 2b18 	vmov	d8, r2, r3
 8004f56:	f7fb fb07 	bl	8000568 <__aeabi_dmul>
 8004f5a:	ec53 2b18 	vmov	r2, r3, d8
 8004f5e:	4604      	mov	r4, r0
 8004f60:	460d      	mov	r5, r1
 8004f62:	4650      	mov	r0, sl
 8004f64:	4659      	mov	r1, fp
 8004f66:	f7fb faff 	bl	8000568 <__aeabi_dmul>
 8004f6a:	a371      	add	r3, pc, #452	; (adr r3, 8005130 <__kernel_tan+0x328>)
 8004f6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f70:	ec41 0b19 	vmov	d9, r0, r1
 8004f74:	4620      	mov	r0, r4
 8004f76:	4629      	mov	r1, r5
 8004f78:	f7fb faf6 	bl	8000568 <__aeabi_dmul>
 8004f7c:	a36e      	add	r3, pc, #440	; (adr r3, 8005138 <__kernel_tan+0x330>)
 8004f7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f82:	f7fb f93b 	bl	80001fc <__adddf3>
 8004f86:	4622      	mov	r2, r4
 8004f88:	462b      	mov	r3, r5
 8004f8a:	f7fb faed 	bl	8000568 <__aeabi_dmul>
 8004f8e:	a36c      	add	r3, pc, #432	; (adr r3, 8005140 <__kernel_tan+0x338>)
 8004f90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f94:	f7fb f932 	bl	80001fc <__adddf3>
 8004f98:	4622      	mov	r2, r4
 8004f9a:	462b      	mov	r3, r5
 8004f9c:	f7fb fae4 	bl	8000568 <__aeabi_dmul>
 8004fa0:	a369      	add	r3, pc, #420	; (adr r3, 8005148 <__kernel_tan+0x340>)
 8004fa2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004fa6:	f7fb f929 	bl	80001fc <__adddf3>
 8004faa:	4622      	mov	r2, r4
 8004fac:	462b      	mov	r3, r5
 8004fae:	f7fb fadb 	bl	8000568 <__aeabi_dmul>
 8004fb2:	a367      	add	r3, pc, #412	; (adr r3, 8005150 <__kernel_tan+0x348>)
 8004fb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004fb8:	f7fb f920 	bl	80001fc <__adddf3>
 8004fbc:	4622      	mov	r2, r4
 8004fbe:	462b      	mov	r3, r5
 8004fc0:	f7fb fad2 	bl	8000568 <__aeabi_dmul>
 8004fc4:	a364      	add	r3, pc, #400	; (adr r3, 8005158 <__kernel_tan+0x350>)
 8004fc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004fca:	f7fb f917 	bl	80001fc <__adddf3>
 8004fce:	ec53 2b18 	vmov	r2, r3, d8
 8004fd2:	f7fb fac9 	bl	8000568 <__aeabi_dmul>
 8004fd6:	a362      	add	r3, pc, #392	; (adr r3, 8005160 <__kernel_tan+0x358>)
 8004fd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004fdc:	ec41 0b1a 	vmov	d10, r0, r1
 8004fe0:	4620      	mov	r0, r4
 8004fe2:	4629      	mov	r1, r5
 8004fe4:	f7fb fac0 	bl	8000568 <__aeabi_dmul>
 8004fe8:	a35f      	add	r3, pc, #380	; (adr r3, 8005168 <__kernel_tan+0x360>)
 8004fea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004fee:	f7fb f905 	bl	80001fc <__adddf3>
 8004ff2:	4622      	mov	r2, r4
 8004ff4:	462b      	mov	r3, r5
 8004ff6:	f7fb fab7 	bl	8000568 <__aeabi_dmul>
 8004ffa:	a35d      	add	r3, pc, #372	; (adr r3, 8005170 <__kernel_tan+0x368>)
 8004ffc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005000:	f7fb f8fc 	bl	80001fc <__adddf3>
 8005004:	4622      	mov	r2, r4
 8005006:	462b      	mov	r3, r5
 8005008:	f7fb faae 	bl	8000568 <__aeabi_dmul>
 800500c:	a35a      	add	r3, pc, #360	; (adr r3, 8005178 <__kernel_tan+0x370>)
 800500e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005012:	f7fb f8f3 	bl	80001fc <__adddf3>
 8005016:	4622      	mov	r2, r4
 8005018:	462b      	mov	r3, r5
 800501a:	f7fb faa5 	bl	8000568 <__aeabi_dmul>
 800501e:	a358      	add	r3, pc, #352	; (adr r3, 8005180 <__kernel_tan+0x378>)
 8005020:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005024:	f7fb f8ea 	bl	80001fc <__adddf3>
 8005028:	4622      	mov	r2, r4
 800502a:	462b      	mov	r3, r5
 800502c:	f7fb fa9c 	bl	8000568 <__aeabi_dmul>
 8005030:	a355      	add	r3, pc, #340	; (adr r3, 8005188 <__kernel_tan+0x380>)
 8005032:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005036:	f7fb f8e1 	bl	80001fc <__adddf3>
 800503a:	4602      	mov	r2, r0
 800503c:	460b      	mov	r3, r1
 800503e:	ec51 0b1a 	vmov	r0, r1, d10
 8005042:	f7fb f8db 	bl	80001fc <__adddf3>
 8005046:	ec53 2b19 	vmov	r2, r3, d9
 800504a:	f7fb fa8d 	bl	8000568 <__aeabi_dmul>
 800504e:	4642      	mov	r2, r8
 8005050:	464b      	mov	r3, r9
 8005052:	f7fb f8d3 	bl	80001fc <__adddf3>
 8005056:	ec53 2b18 	vmov	r2, r3, d8
 800505a:	f7fb fa85 	bl	8000568 <__aeabi_dmul>
 800505e:	4642      	mov	r2, r8
 8005060:	464b      	mov	r3, r9
 8005062:	f7fb f8cb 	bl	80001fc <__adddf3>
 8005066:	a34a      	add	r3, pc, #296	; (adr r3, 8005190 <__kernel_tan+0x388>)
 8005068:	e9d3 2300 	ldrd	r2, r3, [r3]
 800506c:	4604      	mov	r4, r0
 800506e:	460d      	mov	r5, r1
 8005070:	ec51 0b19 	vmov	r0, r1, d9
 8005074:	f7fb fa78 	bl	8000568 <__aeabi_dmul>
 8005078:	4622      	mov	r2, r4
 800507a:	462b      	mov	r3, r5
 800507c:	f7fb f8be 	bl	80001fc <__adddf3>
 8005080:	460b      	mov	r3, r1
 8005082:	ec41 0b18 	vmov	d8, r0, r1
 8005086:	4602      	mov	r2, r0
 8005088:	4659      	mov	r1, fp
 800508a:	4650      	mov	r0, sl
 800508c:	f7fb f8b6 	bl	80001fc <__adddf3>
 8005090:	4b44      	ldr	r3, [pc, #272]	; (80051a4 <__kernel_tan+0x39c>)
 8005092:	429f      	cmp	r7, r3
 8005094:	4604      	mov	r4, r0
 8005096:	460d      	mov	r5, r1
 8005098:	f340 8086 	ble.w	80051a8 <__kernel_tan+0x3a0>
 800509c:	4630      	mov	r0, r6
 800509e:	f7fb f9f9 	bl	8000494 <__aeabi_i2d>
 80050a2:	4622      	mov	r2, r4
 80050a4:	4680      	mov	r8, r0
 80050a6:	4689      	mov	r9, r1
 80050a8:	462b      	mov	r3, r5
 80050aa:	4620      	mov	r0, r4
 80050ac:	4629      	mov	r1, r5
 80050ae:	f7fb fa5b 	bl	8000568 <__aeabi_dmul>
 80050b2:	4642      	mov	r2, r8
 80050b4:	4606      	mov	r6, r0
 80050b6:	460f      	mov	r7, r1
 80050b8:	464b      	mov	r3, r9
 80050ba:	4620      	mov	r0, r4
 80050bc:	4629      	mov	r1, r5
 80050be:	f7fb f89d 	bl	80001fc <__adddf3>
 80050c2:	4602      	mov	r2, r0
 80050c4:	460b      	mov	r3, r1
 80050c6:	4630      	mov	r0, r6
 80050c8:	4639      	mov	r1, r7
 80050ca:	f7fb fb77 	bl	80007bc <__aeabi_ddiv>
 80050ce:	ec53 2b18 	vmov	r2, r3, d8
 80050d2:	f7fb f891 	bl	80001f8 <__aeabi_dsub>
 80050d6:	4602      	mov	r2, r0
 80050d8:	460b      	mov	r3, r1
 80050da:	4650      	mov	r0, sl
 80050dc:	4659      	mov	r1, fp
 80050de:	f7fb f88b 	bl	80001f8 <__aeabi_dsub>
 80050e2:	4602      	mov	r2, r0
 80050e4:	460b      	mov	r3, r1
 80050e6:	f7fb f889 	bl	80001fc <__adddf3>
 80050ea:	4602      	mov	r2, r0
 80050ec:	460b      	mov	r3, r1
 80050ee:	4640      	mov	r0, r8
 80050f0:	4649      	mov	r1, r9
 80050f2:	f7fb f881 	bl	80001f8 <__aeabi_dsub>
 80050f6:	9b00      	ldr	r3, [sp, #0]
 80050f8:	ea4f 7aa3 	mov.w	sl, r3, asr #30
 80050fc:	f00a 0a02 	and.w	sl, sl, #2
 8005100:	4604      	mov	r4, r0
 8005102:	f1ca 0001 	rsb	r0, sl, #1
 8005106:	460d      	mov	r5, r1
 8005108:	f7fb f9c4 	bl	8000494 <__aeabi_i2d>
 800510c:	4602      	mov	r2, r0
 800510e:	460b      	mov	r3, r1
 8005110:	4620      	mov	r0, r4
 8005112:	4629      	mov	r1, r5
 8005114:	f7fb fa28 	bl	8000568 <__aeabi_dmul>
 8005118:	e69f      	b.n	8004e5a <__kernel_tan+0x52>
 800511a:	bf00      	nop
 800511c:	f3af 8000 	nop.w
 8005120:	54442d18 	.word	0x54442d18
 8005124:	3fe921fb 	.word	0x3fe921fb
 8005128:	33145c07 	.word	0x33145c07
 800512c:	3c81a626 	.word	0x3c81a626
 8005130:	74bf7ad4 	.word	0x74bf7ad4
 8005134:	3efb2a70 	.word	0x3efb2a70
 8005138:	32f0a7e9 	.word	0x32f0a7e9
 800513c:	3f12b80f 	.word	0x3f12b80f
 8005140:	1a8d1068 	.word	0x1a8d1068
 8005144:	3f3026f7 	.word	0x3f3026f7
 8005148:	fee08315 	.word	0xfee08315
 800514c:	3f57dbc8 	.word	0x3f57dbc8
 8005150:	e96e8493 	.word	0xe96e8493
 8005154:	3f8226e3 	.word	0x3f8226e3
 8005158:	1bb341fe 	.word	0x1bb341fe
 800515c:	3faba1ba 	.word	0x3faba1ba
 8005160:	db605373 	.word	0xdb605373
 8005164:	bef375cb 	.word	0xbef375cb
 8005168:	a03792a6 	.word	0xa03792a6
 800516c:	3f147e88 	.word	0x3f147e88
 8005170:	f2f26501 	.word	0xf2f26501
 8005174:	3f4344d8 	.word	0x3f4344d8
 8005178:	c9560328 	.word	0xc9560328
 800517c:	3f6d6d22 	.word	0x3f6d6d22
 8005180:	8406d637 	.word	0x8406d637
 8005184:	3f9664f4 	.word	0x3f9664f4
 8005188:	1110fe7a 	.word	0x1110fe7a
 800518c:	3fc11111 	.word	0x3fc11111
 8005190:	55555563 	.word	0x55555563
 8005194:	3fd55555 	.word	0x3fd55555
 8005198:	3e2fffff 	.word	0x3e2fffff
 800519c:	3ff00000 	.word	0x3ff00000
 80051a0:	bff00000 	.word	0xbff00000
 80051a4:	3fe59427 	.word	0x3fe59427
 80051a8:	2e01      	cmp	r6, #1
 80051aa:	d02f      	beq.n	800520c <__kernel_tan+0x404>
 80051ac:	460f      	mov	r7, r1
 80051ae:	4602      	mov	r2, r0
 80051b0:	460b      	mov	r3, r1
 80051b2:	4689      	mov	r9, r1
 80051b4:	2000      	movs	r0, #0
 80051b6:	4917      	ldr	r1, [pc, #92]	; (8005214 <__kernel_tan+0x40c>)
 80051b8:	f7fb fb00 	bl	80007bc <__aeabi_ddiv>
 80051bc:	2600      	movs	r6, #0
 80051be:	e9cd 0100 	strd	r0, r1, [sp]
 80051c2:	4652      	mov	r2, sl
 80051c4:	465b      	mov	r3, fp
 80051c6:	4630      	mov	r0, r6
 80051c8:	4639      	mov	r1, r7
 80051ca:	f7fb f815 	bl	80001f8 <__aeabi_dsub>
 80051ce:	e9dd 4500 	ldrd	r4, r5, [sp]
 80051d2:	4602      	mov	r2, r0
 80051d4:	460b      	mov	r3, r1
 80051d6:	ec51 0b18 	vmov	r0, r1, d8
 80051da:	f7fb f80d 	bl	80001f8 <__aeabi_dsub>
 80051de:	4632      	mov	r2, r6
 80051e0:	462b      	mov	r3, r5
 80051e2:	f7fb f9c1 	bl	8000568 <__aeabi_dmul>
 80051e6:	46b0      	mov	r8, r6
 80051e8:	460f      	mov	r7, r1
 80051ea:	4642      	mov	r2, r8
 80051ec:	462b      	mov	r3, r5
 80051ee:	4634      	mov	r4, r6
 80051f0:	4649      	mov	r1, r9
 80051f2:	4606      	mov	r6, r0
 80051f4:	4640      	mov	r0, r8
 80051f6:	f7fb f9b7 	bl	8000568 <__aeabi_dmul>
 80051fa:	4b07      	ldr	r3, [pc, #28]	; (8005218 <__kernel_tan+0x410>)
 80051fc:	2200      	movs	r2, #0
 80051fe:	f7fa fffd 	bl	80001fc <__adddf3>
 8005202:	4602      	mov	r2, r0
 8005204:	460b      	mov	r3, r1
 8005206:	4630      	mov	r0, r6
 8005208:	4639      	mov	r1, r7
 800520a:	e665      	b.n	8004ed8 <__kernel_tan+0xd0>
 800520c:	4682      	mov	sl, r0
 800520e:	468b      	mov	fp, r1
 8005210:	e625      	b.n	8004e5e <__kernel_tan+0x56>
 8005212:	bf00      	nop
 8005214:	bff00000 	.word	0xbff00000
 8005218:	3ff00000 	.word	0x3ff00000

0800521c <fabs>:
 800521c:	ec51 0b10 	vmov	r0, r1, d0
 8005220:	ee10 2a10 	vmov	r2, s0
 8005224:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8005228:	ec43 2b10 	vmov	d0, r2, r3
 800522c:	4770      	bx	lr
	...

08005230 <floor>:
 8005230:	ec51 0b10 	vmov	r0, r1, d0
 8005234:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005238:	f3c1 570a 	ubfx	r7, r1, #20, #11
 800523c:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 8005240:	2e13      	cmp	r6, #19
 8005242:	ee10 5a10 	vmov	r5, s0
 8005246:	ee10 8a10 	vmov	r8, s0
 800524a:	460c      	mov	r4, r1
 800524c:	dc32      	bgt.n	80052b4 <floor+0x84>
 800524e:	2e00      	cmp	r6, #0
 8005250:	da14      	bge.n	800527c <floor+0x4c>
 8005252:	a333      	add	r3, pc, #204	; (adr r3, 8005320 <floor+0xf0>)
 8005254:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005258:	f7fa ffd0 	bl	80001fc <__adddf3>
 800525c:	2200      	movs	r2, #0
 800525e:	2300      	movs	r3, #0
 8005260:	f7fb fc12 	bl	8000a88 <__aeabi_dcmpgt>
 8005264:	b138      	cbz	r0, 8005276 <floor+0x46>
 8005266:	2c00      	cmp	r4, #0
 8005268:	da57      	bge.n	800531a <floor+0xea>
 800526a:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800526e:	431d      	orrs	r5, r3
 8005270:	d001      	beq.n	8005276 <floor+0x46>
 8005272:	4c2d      	ldr	r4, [pc, #180]	; (8005328 <floor+0xf8>)
 8005274:	2500      	movs	r5, #0
 8005276:	4621      	mov	r1, r4
 8005278:	4628      	mov	r0, r5
 800527a:	e025      	b.n	80052c8 <floor+0x98>
 800527c:	4f2b      	ldr	r7, [pc, #172]	; (800532c <floor+0xfc>)
 800527e:	4137      	asrs	r7, r6
 8005280:	ea01 0307 	and.w	r3, r1, r7
 8005284:	4303      	orrs	r3, r0
 8005286:	d01f      	beq.n	80052c8 <floor+0x98>
 8005288:	a325      	add	r3, pc, #148	; (adr r3, 8005320 <floor+0xf0>)
 800528a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800528e:	f7fa ffb5 	bl	80001fc <__adddf3>
 8005292:	2200      	movs	r2, #0
 8005294:	2300      	movs	r3, #0
 8005296:	f7fb fbf7 	bl	8000a88 <__aeabi_dcmpgt>
 800529a:	2800      	cmp	r0, #0
 800529c:	d0eb      	beq.n	8005276 <floor+0x46>
 800529e:	2c00      	cmp	r4, #0
 80052a0:	bfbe      	ittt	lt
 80052a2:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 80052a6:	fa43 f606 	asrlt.w	r6, r3, r6
 80052aa:	19a4      	addlt	r4, r4, r6
 80052ac:	ea24 0407 	bic.w	r4, r4, r7
 80052b0:	2500      	movs	r5, #0
 80052b2:	e7e0      	b.n	8005276 <floor+0x46>
 80052b4:	2e33      	cmp	r6, #51	; 0x33
 80052b6:	dd0b      	ble.n	80052d0 <floor+0xa0>
 80052b8:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 80052bc:	d104      	bne.n	80052c8 <floor+0x98>
 80052be:	ee10 2a10 	vmov	r2, s0
 80052c2:	460b      	mov	r3, r1
 80052c4:	f7fa ff9a 	bl	80001fc <__adddf3>
 80052c8:	ec41 0b10 	vmov	d0, r0, r1
 80052cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80052d0:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 80052d4:	f04f 33ff 	mov.w	r3, #4294967295
 80052d8:	fa23 f707 	lsr.w	r7, r3, r7
 80052dc:	4207      	tst	r7, r0
 80052de:	d0f3      	beq.n	80052c8 <floor+0x98>
 80052e0:	a30f      	add	r3, pc, #60	; (adr r3, 8005320 <floor+0xf0>)
 80052e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052e6:	f7fa ff89 	bl	80001fc <__adddf3>
 80052ea:	2200      	movs	r2, #0
 80052ec:	2300      	movs	r3, #0
 80052ee:	f7fb fbcb 	bl	8000a88 <__aeabi_dcmpgt>
 80052f2:	2800      	cmp	r0, #0
 80052f4:	d0bf      	beq.n	8005276 <floor+0x46>
 80052f6:	2c00      	cmp	r4, #0
 80052f8:	da02      	bge.n	8005300 <floor+0xd0>
 80052fa:	2e14      	cmp	r6, #20
 80052fc:	d103      	bne.n	8005306 <floor+0xd6>
 80052fe:	3401      	adds	r4, #1
 8005300:	ea25 0507 	bic.w	r5, r5, r7
 8005304:	e7b7      	b.n	8005276 <floor+0x46>
 8005306:	2301      	movs	r3, #1
 8005308:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800530c:	fa03 f606 	lsl.w	r6, r3, r6
 8005310:	4435      	add	r5, r6
 8005312:	4545      	cmp	r5, r8
 8005314:	bf38      	it	cc
 8005316:	18e4      	addcc	r4, r4, r3
 8005318:	e7f2      	b.n	8005300 <floor+0xd0>
 800531a:	2500      	movs	r5, #0
 800531c:	462c      	mov	r4, r5
 800531e:	e7aa      	b.n	8005276 <floor+0x46>
 8005320:	8800759c 	.word	0x8800759c
 8005324:	7e37e43c 	.word	0x7e37e43c
 8005328:	bff00000 	.word	0xbff00000
 800532c:	000fffff 	.word	0x000fffff

08005330 <scalbn>:
 8005330:	b570      	push	{r4, r5, r6, lr}
 8005332:	ec55 4b10 	vmov	r4, r5, d0
 8005336:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800533a:	4606      	mov	r6, r0
 800533c:	462b      	mov	r3, r5
 800533e:	b99a      	cbnz	r2, 8005368 <scalbn+0x38>
 8005340:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8005344:	4323      	orrs	r3, r4
 8005346:	d036      	beq.n	80053b6 <scalbn+0x86>
 8005348:	4b39      	ldr	r3, [pc, #228]	; (8005430 <scalbn+0x100>)
 800534a:	4629      	mov	r1, r5
 800534c:	ee10 0a10 	vmov	r0, s0
 8005350:	2200      	movs	r2, #0
 8005352:	f7fb f909 	bl	8000568 <__aeabi_dmul>
 8005356:	4b37      	ldr	r3, [pc, #220]	; (8005434 <scalbn+0x104>)
 8005358:	429e      	cmp	r6, r3
 800535a:	4604      	mov	r4, r0
 800535c:	460d      	mov	r5, r1
 800535e:	da10      	bge.n	8005382 <scalbn+0x52>
 8005360:	a32b      	add	r3, pc, #172	; (adr r3, 8005410 <scalbn+0xe0>)
 8005362:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005366:	e03a      	b.n	80053de <scalbn+0xae>
 8005368:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800536c:	428a      	cmp	r2, r1
 800536e:	d10c      	bne.n	800538a <scalbn+0x5a>
 8005370:	ee10 2a10 	vmov	r2, s0
 8005374:	4620      	mov	r0, r4
 8005376:	4629      	mov	r1, r5
 8005378:	f7fa ff40 	bl	80001fc <__adddf3>
 800537c:	4604      	mov	r4, r0
 800537e:	460d      	mov	r5, r1
 8005380:	e019      	b.n	80053b6 <scalbn+0x86>
 8005382:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8005386:	460b      	mov	r3, r1
 8005388:	3a36      	subs	r2, #54	; 0x36
 800538a:	4432      	add	r2, r6
 800538c:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8005390:	428a      	cmp	r2, r1
 8005392:	dd08      	ble.n	80053a6 <scalbn+0x76>
 8005394:	2d00      	cmp	r5, #0
 8005396:	a120      	add	r1, pc, #128	; (adr r1, 8005418 <scalbn+0xe8>)
 8005398:	e9d1 0100 	ldrd	r0, r1, [r1]
 800539c:	da1c      	bge.n	80053d8 <scalbn+0xa8>
 800539e:	a120      	add	r1, pc, #128	; (adr r1, 8005420 <scalbn+0xf0>)
 80053a0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80053a4:	e018      	b.n	80053d8 <scalbn+0xa8>
 80053a6:	2a00      	cmp	r2, #0
 80053a8:	dd08      	ble.n	80053bc <scalbn+0x8c>
 80053aa:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80053ae:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80053b2:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80053b6:	ec45 4b10 	vmov	d0, r4, r5
 80053ba:	bd70      	pop	{r4, r5, r6, pc}
 80053bc:	f112 0f35 	cmn.w	r2, #53	; 0x35
 80053c0:	da19      	bge.n	80053f6 <scalbn+0xc6>
 80053c2:	f24c 3350 	movw	r3, #50000	; 0xc350
 80053c6:	429e      	cmp	r6, r3
 80053c8:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 80053cc:	dd0a      	ble.n	80053e4 <scalbn+0xb4>
 80053ce:	a112      	add	r1, pc, #72	; (adr r1, 8005418 <scalbn+0xe8>)
 80053d0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	d1e2      	bne.n	800539e <scalbn+0x6e>
 80053d8:	a30f      	add	r3, pc, #60	; (adr r3, 8005418 <scalbn+0xe8>)
 80053da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053de:	f7fb f8c3 	bl	8000568 <__aeabi_dmul>
 80053e2:	e7cb      	b.n	800537c <scalbn+0x4c>
 80053e4:	a10a      	add	r1, pc, #40	; (adr r1, 8005410 <scalbn+0xe0>)
 80053e6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d0b8      	beq.n	8005360 <scalbn+0x30>
 80053ee:	a10e      	add	r1, pc, #56	; (adr r1, 8005428 <scalbn+0xf8>)
 80053f0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80053f4:	e7b4      	b.n	8005360 <scalbn+0x30>
 80053f6:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80053fa:	3236      	adds	r2, #54	; 0x36
 80053fc:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8005400:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8005404:	4620      	mov	r0, r4
 8005406:	4b0c      	ldr	r3, [pc, #48]	; (8005438 <scalbn+0x108>)
 8005408:	2200      	movs	r2, #0
 800540a:	e7e8      	b.n	80053de <scalbn+0xae>
 800540c:	f3af 8000 	nop.w
 8005410:	c2f8f359 	.word	0xc2f8f359
 8005414:	01a56e1f 	.word	0x01a56e1f
 8005418:	8800759c 	.word	0x8800759c
 800541c:	7e37e43c 	.word	0x7e37e43c
 8005420:	8800759c 	.word	0x8800759c
 8005424:	fe37e43c 	.word	0xfe37e43c
 8005428:	c2f8f359 	.word	0xc2f8f359
 800542c:	81a56e1f 	.word	0x81a56e1f
 8005430:	43500000 	.word	0x43500000
 8005434:	ffff3cb0 	.word	0xffff3cb0
 8005438:	3c900000 	.word	0x3c900000

0800543c <_init>:
 800543c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800543e:	bf00      	nop
 8005440:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005442:	bc08      	pop	{r3}
 8005444:	469e      	mov	lr, r3
 8005446:	4770      	bx	lr

08005448 <_fini>:
 8005448:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800544a:	bf00      	nop
 800544c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800544e:	bc08      	pop	{r3}
 8005450:	469e      	mov	lr, r3
 8005452:	4770      	bx	lr
